<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马浩飞丨博客</title>
  
  <subtitle>进步无止境</subtitle>
  <link href="https://www.mahaofei.com/atom.xml" rel="self"/>
  
  <link href="https://www.mahaofei.com/"/>
  <updated>2025-05-14T02:25:38.000Z</updated>
  <id>https://www.mahaofei.com/</id>
  
  <author>
    <name>马浩飞</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cloudflare R2 个人图床</title>
    <link href="https://www.mahaofei.com/post/cloudflare-r2.html"/>
    <id>https://www.mahaofei.com/post/cloudflare-r2.html</id>
    <published>2025-05-14T02:25:38.000Z</published>
    <updated>2025-05-14T02:25:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前使用阿里云OSS 搭建个人图床，但是随着文章数量和图片数量增多，网站访问量增大，图床的流量也变大了，导致费用日益上升。因此考虑切换一个图床平台，找到了赛博大善人 Cloudflare 的 R2 存储桶可以提供免费 10G 存储，每月 1000 万次免费读取请求。</p></blockquote><h2 id="1-Cloudflare-R2-存储桶">1. Cloudflare R2 存储桶</h2><h3 id="1-1-创建-R2-存储桶">1.1 创建 R2 存储桶</h3><p>打开 Cloudflare 控制台页面，在左侧找到 R2 对象存储。在右侧可以看到每月免费使用量的信息，然后将 R2 订阅添加到账户。</p><p><img src="https://img.mahaofei.com/img/20250514-Cloudflare_R2-Subscribe.png" alt="image.png"></p><p>然后创建一个存储桶，存储桶的名字随意，地区如果是主要面向大陆就选择亚太地区 Asia-Pacfic (APAC)。</p><p><img src="https://img.mahaofei.com/img/20250514-Cloudflare_R2-Bucket.png" alt="image.png"></p><p><img src="https://img.mahaofei.com/img/20250514-Cloudflare_R2-Create_bucket.png" alt="image.png"></p><h3 id="1-2-R2-绑定个人域名">1.2 R2 绑定个人域名</h3><p>然后点击【设置-&gt;添加自定义域】，将自己的二级域名添加过来（我这里由于使用过 Cloudflare 托管的域名，所以可以直接添加，否则需要手动设置一下 DNS 验证。</p><p><img src="https://img.mahaofei.com/img/20250514-cloudflare_r2-custom_domain.png" alt=""></p><p>手动刷新一下页面，看到【状态】和【访问】两个都变成绿色，说明添加成功了。</p><h3 id="1-3-创建-R2-API-令牌">1.3 创建 R2 API 令牌</h3><p>回到 R2 存储的概述页面，右侧找到 API 按钮，选择【管理 API 令牌】。</p><p><img src="https://img.mahaofei.com/img/20250514-Cloudflare_R2-API_Manage.png" alt="20250514-Cloudflare_R2-API_Manage.png"></p><p>然后创建 Account API令牌。</p><p><img src="https://img.mahaofei.com/img/20250514-Cloudflare_R2-API_Create.png" alt="20250514-Cloudflare_R2-API_Create.png"></p><p>创建完成后，将所有数据记录下来（这些ID 和密钥只会显示一次，关闭后就不会再显示了，只能重新创建），也千万不要公开。</p><h2 id="2-PicGo-配置">2. PicGo 配置</h2><p>在 PicGo 中搜索并安装 S3 插件。</p><p><img src="https://img.mahaofei.com/img/20250514-Cloudflare_R2-Picgo_plugin.png" alt="20250514-Cloudflare_R2-Picgo_plugin.png"></p><p>然后按照下面的图中示例进行填写</p><p><img src="https://img.mahaofei.com/img/20250514-Cloudflare_R2-Picgo_config_1.png" alt="image.png"></p><p><img src="https://img.mahaofei.com/img/20250514-Cloudflare_R2-Picgo_config_2.png" alt="image.png"></p><blockquote><p>参考：</p><ol><li><a href="https://developers.cloudflare.com/r2/pricing/">Cloudflare R2 对象存储: https://developers.cloudflare.com/r2/pricing/</a></li><li><a href="https://github.com/Molunerfinn/PicGo">Picgo: https://github.com/Molunerfinn/PicGo</a></li><li><a href="https://github.com/wayjam/picgo-plugin-s3">Picgo-Plugin-S3: https://github.com/wayjam/picgo-plugin-s3</a></li><li><a href="https://blog.huacai.one/post/3">花菜的博客. 白嫖CloudFlare R2搭建个人图床. https://blog.huacai.one/post/3</a></li></ol></blockquote>]]></content>
    
    
    <summary type="html">之前使用阿里云OSS 搭建个人图床，但是随着文章数量和图片数量增多，网站访问量增大，图床的流量也变大了，导致费用日益上升。因此考虑切换一个图床平台，找到了赛博大善人 Cloudflare 的 R2 存储桶可以提供免费 10G 存储，每月 1000 万次免费读取请求。</summary>
    
    
    
    <category term="程序基础" scheme="https://www.mahaofei.com/categories/%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网站搭建" scheme="https://www.mahaofei.com/categories/%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    
    <category term="图床" scheme="https://www.mahaofei.com/categories/%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/%E5%9B%BE%E5%BA%8A/"/>
    
    
    <category term="Cloudflare" scheme="https://www.mahaofei.com/tags/Cloudflare/"/>
    
    <category term="图床" scheme="https://www.mahaofei.com/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>Isaac Sim 机械臂逆运动学控制</title>
    <link href="https://www.mahaofei.com/post/isaacsim-ik.html"/>
    <id>https://www.mahaofei.com/post/isaacsim-ik.html</id>
    <published>2025-03-07T07:34:28.000Z</published>
    <updated>2025-03-07T07:34:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考</p><ul><li><a href="https://docs.isaacsim.omniverse.nvidia.com/latest/manipulators/manipulators_lula_kinematics.html#using-the-lulakinematicssolver-to-compute-forward-and-inverse-kinematics">Lula Kinematics Solver</a></li><li><a href="https://docs.isaacsim.omniverse.nvidia.com/latest/manipulators/manipulators_robot_description_editor.html#isaac-sim-app-tutorial-motion-generation-robot-description-editor">Lula Robot Description and XRDF Editor</a></li><li><a href="https://docs.omniverse.nvidia.com/py/isaacsim/source/extensions/omni.isaac.motion_generation/docs/index.html?highlight=inverse%20kinematics#articulationkinematicssolver">ArticulationKinematicsSolver</a></li></ul></blockquote><p><strong>前言</strong></p><p>由于之前一直在用 Mujoco，现在由于某些原因切换到使用 Isaac Sim中，刚刚接触，记录摸索 Isaac Sim 实现机器人仿真中的一些笔记，供参考。</p><p>本次实现机器人逆运动学控制，由于示例中给了关节控制的例程，非常简单，但是当我想实现笛卡尔空间控制时，查阅文档找到了<code>ArticulationKinematicsSolver</code><a href="https://docs.omniverse.nvidia.com/py/isaacsim/source/extensions/omni.isaac.motion_generation/docs/index.html?highlight=inverse"><strong>🔗</strong></a>，但这里的参数需要传入一个kinematics_solver的实例对象，因此又找到了 <code>KinematicsSolver</code><a href="https://docs.omniverse.nvidia.com/py/isaacsim/source/extensions/omni.isaac.motion_generation/docs/index.html?highlight=inverse%20kinematics#kinematicssolver"><strong>🔗</strong></a>，进而知道需要先创建一个 <a href="https://docs.isaacsim.omniverse.nvidia.com/latest/manipulators/manipulators_lula_kinematics.html#using-the-lulakinematicssolver-to-compute-forward-and-inverse-kinematics">Lula Kinematics Solver</a>，本文就以Lula Kinematics Solver为基础，实现机械臂逆运动学控制</p><h2 id="前提需求">前提需求</h2><ul><li>需要安装 WorkStation 版本的 Isaac Sim 4.5.0（Python 版本的 Isaac Sim 似乎确实某些功能，没有【Tool-Robotics-Lula Robot Description Editor】）</li><li>已经有机械臂的 <code>urdf</code> 和 <code>usd</code> 模型</li></ul><h2 id="1-Lula-Robot-Description-创建">1. Lula Robot Description 创建</h2><p>在 <a href="https://docs.isaacsim.omniverse.nvidia.com/latest/manipulators/manipulators_lula_kinematics.html#using-the-lulakinematicssolver-to-compute-forward-and-inverse-kinematics">Lula Kinematics Solver</a> 的文档中可以知道，要想配置 Lula Kinematics Solver，需要有<code>robot_descriptor.yaml</code> 和机器人 <code>urdf</code> 这两个文件。其中 <code>urdf</code> 肯定已经都有了，本节从使用 Isaac Sim 的 Robot Description Editor 创建 <code>robot_descriptor.yaml</code> 开始。</p><p>以本文的 UR + 灵巧手为例，共有 6+6=12个关节是可控关节，但 Lula 关注将机器人移动到指定位置，不涉及末端执行器，因此只考虑 UR 的6个关节为活动关节，灵巧手关节视为固定关节。</p><p><strong>（1）打开 Lula Robot Description Editor</strong></p><p>启动 Isaac Sim：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/isaacsim</span><br><span class="line">./isaac-sim.sh</span><br></pre></td></tr></table></figure><p>将机器人USD文件拖入到 <code>World</code> 坐标系下。</p><p><img src="https://img.mahaofei.com/img/20250307153134657.png" alt="image.png"></p><p>打开【Tools -&gt; Robotics -&gt; Lula Robot Description Editor】，会发现窗口左侧出现Lula Robot Description Editor的面板。</p><p>然后点击【播放】按钮，Lula Robot Description Editor中会出现【Selection Panel】，在其中的 Select Articulation 位置选择自己的机器人，下方会展开一个 Set Joint Properties 面板。</p><p><strong>（2）设置关节属性</strong></p><p>按照 UR 机器人的活动关节，依次将 6 个 Joint Status 设置为 Active Joint，默认的关节位置，加速度限制等可以先不修改，后续熟悉了各参数含义再修改也没问题。</p><p>灵巧手/夹爪所包含的关节都设置为 Fixed Joint。</p><p><img src="https://img.mahaofei.com/img/20250307153225411.png" alt="image.png"></p><p><strong>（3）碰撞球（只做运动学可省略）</strong></p><p>需要再 Robot Description 文件中添加碰撞球，才能进行RMPFlow运动规划等，具体方法可以参考 <a href="https://docs.isaacsim.omniverse.nvidia.com/latest/manipulators/manipulators_robot_description_editor.html#adding-collision-spheres">Adding Collision Spheres</a>，理论上对于六自由度机械臂，只需要添加Link2和Link4的碰撞就足够了</p><p>所有过程还是在Lula Robot Description Editor中完成。</p><ul><li>首先在【Selection Panel-Select Link】，选择Link2。</li><li>然后再【Link Sphere Editor-Add Sphere】，添加碰撞球，可以拖动位置，右下角属性调整半径，直到全部覆盖当前link为止。</li></ul><p>重复以上过程，添加Link4的碰撞球，效果如下：</p><p><img src="https://img.mahaofei.com/img/20250307153235559.png" alt="image.png"></p><p><strong>（4）导出配置文件</strong></p><p>保存 Lula Robot Description 文件：在【Export To File -&gt; Export to Lula Robot Description File】，输入一个本地路径（必须以<code>.yaml</code>结尾），例如<code>/home/mahaofei/Downloads/ur5e_hand.yaml</code>，YAML文件会被保存在目标位置。</p><p>保存 XRDF 文件：虽然不知道有什么用，但是也是同样的保存方法。</p><p><img src="https://img.mahaofei.com/img/20250307153248701.png" alt="image.png"></p><h2 id="2-笛卡尔空间运动控制代码">2. 笛卡尔空间运动控制代码</h2><p>参考代码：作用为设置机器人笛卡尔空间位置为position: [0.5, 0, 0.5]， orientation: [0, 0, 0]。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Isaac Sim 相关依赖库</span></span><br><span class="line"><span class="keyword">from</span> isaacsim <span class="keyword">import</span> SimulationApp</span><br><span class="line">simulation_app = SimulationApp(&#123;<span class="string">&quot;headless&quot;</span>: <span class="literal">False</span>&#125;)  <span class="comment"># start the simulation app, with GUI open</span></span><br><span class="line"><span class="keyword">from</span> isaacsim.core.api <span class="keyword">import</span> World</span><br><span class="line"><span class="keyword">from</span> isaacsim.core.prims <span class="keyword">import</span> Articulation</span><br><span class="line"><span class="keyword">from</span> isaacsim.core.utils.stage <span class="keyword">import</span> add_reference_to_stage, get_stage_units</span><br><span class="line"><span class="keyword">from</span> isaacsim.core.utils.viewports <span class="keyword">import</span> set_camera_view</span><br><span class="line"><span class="keyword">from</span> isaacsim.storage.native <span class="keyword">import</span> get_assets_root_path</span><br><span class="line"><span class="keyword">from</span> isaacsim.robot_motion.motion_generation <span class="keyword">import</span> ArticulationKinematicsSolver, LulaKinematicsSolver</span><br><span class="line"><span class="keyword">from</span> isaacsim.core.utils.numpy.rotations <span class="keyword">import</span> euler_angles_to_quats</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> isaacsim.core.utils.types <span class="keyword">import</span> ArticulationAction</span><br><span class="line"><span class="keyword">from</span> isaacsim.robot.manipulators.manipulators <span class="keyword">import</span> SingleManipulator</span><br><span class="line"><span class="keyword">import</span> isaacsim.core.api.tasks <span class="keyword">as</span> tasks</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KinematicsSolver</span>(<span class="title class_ inherited__">ArticulationKinematicsSolver</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, robot_articulation: Articulation, end_effector_frame_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="comment">#<span class="doctag">TODO:</span> change the config path</span></span><br><span class="line">        self._kinematics = LulaKinematicsSolver(robot_description_path=<span class="string">&quot;asset/isaac_sim/ur5e_hand/ur5e_hand.yaml&quot;</span>,</span><br><span class="line">                                                urdf_path=<span class="string">&quot;asset/urdf_ros2/ur5e_hand/urdf/ur5e_hand.urdf&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> end_effector_frame_name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            end_effector_frame_name = <span class="string">&quot;wrist_3_link&quot;</span></span><br><span class="line">        ArticulationKinematicsSolver.__init__(self, robot_articulation, self._kinematics, end_effector_frame_name)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建一个World对象</span></span><br><span class="line">world = World(stage_units_in_meters=<span class="number">1.0</span>)</span><br><span class="line">world.initialize_physics()</span><br><span class="line">world.scene.add_default_ground_plane()</span><br><span class="line">set_camera_view(</span><br><span class="line">    eye=[<span class="number">2.0</span>, <span class="number">1.5</span>, <span class="number">1.8</span>], target=[<span class="number">0.00</span>, <span class="number">0.00</span>, <span class="number">0.81</span>], camera_prim_path=<span class="string">&quot;/OmniverseKit_Persp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 添加一个UR5e机器人</span></span><br><span class="line">add_reference_to_stage(usd_path=<span class="string">&quot;asset/isaac_sim/ur5e_hand/ur5e_hand.usd&quot;</span>, prim_path=<span class="string">&quot;/World/ur5e_hand&quot;</span>)</span><br><span class="line">ur5e_hand = SingleManipulator(</span><br><span class="line">    prim_path=<span class="string">&quot;/World/ur5e_hand&quot;</span>, </span><br><span class="line">    name=<span class="string">&quot;ur5e_hand&quot;</span>, </span><br><span class="line">    end_effector_prim_path=<span class="string">&quot;/World/ur5e_hand/wrist_3_link&quot;</span>)</span><br><span class="line">init_joint_positions=np.array([<span class="number">0.0</span>, -np.pi/<span class="number">2</span>, np.pi/<span class="number">2</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>])</span><br><span class="line">ur5e_hand.set_joints_default_state([init_joint_positions])</span><br><span class="line">ur5e_hand.initialize()</span><br><span class="line">ur5e_hand.post_reset()</span><br><span class="line">world.scene.add(ur5e_hand)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 设置逆运动学求解器</span></span><br><span class="line">controller = KinematicsSolver(ur5e_hand)</span><br><span class="line">articulation_controller = ur5e_hand.get_articulation_controller()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 控制机器人运动</span></span><br><span class="line"><span class="keyword">while</span> simulation_app.is_running():</span><br><span class="line">    world.step(render=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> world.is_playing():</span><br><span class="line">        <span class="keyword">if</span> world.current_time_step_index == <span class="number">0</span>:</span><br><span class="line">            world.reset()</span><br><span class="line">        actions, succ = controller.compute_inverse_kinematics(</span><br><span class="line">            target_position=np.array([<span class="number">0.5</span>, <span class="number">0</span>, <span class="number">0.5</span>]),</span><br><span class="line">            target_orientation=euler_angles_to_quats(np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])),</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> succ:</span><br><span class="line">            articulation_controller.apply_action(actions)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;IK did not converge to a solution.  No action is being taken.&quot;</span>)</span><br><span class="line">simulation_app.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">实现IsaacSim中实现笛卡尔空间控制（逆运动学）的方法。</summary>
    
    
    
    <category term="机器人" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="仿真" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E4%BB%BF%E7%9C%9F/"/>
    
    
    <category term="IsaacSim" scheme="https://www.mahaofei.com/tags/IsaacSim/"/>
    
  </entry>
  
  <entry>
    <title>ROS2_Rviz2显示URDF模型</title>
    <link href="https://www.mahaofei.com/post/ros2-urdf.html"/>
    <id>https://www.mahaofei.com/post/ros2-urdf.html</id>
    <published>2025-02-28T03:11:13.000Z</published>
    <updated>2025-02-28T03:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、实验环境及准备">一、实验环境及准备</h2><p><strong>测试环境</strong>：</p><ul><li>Ubuntu 22.04 LTS</li><li>ROS2 Humble</li></ul><p><strong>准备</strong>：</p><ul><li>URDF 及对应的 Mesh 文件<br>（本文使用的是从 Solidworks 导出的 URDF，具体导出方法可参考<a href="https://www.mahaofei.com/post/f67206dd.html">此文章</a>）</li></ul><p><strong>依赖</strong>：</p><ul><li>确保自己的 ROS2 安装正常（能够运行 turtle demo 即可）</li><li>安装 <code>joint_state_publisher</code> 和 <code>robot_state_publisher</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-$ROS_DISTRO-joint-state-publisher-gui ros-$ROS_DISTRO-robot-state-publisher</span><br></pre></td></tr></table></figure><h2 id="二、工作空间与功能包配置">二、工作空间与功能包配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ros2_ws</span><br><span class="line">cd ros2_ws</span><br></pre></td></tr></table></figure><p>为了方便实现，避免对 launch，package，<a href="http://setup.py">setup.py</a> 等文件进行过多修改混乱，可以在本文在 Github 上传的代码（<a href="https://github.com/HaofeiMa/urdf_ros2_rviz2">https://github.com/HaofeiMa/urdf_ros2_rviz2</a>）基础上修改，以满足自己需求，该代码为 UR5e 机械臂+Inspire Hand 灵巧手模型：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/HaofeiMa/urdf_ros2_rviz2.git</span><br></pre></td></tr></table></figure><p>完成之后，可以首先测试一下是否可以正常 <code>build</code> 以及显示现有模型：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">colcon build</span><br><span class="line">source install/setup.bash</span><br><span class="line">ros2 launch urdf_ros2_rviz2 view_robot_launch.py</span><br></pre></td></tr></table></figure><p>应该可以看到 Rviz2 界面以及现有模型。</p><h2 id="三、修改功能包">三、修改功能包</h2><p><strong>（1）创建功能包</strong></p><p>创建一个自己的 package，并且借鉴刚才 clone 的部分代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 pkg create your_package_name --build-type ament_python</span><br></pre></td></tr></table></figure><p><strong>（2）复制文件</strong></p><p>将 <code>urdf_ros2_rviz2</code> 目录下的 <code>launch</code>, <code>meshes</code>, <code>rviz</code>, <code>urdf</code> 四个文件夹，拷贝到新的 <code>your_package_name</code> 目录下。</p><p><img src="https://img.mahaofei.com/img/20250228105434698.png" alt="image.png"></p><p><strong>（3）修改 <a href="http://setup.py">setup.py</a></strong></p><p>将 <code>urdf_ros2_rviz2</code> 中的 <code>setup.py</code> 文件代码<strong>全部拷贝</strong>过来，然后修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第4行</span></span><br><span class="line">package_name=<span class="string">&#x27;your_package_name&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/20250228105753558.png" alt="image.png"></p><p><strong>（4）修改 package.xml</strong></p><p>将 <code>urdf_ros2_rviz2</code> 中的 <code>package.xml</code> 文件代码<strong>全部拷贝</strong>过来，然后修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第4行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>your_package_name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/20250228105544847.png" alt="image.png"></p><p><strong>（5）复制 Meshes 文件</strong></p><p>将你的 mesh 文件全部复制到 meshes 文件夹中，并将原来的 mesh 文件删除。</p><p>注意如果你 meshes 文件夹结构与我的不同，需要在 <code>setup.py</code> 中修改，使其与你的 STL 文件对应。</p><p><img src="https://img.mahaofei.com/img/20250228104839758.png" alt="image.png"></p><p><strong>（6）修改 urdf 文件</strong></p><p>将你的 urdf 文件复制到 <code>your_package_name</code> 的 <code>urdf</code> 目录中。</p><p>然后进行修改：主要是修改包名，以及检查 meshes 路径是否正确，例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">&quot;package://urdf_ros2_rviz2/meshes/ur5e/visual/base.dae&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ⬆️修改为⬇️ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">&quot;package://your_package_name/meshes/your_path/base.dae&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>（7）修改 launch 文件</strong></p><p>需要修改 package name 以及 urdf 文件名：</p><p><img src="https://img.mahaofei.com/img/20250228105957446.png" alt="image.png"></p><p><strong>（8）修改 rviz</strong></p><p>打开 <code>rviz/view.rviz</code> 文件，找到第 85 行，修改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 你的模型的基坐标系</span></span><br><span class="line"><span class="attr">Fixed Frame:</span> <span class="string">base_link</span></span><br></pre></td></tr></table></figure><p><strong>（8）测试</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">colcon build</span><br><span class="line">source install/setup.bash</span><br><span class="line">ros2 launch test_urdf view_robot_launch.py</span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/20250228110805363.png" alt="image.png"></p><p><img src="https://img.mahaofei.com/img/20250228110918616.png" alt="image.png"></p><blockquote><p>参考：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/465398486">https://zhuanlan.zhihu.com/p/465398486</a></li><li><a href="https://github.com/olmerg/lesson_urdf">https://github.com/olmerg/lesson_urdf</a></li></ol></blockquote>]]></content>
    
    
    <summary type="html">使用ROS2+Rviz2可视化URDF文件，一个示例功能包以及完整修改教程。</summary>
    
    
    
    <category term="机器人" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="ROS" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/ROS/"/>
    
    
    <category term="ROS2" scheme="https://www.mahaofei.com/tags/ROS2/"/>
    
  </entry>
  
  <entry>
    <title>ROS2基本命令总结</title>
    <link href="https://www.mahaofei.com/post/ros2-command.html"/>
    <id>https://www.mahaofei.com/post/ros2-command.html</id>
    <published>2024-12-24T08:47:07.000Z</published>
    <updated>2024-12-24T08:47:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-基本命令">1 基本命令</h2><p>ROS2 中的所有命令都集成在 <code>ros2</code> 命令中，后面参数表示不同的操作目的如 <code>node</code> 表示节点操作，<code>topic</code> 表示话题操作等等，在后面可以再跟参数表示具体干什么。</p><p><strong>(1) 帮助命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 --help</span><br></pre></td></tr></table></figure><p><strong>(2) 运行节点</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ros2 run &lt;package_name&gt; &lt;node_name&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ros2 run turtlesim turtlesim_node</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ros2 run turtlesim turtle_teleop_key</span> </span><br></pre></td></tr></table></figure><p><strong>(3) 查看节点</strong></p><p>打印节点列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 node list</span><br></pre></td></tr></table></figure><p>打印节点信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ros2 node info /&lt;node_name&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ros2 node info /turtlesim</span></span><br></pre></td></tr></table></figure><p><strong>(4) 查看话题</strong></p><p>打印话题列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic list</span><br></pre></td></tr></table></figure><p>订阅话题和打印</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic echo &lt;topic_name&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ros2 topic <span class="built_in">echo</span> /turtle1/cmd_vel</span></span><br></pre></td></tr></table></figure><p>手动发布话题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic pub --rate &lt;rate&gt; &lt;publish_topic&gt; &lt;data_type&gt; &lt;data&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist <span class="string">&quot;&#123;linear: &#123;x: 2.0, y: 0.0, z: 0.0&#125;, angular: &#123;x: 0.0, y: 0.0, z: 1.8&#125;&#125;&quot;</span></span></span><br></pre></td></tr></table></figure><p><strong>(5) 服务</strong></p><p>调用服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ros2 service call &lt;service_name&gt; &lt;service_params&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ros2 service call_ /_spawn turtlesim_/srv/_Spawn_ <span class="string">&quot;&#123;x: 2, y: 2, theta: 0.2, name: &#x27;turtle2&#x27;&#125;&quot;</span></span></span><br></pre></td></tr></table></figure><p><strong>(6) 数据录制</strong></p><p>ROS bag 数据录制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 bag record &lt;topic_name&gt; -o &lt;save_path&gt;</span><br></pre></td></tr></table></figure><p>ROS bag 数据播放</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 bag play &lt;rosbag_filename&gt;</span><br></pre></td></tr></table></figure><p><strong>(7) Launch</strong></p><p>ROS2 中的 launch 文件是基于 Python 描述的，启动 launch 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch &lt;node_name&gt; simple.launch.py</span><br></pre></td></tr></table></figure><p><strong>(8) Rviz</strong></p><p>启动 Rviz 可视化信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run rviz2 rviz2</span><br></pre></td></tr></table></figure><h2 id="2-工作空间">2 工作空间</h2><p><strong>(1) 创建工作空间</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/ros2_ws/src</span><br><span class="line">cd ~/ros2_ws/src</span><br><span class="line">git clone https://github.com/ros/ros_tutorials.git -b humble</span><br></pre></td></tr></table></figure><p><strong>(2) 自动安装依赖</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/ros2_ws/</span><br><span class="line">rosdep install -i --from-path src --rosdistro humble -y</span><br></pre></td></tr></table></figure><p><strong>(3) 编译工作空间</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/ros2_ws/</span><br><span class="line">colcon build</span><br></pre></td></tr></table></figure><p><strong>(4) 设置环境变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source install/local_setup.sh</span><br></pre></td></tr></table></figure><h2 id="3-功能包">3 功能包</h2><p><strong>(1) 创建功能包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/ros2_ws/src</span><br><span class="line">ros2 pkg create --build-type ament_cmake c_pkg_name</span><br><span class="line">ros2 pkg create --build-type ament_python python_pkg_name</span><br></pre></td></tr></table></figure><p><strong>(2) 编译功能包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/ros2_ws/src</span><br><span class="line">colcon build</span><br><span class="line">source install/local_setup.bash</span><br></pre></td></tr></table></figure><h2 id="4-基础代码示例">4 基础代码示例</h2><h3 id="4-1-创建节点">4.1 创建节点</h3><p>编写节点的 python 程序 <code>scripts/node_helloworld.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3 </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rclpy                                     <span class="comment"># ROS2 Python接口库</span></span><br><span class="line"><span class="keyword">from</span> rclpy.node <span class="keyword">import</span> Node                      <span class="comment"># ROS2 节点类</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建一个HelloWorld节点, 初始化时输出“hello world”日志</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorldNode</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)                     <span class="comment"># ROS2节点父类初始化</span></span><br><span class="line">        <span class="keyword">while</span> rclpy.ok():                          <span class="comment"># ROS2系统是否正常运行</span></span><br><span class="line">            self.get_logger().info(<span class="string">&quot;Hello World&quot;</span>)  <span class="comment"># ROS2日志输出</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)                        <span class="comment"># 休眠控制循环时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args=<span class="literal">None</span></span>):                               <span class="comment"># ROS2节点主入口main函数</span></span><br><span class="line">    rclpy.init(args=args)                          <span class="comment"># ROS2 Python接口初始化</span></span><br><span class="line">    node = HelloWorldNode(<span class="string">&quot;node_helloworld_class&quot;</span>) <span class="comment"># 创建ROS2节点对象并进行初始化</span></span><br><span class="line">    rclpy.spin(node)                               <span class="comment"># 循环等待ROS2退出</span></span><br><span class="line">    node.destroy_node()                            <span class="comment"># 销毁节点对象</span></span><br><span class="line">    rclpy.shutdown()                               <span class="comment"># 关闭ROS2 Python接口</span></span><br></pre></td></tr></table></figure><p>修改功能包的 <code>setup.py</code> 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry_points=&#123;</span><br><span class="line">    <span class="string">&#x27;console_scripts&#x27;</span>: [</span><br><span class="line">     <span class="string">&#x27;node_helloworld       = scripts.node_helloworld:main&#x27;</span>,</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><h3 id="4-2-话题">4.2 话题</h3><p><strong>(1) 发布者</strong></p><p>编写发布者的 python 程序：<code>scripts/publisher_node.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3 </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rclpy                                     <span class="comment"># ROS2 Python接口库</span></span><br><span class="line"><span class="keyword">from</span> rclpy.node <span class="keyword">import</span> Node                      <span class="comment"># ROS2 节点类</span></span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String                  <span class="comment"># 字符串消息类型</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建一个发布者节点</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PublisherNode</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)                                    <span class="comment"># ROS2节点父类初始化</span></span><br><span class="line">        self.pub = self.create_publisher(String, <span class="string">&quot;chatter&quot;</span>, <span class="number">10</span>)   <span class="comment"># 创建发布者对象（消息类型、话题名、队列长度）</span></span><br><span class="line">        self.timer = self.create_timer(<span class="number">0.5</span>, self.timer_callback)  <span class="comment"># 创建一个定时器（单位为秒的周期，定时执行的回调函数）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timer_callback</span>(<span class="params">self</span>):                                     <span class="comment"># 创建定时器周期执行的回调函数</span></span><br><span class="line">        msg = String()                                            <span class="comment"># 创建一个String类型的消息对象</span></span><br><span class="line">        msg.data = <span class="string">&#x27;Hello World&#x27;</span>                                  <span class="comment"># 填充消息对象中的消息数据</span></span><br><span class="line">        self.pub.publish(msg)                                     <span class="comment"># 发布话题消息</span></span><br><span class="line">        self.get_logger().info(<span class="string">&#x27;Publishing: &quot;%s&quot;&#x27;</span> % msg.data)     <span class="comment"># 输出日志信息，提示已经完成话题发布</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args=<span class="literal">None</span></span>):                                 <span class="comment"># ROS2节点主入口main函数</span></span><br><span class="line">    rclpy.init(args=args)                            <span class="comment"># ROS2 Python接口初始化</span></span><br><span class="line">    node = PublisherNode(<span class="string">&quot;topic_helloworld_pub&quot;</span>)     <span class="comment"># 创建ROS2节点对象并进行初始化</span></span><br><span class="line">    rclpy.spin(node)                                 <span class="comment"># 循环等待ROS2退出</span></span><br><span class="line">    node.destroy_node()                              <span class="comment"># 销毁节点对象</span></span><br><span class="line">    rclpy.shutdown()                                 <span class="comment"># 关闭ROS2 Python接口</span></span><br></pre></td></tr></table></figure><p><strong>(2) 订阅者</strong></p><p>编写发布者的 python 程序：<code>scripts/subscriber_node.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rclpy                      <span class="comment"># ROS2 Python接口库</span></span><br><span class="line"><span class="keyword">from</span> rclpy.node   <span class="keyword">import</span> Node     <span class="comment"># ROS2 节点类</span></span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String   <span class="comment"># ROS2标准定义的String消息</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建一个订阅者节点</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubscriberNode</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)                             <span class="comment"># ROS2节点父类初始化</span></span><br><span class="line">        self.sub = self.create_subscription(\</span><br><span class="line">            String, <span class="string">&quot;chatter&quot;</span>, self.listener_callback, <span class="number">10</span>) <span class="comment"># 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">listener_callback</span>(<span class="params">self, msg</span>):                      <span class="comment"># 创建回调函数，执行收到话题消息后对数据的处理</span></span><br><span class="line">        self.get_logger().info(<span class="string">&#x27;I heard: &quot;%s&quot;&#x27;</span> % msg.data) <span class="comment"># 输出日志信息，提示订阅收到的话题消息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args=<span class="literal">None</span></span>):                               <span class="comment"># ROS2节点主入口main函数</span></span><br><span class="line">    rclpy.init(args=args)                          <span class="comment"># ROS2 Python接口初始化</span></span><br><span class="line">    node = SubscriberNode(<span class="string">&quot;topic_helloworld_sub&quot;</span>)  <span class="comment"># 创建ROS2节点对象并进行初始化</span></span><br><span class="line">    rclpy.spin(node)                               <span class="comment"># 循环等待ROS2退出</span></span><br><span class="line">    node.destroy_node()                            <span class="comment"># 销毁节点对象</span></span><br><span class="line">    rclpy.shutdown()                               <span class="comment"># 关闭ROS2 Python接口</span></span><br></pre></td></tr></table></figure><p><strong>(3) 修改 <a href="http://setup.py">setup.py</a></strong></p><p>打开功能包的setup.py文件，加入如下入口点的配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry_points=&#123;</span><br><span class="line">    <span class="string">&#x27;console_scripts&#x27;</span>: [</span><br><span class="line">     <span class="string">&#x27;publisher_node  = scripts.publisher_node:main&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;subscriber_node  = scripts.subscriber_node:main&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="4-3-服务">4.3 服务</h3><p><strong>(1) 客户端</strong></p><p>客户端发送数据代码如下：<code>scripts/client.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rclpy                                  <span class="comment"># ROS2 Python接口库</span></span><br><span class="line"><span class="keyword">from</span> rclpy.node   <span class="keyword">import</span> Node                 <span class="comment"># ROS2 节点类</span></span><br><span class="line"><span class="keyword">from</span> learning_interface.srv <span class="keyword">import</span> AddTwoInts <span class="comment"># 自定义的服务接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">adderClient</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)                                       <span class="comment"># ROS2节点父类初始化</span></span><br><span class="line">        self.client = self.create_client(AddTwoInts, <span class="string">&#x27;add_two_ints&#x27;</span>) <span class="comment"># 创建服务客户端对象（服务接口类型，服务名）</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.client.wait_for_service(timeout_sec=<span class="number">1.0</span>):     <span class="comment"># 循环等待服务器端成功启动</span></span><br><span class="line">            self.get_logger().info(<span class="string">&#x27;service not available, waiting again...&#x27;</span>) </span><br><span class="line">        self.request = AddTwoInts.Request()                          <span class="comment"># 创建服务请求的数据对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_request</span>(<span class="params">self</span>):                                          <span class="comment"># 创建一个发送服务请求的函数</span></span><br><span class="line">        self.request.a = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">        self.request.b = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line">        self.future = self.client.call_async(self.request)           <span class="comment"># 异步方式发送服务请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args=<span class="literal">None</span></span>):</span><br><span class="line">    rclpy.init(args=args)                        <span class="comment"># ROS2 Python接口初始化</span></span><br><span class="line">    node = adderClient(<span class="string">&quot;service_adder_client&quot;</span>)   <span class="comment"># 创建ROS2节点对象并进行初始化</span></span><br><span class="line">    node.send_request()                          <span class="comment"># 发送服务请求</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> rclpy.ok():                            <span class="comment"># ROS2系统正常运行</span></span><br><span class="line">        rclpy.spin_once(node)                    <span class="comment"># 循环执行一次节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.future.done():                   <span class="comment"># 数据是否处理完成</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                response = node.future.result()  <span class="comment"># 接收服务器端的反馈数据</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                node.get_logger().info(</span><br><span class="line">                    <span class="string">&#x27;Service call failed %r&#x27;</span> % (e,))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node.get_logger().info(          <span class="comment"># 将收到的反馈信息打印输出</span></span><br><span class="line">                    <span class="string">&#x27;Result of add_two_ints: for %d + %d = %d&#x27;</span> % </span><br><span class="line">                    (node.request.a, node.request.b, response.<span class="built_in">sum</span>))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    node.destroy_node()                          <span class="comment"># 销毁节点对象</span></span><br><span class="line">    rclpy.shutdown()                             <span class="comment"># 关闭ROS2 Python接口</span></span><br></pre></td></tr></table></figure><p><strong>(2) 服务端</strong></p><p>服务端请求数据代码如下：<code>scripts/server.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rclpy                                     <span class="comment"># ROS2 Python接口库</span></span><br><span class="line"><span class="keyword">from</span> rclpy.node   <span class="keyword">import</span> Node                    <span class="comment"># ROS2 节点类</span></span><br><span class="line"><span class="keyword">from</span> learning_interface.srv <span class="keyword">import</span> AddTwoInts    <span class="comment"># 自定义的服务接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">adderServer</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name)                                                           <span class="comment"># ROS2节点父类初始化</span></span><br><span class="line">        self.srv = self.create_service(AddTwoInts, <span class="string">&#x27;add_two_ints&#x27;</span>, self.adder_callback)  <span class="comment"># 创建服务器对象（接口类型、服务名、服务器回调函数）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adder_callback</span>(<span class="params">self, request, response</span>):   <span class="comment"># 创建回调函数，执行收到请求后对数据的处理</span></span><br><span class="line">        response.<span class="built_in">sum</span> = request.a + request.b       <span class="comment"># 完成加法求和计算，将结果放到反馈的数据中</span></span><br><span class="line">        self.get_logger().info(<span class="string">&#x27;Incoming request\na: %d b: %d&#x27;</span> % (request.a, request.b))   <span class="comment"># 输出日志信息，提示已经完成加法求和计算</span></span><br><span class="line">        <span class="keyword">return</span> response                          <span class="comment"># 反馈应答信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args=<span class="literal">None</span></span>):                             <span class="comment"># ROS2节点主入口main函数</span></span><br><span class="line">    rclpy.init(args=args)                        <span class="comment"># ROS2 Python接口初始化</span></span><br><span class="line">    node = adderServer(<span class="string">&quot;service_adder_server&quot;</span>)   <span class="comment"># 创建ROS2节点对象并进行初始化</span></span><br><span class="line">    rclpy.spin(node)                             <span class="comment"># 循环等待ROS2退出</span></span><br><span class="line">    node.destroy_node()                          <span class="comment"># 销毁节点对象</span></span><br><span class="line">    rclpy.shutdown()                             <span class="comment"># 关闭ROS2 Python接口</span></span><br></pre></td></tr></table></figure><p><strong>(3) 编辑 <a href="http://setup.py">setup.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry_points=&#123;</span><br><span class="line">    <span class="string">&#x27;console_scripts&#x27;</span>: [</span><br><span class="line">     <span class="string">&#x27;client  = scripts.client:main&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;server  = scripts.server:main&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="5-URDF-相关">5 URDF 相关</h2><p><strong>（1）创建功能包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/ros2_ws/src</span><br><span class="line">cd ~/ros2_ws/src</span><br><span class="line">ros2 pkg create urdf_view --build-type ament_python --dependencies rclpy --license Apache-2.0</span><br><span class="line">cd urdf_view</span><br></pre></td></tr></table></figure><p><strong>（2）创建 URDF 文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir urdf</span><br></pre></td></tr></table></figure><p>下载 <a href="https://docs.ros.org/en/foxy/_downloads/872802005223ffdb75b1ab7b25ad445b/r2d2.urdf.xml">URDF 文件</a>并保存在 <code>~/ros2_ws/src/urdf_view/urdf/r2d2.urdf.xml</code></p><p><strong>（3）发布状态</strong></p><p>在 <code>~/ros2_ws/src/urdf_view/urdf_view/</code> 目录下创建一个文件 <code>state_publisher.py</code>，并粘贴以下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sin, cos, pi</span><br><span class="line"><span class="keyword">import</span> rclpy</span><br><span class="line"><span class="keyword">from</span> rclpy.node <span class="keyword">import</span> Node</span><br><span class="line"><span class="keyword">from</span> rclpy.qos <span class="keyword">import</span> QoSProfile</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> Quaternion</span><br><span class="line"><span class="keyword">from</span> sensor_msgs.msg <span class="keyword">import</span> JointState</span><br><span class="line"><span class="keyword">from</span> tf2_ros <span class="keyword">import</span> TransformBroadcaster, TransformStamped</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StatePublisher</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        rclpy.init()</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&#x27;state_publisher&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        qos_profile = QoSProfile(depth=<span class="number">10</span>)</span><br><span class="line">        self.joint_pub = self.create_publisher(JointState, <span class="string">&#x27;joint_states&#x27;</span>, qos_profile)</span><br><span class="line">        self.broadcaster = TransformBroadcaster(self, qos=qos_profile)</span><br><span class="line">        self.nodeName = self.get_name()</span><br><span class="line">        self.get_logger().info(<span class="string">&quot;&#123;0&#125; started&quot;</span>.<span class="built_in">format</span>(self.nodeName))</span><br><span class="line"></span><br><span class="line">        degree = pi / <span class="number">180.0</span></span><br><span class="line">        loop_rate = self.create_rate(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># robot state</span></span><br><span class="line">        tilt = <span class="number">0.</span></span><br><span class="line">        tinc = degree</span><br><span class="line">        swivel = <span class="number">0.</span></span><br><span class="line">        angle = <span class="number">0.</span></span><br><span class="line">        height = <span class="number">0.</span></span><br><span class="line">        hinc = <span class="number">0.005</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># message declarations</span></span><br><span class="line">        odom_trans = TransformStamped()</span><br><span class="line">        odom_trans.header.frame_id = <span class="string">&#x27;odom&#x27;</span></span><br><span class="line">        odom_trans.child_frame_id = <span class="string">&#x27;axis&#x27;</span></span><br><span class="line">        joint_state = JointState()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> rclpy.ok():</span><br><span class="line">                rclpy.spin_once(self)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># update joint_state</span></span><br><span class="line">                now = self.get_clock().now()</span><br><span class="line">                joint_state.header.stamp = now.to_msg()</span><br><span class="line">                joint_state.name = [<span class="string">&#x27;swivel&#x27;</span>, <span class="string">&#x27;tilt&#x27;</span>, <span class="string">&#x27;periscope&#x27;</span>]</span><br><span class="line">                joint_state.position = [swivel, tilt, height]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># update transform</span></span><br><span class="line">                <span class="comment"># (moving in a circle with radius=2)</span></span><br><span class="line">                odom_trans.header.stamp = now.to_msg()</span><br><span class="line">                odom_trans.transform.translation.x = cos(angle)*<span class="number">2</span></span><br><span class="line">                odom_trans.transform.translation.y = sin(angle)*<span class="number">2</span></span><br><span class="line">                odom_trans.transform.translation.z = <span class="number">0.7</span></span><br><span class="line">                odom_trans.transform.rotation = \</span><br><span class="line">                    euler_to_quaternion(<span class="number">0</span>, <span class="number">0</span>, angle + pi/<span class="number">2</span>) <span class="comment"># roll,pitch,yaw</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># send the joint state and transform</span></span><br><span class="line">                self.joint_pub.publish(joint_state)</span><br><span class="line">                self.broadcaster.sendTransform(odom_trans)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Create new robot state</span></span><br><span class="line">                tilt += tinc</span><br><span class="line">                <span class="keyword">if</span> tilt &lt; -<span class="number">0.5</span> <span class="keyword">or</span> tilt &gt; <span class="number">0.0</span>:</span><br><span class="line">                    tinc *= -<span class="number">1</span></span><br><span class="line">                height += hinc</span><br><span class="line">                <span class="keyword">if</span> height &gt; <span class="number">0.2</span> <span class="keyword">or</span> height &lt; <span class="number">0.0</span>:</span><br><span class="line">                    hinc *= -<span class="number">1</span></span><br><span class="line">                swivel += degree</span><br><span class="line">                angle += degree/<span class="number">4</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># This will adjust as needed per iteration</span></span><br><span class="line">                loop_rate.sleep()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">euler_to_quaternion</span>(<span class="params">roll, pitch, yaw</span>):</span><br><span class="line">    qx = sin(roll/<span class="number">2</span>) * cos(pitch/<span class="number">2</span>) * cos(yaw/<span class="number">2</span>) - cos(roll/<span class="number">2</span>) * sin(pitch/<span class="number">2</span>) * sin(yaw/<span class="number">2</span>)</span><br><span class="line">    qy = cos(roll/<span class="number">2</span>) * sin(pitch/<span class="number">2</span>) * cos(yaw/<span class="number">2</span>) + sin(roll/<span class="number">2</span>) * cos(pitch/<span class="number">2</span>) * sin(yaw/<span class="number">2</span>)</span><br><span class="line">    qz = cos(roll/<span class="number">2</span>) * cos(pitch/<span class="number">2</span>) * sin(yaw/<span class="number">2</span>) - sin(roll/<span class="number">2</span>) * sin(pitch/<span class="number">2</span>) * cos(yaw/<span class="number">2</span>)</span><br><span class="line">    qw = cos(roll/<span class="number">2</span>) * cos(pitch/<span class="number">2</span>) * cos(yaw/<span class="number">2</span>) + sin(roll/<span class="number">2</span>) * sin(pitch/<span class="number">2</span>) * sin(yaw/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> Quaternion(x=qx, y=qy, z=qz, w=qw)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    node = StatePublisher()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><strong>（4）创建 launch 文件</strong></p><p>创建一个 <code>~/ros2_ws/src/urdf_view/launch</code> 文件夹，并在其中创建一个 <code>demo.launch.py</code> 文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> ament_index_python.packages <span class="keyword">import</span> get_package_share_directory</span><br><span class="line"><span class="keyword">from</span> launch <span class="keyword">import</span> LaunchDescription</span><br><span class="line"><span class="keyword">from</span> launch.actions <span class="keyword">import</span> DeclareLaunchArgument</span><br><span class="line"><span class="keyword">from</span> launch.substitutions <span class="keyword">import</span> LaunchConfiguration</span><br><span class="line"><span class="keyword">from</span> launch_ros.actions <span class="keyword">import</span> Node</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_launch_description</span>():</span><br><span class="line"></span><br><span class="line">    use_sim_time = LaunchConfiguration(<span class="string">&#x27;use_sim_time&#x27;</span>, default=<span class="string">&#x27;false&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    urdf_file_name = <span class="string">&#x27;r2d2.urdf.xml&#x27;</span></span><br><span class="line">    urdf = os.path.join(</span><br><span class="line">        get_package_share_directory(<span class="string">&#x27;urdf_view&#x27;</span>),</span><br><span class="line">        urdf_file_name)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(urdf, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> infp:</span><br><span class="line">        robot_desc = infp.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> LaunchDescription([</span><br><span class="line">        DeclareLaunchArgument(</span><br><span class="line">            <span class="string">&#x27;use_sim_time&#x27;</span>,</span><br><span class="line">            default_value=<span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">            description=<span class="string">&#x27;Use simulation (Gazebo) clock if true&#x27;</span>),</span><br><span class="line">        Node(</span><br><span class="line">            package=<span class="string">&#x27;robot_state_publisher&#x27;</span>,</span><br><span class="line">            executable=<span class="string">&#x27;robot_state+_publisher&#x27;</span>,</span><br><span class="line">            name=<span class="string">&#x27;robot_state_publisher&#x27;</span>,</span><br><span class="line">            output=<span class="string">&#x27;screen&#x27;</span>,</span><br><span class="line">            parameters=[&#123;<span class="string">&#x27;use_sim_time&#x27;</span>: use_sim_time, <span class="string">&#x27;robot_description&#x27;</span>: robot_desc&#125;],</span><br><span class="line">            arguments=[urdf]),</span><br><span class="line">        Node(</span><br><span class="line">            package=<span class="string">&#x27;urdf_view&#x27;</span>,</span><br><span class="line">            executable=<span class="string">&#x27;state_publisher&#x27;</span>,</span><br><span class="line">            name=<span class="string">&#x27;state_publisher&#x27;</span>,</span><br><span class="line">            output=<span class="string">&#x27;screen&#x27;</span>),</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p><strong>（5）更新 <a href="http://setup.py">setup.py</a></strong></p><p>为了能够正常安装 python，必须告诉 colcon 编译工具如何安装我们刚才创建的 python 包，编辑 <code>~/ros2_ws/src/urdf_view/setup.py</code> 如下：</p><p>导入必要库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> find_packages</span><br></pre></td></tr></table></figure><p>在 <code>data_files</code> 中添加两行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data_files=[</span><br><span class="line">  ...</span><br><span class="line">  (os.path.join(<span class="string">&#x27;share&#x27;</span>, package_name, <span class="string">&#x27;launch&#x27;</span>), glob(os.path.join(<span class="string">&#x27;launch&#x27;</span>, <span class="string">&#x27;*launch.[pxy][yma]*&#x27;</span>))),</span><br><span class="line">  (os.path.join(<span class="string">&#x27;share&#x27;</span>, package_name), glob(<span class="string">&#x27;urdf/*&#x27;</span>)),</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>修改 <code>entry_points</code> 列表，保证可以从命令行运行 <code>state_publisher</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;console_scripts&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;state_publisher = urdf_view.state_publisher:main&#x27;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><p><strong>（6）安装包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/ros2_ws</span><br><span class="line">colcon build --symlink-install --packages-select urdf_view</span><br><span class="line">source install/setup.bash</span><br></pre></td></tr></table></figure><p><strong>（7）可视化结果</strong></p><p>启动package</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 launch urdf_view demo.launch.py</span><br></pre></td></tr></table></figure><p>打开一个新终端，运行 Rviz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rviz2</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">最近在新的电脑上安装了Ubuntu22.04与ROS2 Humble，与时俱进，学习一下新的ROS2命令并总结下来，以便随时查看。</summary>
    
    
    
    <category term="机器人" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="ROS" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/ROS/"/>
    
    
    <category term="ROS2" scheme="https://www.mahaofei.com/tags/ROS2/"/>
    
  </entry>
  
  <entry>
    <title>使用zsh创建更高效的shell环境</title>
    <link href="https://www.mahaofei.com/post/zsh.html"/>
    <id>https://www.mahaofei.com/post/zsh.html</id>
    <published>2024-11-30T08:03:14.000Z</published>
    <updated>2024-11-30T08:03:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于各个发行版的系统默认 shell 都是 bash，所以对 bash 的熟悉度是最高的。</p><p>例如 bash/python 脚本开头的 <code>!#/bin/bash</code>，经常用到的命令 <code>source ~/.bashrc</code> 等等。</p><p>zsh 是一个为交互式使用而设计的 兼容 bash 的 shell，尽管它也是一个强大的脚本语言。Bash、 ksh 和 tcsh 的许多有用特性都被合并到 zsh 中; 还添加了许多原始特性。</p><p>相较 bash 具有以下优点：</p><ul><li>Tab 补全功能强大。命令、命令参数、文件路径均可以补全。</li><li>插件丰富。快速输入以前使用过的命令、快速跳转文件夹、显示系统负载这些都可以通过插件实现。</li><li>主题丰富。</li><li>可定制性高。</li></ul><p>很重要的一点，zsh 完全兼容 bash，如果你的 bash 脚本开头是以 <code>!#/bin/bash</code> 的话，在 zsh 下还是完全兼容 bash 的。</p><h2 id="安装-zsh">安装 zsh</h2><p>查看系统可以使用的 shell：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p><strong>安装 zsh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure><p>重新检查系统可以使用的 shell，发现多出了 zsh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/shells</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/shells: valid login shells</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/bin/rbash</span><br><span class="line">/usr/bin/rbash</span><br><span class="line">/bin/dash</span><br><span class="line">/usr/bin/dash</span><br><span class="line">/usr/bin/tmux</span><br><span class="line">/bin/zsh</span><br><span class="line">/usr/bin/zsh</span><br></pre></td></tr></table></figure><p>查看当前的默认 shell：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/20241230165317967.png" alt="image.png"></p><p><strong>修改默认 shell</strong>：分别修改用户和 root 用户的终端。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chsh -s /bin/zsh</span><br><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>重启系统，打开终端，初次启动 zsh 会进入配置界面，输入 0 可以跳过</p><p><img src="https://img.mahaofei.com/img/20241230170306614.png" alt="image.png"></p><h2 id="安装-Oh-My-ZSH">安装 Oh My ZSH!</h2><p>zsh 由于配置过于复杂门槛较高，大神开发了 <a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https%3A%2F%2Fohmyz.sh%2F&amp;objectId=2412910&amp;objectType=1&amp;isNewArticle=undefined">oh my zsh</a> 极大降低了使用门槛。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/20241230170334218.png" alt="image.png"></p><h2 id="配置主题：powerlevel10k">配置主题：powerlevel10k</h2><blockquote><p>参考：<a href="https://github.com/romkatv/powerlevel10k">https://github.com/romkatv/powerlevel10k</a></p></blockquote><p><strong>(0) 安装字体</strong></p><p>下载以下文件：</p><ul><li><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf">MesloLGS NF Regular.ttf</a></li><li><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf">MesloLGS NF Bold.ttf</a></li><li><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf">MesloLGS NF Italic.ttf  MesloLGS NF 斜体.ttf</a></li><li><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf">MesloLGS NF Bold Italic.ttf</a></li></ul><p>打开【Terminal-&gt;Preferences】，选择配置文件，设置自定义字体为 <code>MesloLGS NF Regular</code>。</p><p><strong>(1) 安装主题</strong></p><p>下载代码库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k</span><br></pre></td></tr></table></figure><p><strong>(2) 设置主题</strong></p><p>打开 <code>~/.zshrc</code> ，找到 <code>ZSH_THEME</code> 所在的行，并将其值更改为 <code>&quot;powerlevel10k/powerlevel10k&quot;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</span><br></pre></td></tr></table></figure><p>最后，执行 <code>source ~/.zshrc</code> 配置生效，这时会提示对主题进行配置，按照提示进行即可。</p><h2 id="安装插件">安装插件</h2><p><strong>(0) oh-my-zsh 内置命令补全</strong></p><p>默认 oh-my-zsh 命令自动补全功能如下：</p><ul><li><strong>自动列出目录</strong>：输入 cd 按 tab 键，目录将自动列出，在按 tab 可以切换</li><li><strong>自动目录名简写补全</strong>：要访问 <code>/usr/local/bin</code> 这个长路径，只需要 <code>cd /u/l/b</code> 按 tab 键自动补全</li><li><strong>自动大小写更正</strong>：要访问 Desktop 文件夹，只需要 <code>cd de</code> 按 tab 键自动补全，或者查看 <code>README.md</code>，只需要 <code>cat rea</code> 自动更正补全</li><li><strong>自动命令补全</strong>：输入 <code>kubectl</code> 按 tab 键即可看到可用命令</li><li><strong>自动补全命令参数</strong>：输入 <code>kill</code> 按 tab 键会自动显示出进程的 process id</li></ul><p><strong>(1) <a href="https://github.com/zsh-users/zsh-completions">zsh-completions</a>: 额外命令补全</strong></p><p>额外的自动补全功能，补充 zsh 中尚不支持的命令补全</p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/zsh-users/zsh-completions $&#123;ZSH_CUSTOM:-$&#123;ZSH:-~/.oh-my-zsh&#125;/custom&#125;/plugins/zsh-completions</span><br></pre></td></tr></table></figure><p>添加以下内容到 <code>~/.zshrc</code> 中 <code>source &quot;$ZSH/oh-my-zsh.sh&quot;</code> 之前。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fpath+=$&#123;ZSH_CUSTOM:-$&#123;ZSH:-~/.oh-my-zsh&#125;/custom&#125;/plugins/zsh-completions/src</span><br></pre></td></tr></table></figure><p>开启新的 Shell 或执行 <code>source ~/.zshrc</code> 使配置生效。</p><p><strong>(2) <a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a>: 根据历史命令补全</strong></p><p>作用是根据历史输入命令的记录即时的提示（建议补全），然后按右 <code>→</code> 键即可补全。</p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/zsh-users/zsh-autosuggestions.git $&#123;ZSH_CUSTOM:-$&#123;ZSH:-~/.oh-my-zsh&#125;/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>编辑 <code>~/.zshrc</code>，找到 plugins=(git) 这一行，修改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=( git zsh-autosuggestions )</span><br></pre></td></tr></table></figure><p>开启新的 Shell 或执行 <code>source ~/.zshrc</code> 使配置生效。</p><p><strong>(3) <a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a>: 语法高亮</strong></p><p>作用：命令错误会显示红色，直到你输入正确才会变绿色，另外路径正确会显示下划线。</p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>编辑 <code>~/.zshrc</code>，以下部分添加插件的名字</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=( git zsh-autosuggestions zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure><p>开启新的 Shell 或执行 <code>source ~/.zshrc</code> 使配置生效。</p><p><strong>(4) z: 文件夹跳转</strong></p><p>z 是一个文件夹快捷跳转插件，对于曾经跳转过的目录，只需要输入最终目标文件夹名称，就可以快速跳转，避免再输入长串路径，提高切换文件夹的效率。</p><p>由于 oh-my-zsh 内置了 z 插件，所以只需要在 <code>.zshrc</code> 中，把 z 加入插件列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=( git zsh-autosuggestions zsh-syntax-highlighting z)</span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">任意位置下使用命令</span></span><br><span class="line">z grasp_ros_ws</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接跳转至以前曾进入过的文件夹~/Programs/Grasp/6D_Grasp/grasp_ros_ws</span></span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/20241230220348646.png" alt="image.png"></p><blockquote><p>参考：</p><ol><li><a href="https://github.com/ohmyzsh/ohmyzsh">ohmyzsh</a></li><li><a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a></li><li><a href="https://github.com/zsh-users/zsh-completions">zsh-completions</a></li><li><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a></li><li><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a></li><li><a href="https://cloud.tencent.com/developer/article/2412910">为为为什么. Linux ZSH 更便捷的 shell 环境</a></li><li><a href="https://sysin.org/blog/linux-zsh/">sysin. Linux Zsh 使用 oh-my-zsh 打造高效便捷的 shell 环境</a></li></ol></blockquote>]]></content>
    
    
    <summary type="html">Zsh 完全兼容 bash，支持各种智能命令补全功能，支持大量的界面主题和插件，效率和美观都极大的增强。</summary>
    
    
    
    <category term="实用工具" scheme="https://www.mahaofei.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Ubuntu工具" scheme="https://www.mahaofei.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/Ubuntu%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Ubuntu" scheme="https://www.mahaofei.com/tags/Ubuntu/"/>
    
    <category term="Shell" scheme="https://www.mahaofei.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Isaac Sim 仿真环境使用简介</title>
    <link href="https://www.mahaofei.com/post/isaacsim-intro.html"/>
    <id>https://www.mahaofei.com/post/isaacsim-intro.html</id>
    <published>2024-11-28T03:37:34.000Z</published>
    <updated>2024-11-28T03:37:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-介绍">0. 介绍</h2><blockquote><p>参考：</p><ol><li><a href="https://docs.isaacsim.omniverse.nvidia.com/latest/index.html">Isaac Sim Documents</a></li></ol></blockquote><p>Isaac Sim 是 NVIDIA 开发的，基于 NVIDIA Omniverse 平台构建的，一个物理精确的虚拟环境，用于开发、测试和管理基于 AI 的机器人，它为构建虚拟机器人实验提供了基本功能，包括导入机器人模型以及仿真 RGB-D、激光雷达、接触、超声波和 IMU 等传感器。</p><p>Isaac Sim 使用 USD 交换文件格式来表示场景。通用场景描述（USD）是一种易于扩展的开源三维场景描述和文件格式。当然也支持从 URDF、Mujoco XML 文件导入。</p><blockquote><p><code>*.usd/*.usdc</code>: 一般的USD文件，以二进制存储与压缩，因此读取速率会快一些 <code>*.usda</code>: 纯文本形式的USD文件，更方便阅读 <code>*.usdz</code>: 以zip压缩文件形式存储的USD文件，可以将多个USD文件打包成一个 <code>*.drc</code>: 其它自定义的文件格式</p></blockquote><p>Isaac 是一个“专为机器人和AI打造的加速平台”。</p><p>在硬件层面它支持各种类型的硬件，比如RTX的GPU等等。在系统软件层面，依赖于RTX、CUDA、PhysX等框架。在平台层面，依赖于NVIDIA AI和NVIDIA Omniverse，最终就可以实现各类应用，比如机器人数据采集、环境仿真等等。甚至还有专门针对ROS提供的一些硬件加速的函数包，叫Isaac ROS。</p><p><img src="https://img.mahaofei.com/img/202503292307819.png" alt="image.png"></p><h2 id="1-Isaac-Sim-的安装-WorkStation-版">1. Isaac Sim 的安装 - WorkStation 版</h2><p>WorkStation 版相当于安装了一个独立的应用程序，适合便捷打开 GUI 界面调试，适合通过 GUI 和扩展的方式进行程序开发。如果想通过这种方式运行代码，需要使用安装目录的 <code>isaac-sim.sh</code>，限制了 python 环境的可能性，例如运行 <code>test.py</code> 文件需要：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/isaacsim/isaac-sim.sh ~/path/test.py</span><br></pre></td></tr></table></figure><blockquote><p><strong>本文使用有显示器的服务器安装 Isaac Sim Workstation 演示，流程参考：</strong><a href="https://docs.isaacsim.omniverse.nvidia.com/latest/installation/install_workstation.html">https://docs.isaacsim.omniverse.nvidia.com/latest/installation/install_workstation.html</a><br>如果你使用无显示器的服务器，可以通过 Docker 安装，参考：<a href="https://docs.isaacsim.omniverse.nvidia.com/latest/installation/install_container.html">https://docs.isaacsim.omniverse.nvidia.com/latest/installation/install_container.html</a></p></blockquote><p>参考 <a href="https://docs.omniverse.nvidia.com/isaacsim/latest/installation/requirements.html">Isaac Sim Requirements</a> 查看系统是否满足要求。</p><ul><li>系统：Ubuntu 20.04/22.04、Windows 10/11</li><li>GPU：必须有 RT Cores，如 RTX 30 系、RTX 40 系</li><li>NVIDIA 驱动：535.129.03 以上（2024 年 10 月要求，参考官网更新内容）</li></ul><p><strong>（1）下载 IsaacSim</strong></p><p>打开 Isaac Sim Latest Release 网页：<a href="https://docs.isaacsim.omniverse.nvidia.com/latest/installation/download.html#isaac-sim-latest-release">https://docs.isaacsim.omniverse.nvidia.com/latest/installation/download.html#isaac-sim-latest-release</a></p><p>下载第一行最新版的 Isaac Sim 4.5.0 压缩包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/isaacsim</span><br><span class="line">cd ~/Downloads</span><br><span class="line">unzip &quot;isaac-sim-standalone@4.5.0-rc.36+release.19112.f59b3005.gl.linux-x86_64.release.zip&quot; -d ~/isaacsim</span><br><span class="line">cd ~/isaacsim</span><br><span class="line">./post_install.sh</span><br><span class="line">./isaac-sim.selector.sh</span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/20250228210607107.png" alt="image.png"></p><p>点击 Start 即可运行 Isaac Sim 主程序。</p><blockquote><p>第一次运行会 warm up shader cache 可能会比较慢比较卡。<br>后续可以运行 <code>~/isaacsim/isaac-sim.sh</code> 启动</p></blockquote><h2 id="1-Isaac-Sim-的安装-Python-版">1. Isaac Sim 的安装 -Python 版</h2><p>Python 版在创建的虚拟环境中直接安装 Isaac Sim，更容易和其他代码程序的依赖组合，个人认为更便于机器人开发。</p><p>本节参考：<a href="https://docs.isaacsim.omniverse.nvidia.com/latest/installation/install_python.html">Isaac Sim Documents - Python Environment Installation</a></p><p><strong>（1）创建虚拟环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n env_isaacsim python=3.10</span><br><span class="line">conda activate env_isaacsim</span><br></pre></td></tr></table></figure><p><strong>（2）安装 Isaac Sim 包</strong></p><p>首先更新 pip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>安装 Isaac Sim 完整版包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install isaacsim[all]==4.5.0 --extra-index-url https://pypi.nvidia.com</span><br></pre></td></tr></table></figure><p>安装 Isaac Sim 缓存扩展</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install isaacsim[extscache]==4.5.0 --extra-index-url https://pypi.nvidia.com</span><br></pre></td></tr></table></figure><p><strong>（3）示例</strong></p><p>创建 python 程序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> isaacsim</span><br><span class="line"><span class="keyword">from</span> isaacsim.simulation_app <span class="keyword">import</span> SimulationApp</span><br><span class="line"></span><br><span class="line">simulation_app = SimulationApp(&#123;<span class="string">&quot;headless&quot;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line"><span class="comment">## perform any Isaac Sim / Omniverse imports after instantiating the class</span></span><br></pre></td></tr></table></figure><p>运行后效果为打开 Isaac Sim 窗口。</p><blockquote><p>第一次运行会 warm up shader cache 可能会比较慢比较卡。</p></blockquote><h2 id="2-Isaac-Sim-GUI-基本使用">2. Isaac Sim GUI 基本使用</h2><blockquote><p>本节参考：<a href="https://docs.omniverse.nvidia.com/isaacsim/latest/introductory_tutorials/index.html">Isaac Sim UI and Workflow Tutorials</a></p></blockquote><h3 id="2-1-UI-界面">2.1 UI 界面</h3><p><strong>（1）添加并操作一个立方体</strong></p><p>点击 <code>Create-&gt;Shape-&gt;Cube</code> 添加一个立方体：</p><ul><li>选中立方体，拖动坐标轴移动立方体</li><li>按 <code>E</code> 切换到旋转控制，调整立方体姿态，再按 <code>E</code> 切换到局部坐标系旋转控制</li><li>按 <code>R</code> 切换到比例控制，调整立方体形状</li><li>按 <code>W</code> 切换回位置控制，调整立方体位置，再按 <code>W</code> 切换到局部坐标系位置控制</li><li></li><li>按 <code>Esc</code> 取消选中立方体</li></ul><p>所有的操作都会在右下角的属性面板显示属性变化，也可以直接在右下角输入数值设置立方体参数。</p><p><img src="https://img.mahaofei.com/img/20241029202642.png" alt="image.png"></p><p><strong>（2）视角控制</strong></p><ul><li><code>F</code>：相机居中并缩放到合适位置</li><li><code>Alt+鼠标左键拖动</code>：绕当前视角的中心旋转</li><li><code>滚轮</code> 或 <code>Alt+鼠标右键拖动</code>：缩放</li><li><code>鼠标中间拖动</code>：平移视角</li><li><code>鼠标右键拖动</code>：旋转视角</li></ul><p><strong>（3）Stage</strong></p><p>在窗口右侧有一个 Stage 面板。</p><p>此时如果点击 <code>Create-&gt;Xform</code> 可以创建一个空坐标系。</p><p>可以将方块移动到坐标系内，此时移动坐标系，方块也会跟着移动，因为此时方块是 Xform 的子级，两者之间的变换关系不会因为移动 Xform 而变化。</p><p><strong>（4）Property</strong></p><p>窗口右下角是属性面板（Property），不同的单元（Xform, Shape, Light）都有着不同的属性数据格式，这是因为它们在 Issac Sim 中都是不同的数据类型。</p><h3 id="2-2-环境设置">2.2 环境设置</h3><p><strong>（1）重力</strong></p><p>点击 <code>Create-&gt;Physics-&gt;Physics Scene</code> 添加 <code>Physics Scene</code> 到右侧的 Stage Tree 中。可以通过它的属性设置重力方向为 <code>-Z</code> 方向，大小为 <code>9.8</code>（默认为国际标准单位）</p><p><strong>（2）地面</strong></p><p>点击 <code>Create-&gt;Physics-&gt;Ground Plane</code> 添加地面。</p><p><strong>（3）照明</strong></p><p>每个创建的 Stage 都会有默认的光源。可以通过点击 <code>Create-&gt;Light-&gt;Sphere Light</code> 添加一个额外的光源。</p><ul><li>在属性面板中，将其 Z 轴设为 7，回复 X,Y 的默认旋转为 0</li><li>在 <code>Main</code> 中点击右侧的白色方块调整颜色</li><li>在 <code>Main</code> 中点击 <code>Intensity</code> 修改光照强度为 1e6</li><li>在 <code>Shaping</code> 中点击 <code>cone:angle</code> 将光照范围限制为 45 度，点击 <code>cone:angle</code> 设置边缘柔滑为 0.05。</li><li>为了使新的聚光灯更容易看到，打开默认光源的属性，设置其强度 <code>Main-&gt;Intensity</code> 为 300。</li></ul><p>效果如下：</p><p><img src="https://img.mahaofei.com/img/20241030202954.png" alt="image.png"></p><h3 id="2-3-添加物体">2.3 添加物体</h3><p><strong>（1）向场景中添加形状</strong></p><ul><li>点击 <code>Create-&gt;Shapes-&gt;Cube</code> 创建立方体</li><li>选中立方体并将其提到地面以上</li><li>点击左侧的 <code>Scale</code> 按钮，或按 <code>R</code> 键，激活缩放小部件，调整立方体形状</li><li>在右下角属性中的 <code>Transform-&gt;translate</code> 中设置物体的位置</li></ul><p>同样，我们可以将其中加入其它形状。</p><p><strong>（2）添加物理属性</strong></p><ul><li>选中所有的物体，在属性选项卡中，点击 <code>+ Add</code>，选择 <code>Physics-&gt;Rigid Body with Colliders Preset</code>，设置三个形状的物理属性都是带有碰撞的刚体</li><li>点击 <code>Play</code> 三个物体都会掉落到地面上</li><li>查看右下角属性，往下滚能看到 <code>Rigid Body</code> 和 <code>Collider</code>，可以点击这两个 APIs 的右上角 <code>x</code> 删除属性</li></ul><p><img src="https://img.mahaofei.com/img/20241030205227.png" alt="image.png"></p><p><strong>（3）添加接触和摩擦</strong></p><ul><li>点击 <code>Create-&gt;Physics-&gt;Physics Material</code> ，选择 <code>Rigid Body Materials</code> 创建新的物理材质，可以在右侧的 Stage 栏中看到</li><li>选中该材质，在下方的属性选项卡中可以调整摩擦系数、密度等等。</li><li>选中任意物体，在属性选项卡中找到 <code>Physics materials on selected models</code>，设置零件的材质。</li></ul><p><strong>（4）添加外观</strong></p><p>刚才添加的是物理材质，但是实际上物体没有颜色反光属性（可以通过关闭光源查看），需要为物体创建外观</p><ul><li>点击 <code>Create-&gt;Materials-&gt;OmniPBR</code></li><li>选中任意物体，在属性选项卡中找到 <code>Materials on selected models</code>，设置零件的外观。</li><li>可以修改外观的属性中的 <code>Material and Shader-&gt;Shader-&gt;Albedo</code> 修改基础颜色，或修改反射率、粗糙度等查看变化</li></ul><p><img src="https://img.mahaofei.com/img/20241030210844.png" alt="image.png"></p><h3 id="2-4-保存和加载场景，引用机器人">2.4 保存和加载场景，引用机器人</h3><p>Isaac 使用 USD 格式作为所有的场景格式。</p><p><strong>（1）保存场景</strong></p><p>点击 <code>File-&gt;Save As...</code> 将当前场景保存为新 USD 文件。（如果点击 <code>Save Flattened As</code> 则是将所有组件保存到同一个 mesh 中）</p><p>可以选择 <code>.usd</code> 格式（二进制），<code>.usda</code>（人类可阅读格式）。</p><p><img src="https://img.mahaofei.com/img/20241101153457.png" alt="image.png"></p><p><strong>（2）加载场景</strong></p><ul><li>点击 <code>Files-&gt;Open</code> 打开 USD 文件直接编辑。</li><li>点击 <code>Files-&gt;Add Reference</code> 将 USD 文件作为引用添加，无法直接编辑。（直接将文件拖入到文件窗口也是以引用方式添加）</li></ul><p><strong>（3）引用文件添加的注意事项</strong></p><p>引用的文件最好将所有刚体排列成有意义的分层结构，以前面场景中的物体为例，将其视为两轮小车：</p><ol><li><code>File-&gt;Open</code> 打开刚才保存的 USD 文件</li><li>在 Stage 中右键创建一个 <code>Xform</code>，双击将其重命名为 <code>mock_robot</code>，并将其拖动到空白位置，使其和 <code>World</code> 以及 <code>Environment</code> 同级，右键设置为默认坐标系 <code>Set as Default Prim</code></li><li>重命名 <code>Cube</code> 为 <code>body</code>，两个 <code>Cylinder</code> 分别为 <code>wheel_left, wheel_right</code>，将刚刚创建的刚体（cube, Cylinder），以及 Physics Material 和 Looks 都拖到 <code>mock_robot</code> 坐标系下</li><li>保存文件</li></ol><p><img src="https://img.mahaofei.com/img/20241101160109.png" alt="image.png"></p><p>新建一个文件，点击 <code>File-&gt;Add Reference</code>，可以看到只有机器人被添加进来</p><p><img src="https://img.mahaofei.com/img/20241101160144.png" alt="image.png"></p><h3 id="2-5-关节配置">2.5 关节配置</h3><p>使用 <code>File-&gt;Open</code> 打开刚才的文件（最好和图中的一样，后面要添加关节）</p><p><strong>（1）添加关节</strong></p><ol><li>点击 <code>Create-&gt;Scope</code> 创建一个 <code>Scope</code> 来存储关节，重命名为 <code>joints</code>。</li><li>创建关节时：<strong>先点击父实体，再点击子实体</strong>，然后点击 <code>Create-&gt;Physics-&gt;Joint-&gt;Revolute Joint</code> 创建一个旋转关节。</li><li>检查关节的属性面板中，<code>body0</code> 是父实体(如 body)，<code>body1</code> 是子实体(如 wheel_right)。</li><li>在属性面板的 <code>Revolute Joint</code> 中将旋转轴更改为 <code>Y/Z</code>，根据模型的情况。</li><li>将创建的 joint 重命名为 <code>joint_wheel_right</code> 并拖动到 <code>joints</code> 的 scope 中</li><li>重复 2-5 步添加另一个关节</li></ol><p><img src="https://img.mahaofei.com/img/isaac_tutorial_rigging_robot_1.webp" alt=""></p><p>点击运行，可以观察到机器人落到了地面，按住 <code>shift</code> 拖动方块，可以发现两个圆柱旋转带动机器人在地面上滚动。</p><p><img src="https://img.mahaofei.com/img/20241101163333.png" alt="image.png"></p><p><strong>（2）添加关节驱动器</strong></p><p>为了能够更好地控制关节，必须添加关节驱动器（位置控制或速度控制）实现驱动。</p><p><strong>添加方法</strong>：选中关节，点击属性选项卡的 <code>+Add</code> 按钮，选择 <code>Physics-&gt;Angular Drive</code> 向关节添加驱动，可以在属性面板下滑找到 <code>Drive</code> 以设置属性。</p><ul><li>位置控制：设置高刚度和零阻尼</li><li>速度控制：设置高阻尼和零刚度</li></ul><p>对于该轮子来说，可以设置高阻尼如 <code>Damping=1e4</code>,目标速度可以设为 <code>Target Velocity=200</code>，点击播放可以看到机器人运动。</p><p><strong>（3）添加 Articulation 关节</strong></p><p>Articulation 是 Issac 中的另一种关节，与 joint 不同之处在于，它是由一系列 joint 组成的关节组。</p><p><strong>添加方法</strong>：选择机器人的基坐标系 <code>mock_robot</code>，在属性选项卡中点击 <code>+Add</code>，添加 <code>Physics-&gt;Articulation Root</code></p><p>这样就添加完成了。</p><p><strong>（4）添加控制器</strong></p><p>这部分主要是用来测试。</p><p>点击 <code>Issac Utils-&gt;Common Omnigraphs-&gt;Articulation Velocity Control</code> 添加一个速度控制图表。</p><p><code>Robot Prim</code> 选择机器人基坐标系 <code>mock_robot</code></p><p><img src="https://img.mahaofei.com/img/20241101165859.png" alt="image.png"></p><p>点击 Stage 中的 <code>Graphs-&gt;Velocity_Controller-&gt;JointCommandArray</code>，修改 Input0 和 Input1，例如设置成相反数让机器人差速原地转，点击播放看效果。</p><h3 id="2-5-添加相机和传感器">2.5 添加相机和传感器</h3><p><strong>（1）创建相机</strong></p><p>点击 <code>Create-&gt;Camera</code>，会在 Stage 栏中创建一个 camera，同时界面中会出现一个灰色框，代表相机视图。</p><p><img src="https://img.mahaofei.com/img/20241101182154.png" alt="image.png"></p><p>可以像正常的刚体一样调整相机的位置。</p><p><strong>（2）相机扩展</strong></p><p>相机扩展可以实现根据相机创建不同可视化视角，查看摄像头覆盖范围，获取和设计相机姿态。</p><p>可以点击 <code>Issac Utils-&gt;Workflows-&gt;Camera Inspector</code> 打开相机扩展</p><p><img src="https://img.mahaofei.com/img/20241101195616.png" alt="image.png"></p><p>可以看到面板中有 <code>Camera State</code> 一栏，显示了相机的位置姿态，便于编写代码时查看。</p><p><strong>（3）创建相机视角</strong></p><p>点击面板中的 <code>Create Viewport</code>，可以创建相机视角的窗口，如下图所示：</p><p><img src="https://img.mahaofei.com/img/20241101200510.png" alt="image.png"></p><p>在该窗口中，点击左上角的菜单中的 <code>Viewport</code> 选项可以调整相机分辨率。</p><p>如果在仿真环境中移动相机位置，相机的状态属性等都会自动更新。</p><p><strong>（4）将相机连接到机器人</strong></p><p>例如现在需要添加一个车载摄像头，将其固定在 body 上，使其能够跟随 body 运动：</p><ol><li>将新添加的摄像头重命名为 <code>car_camera</code></li><li>为了便于我们观察相机，可以点击 <code>Window-&gt;Viewport</code> 启动 <code>Viewport2</code> 视窗，并点击上方的电影机按钮将其切换为 <code>car_camera</code> 的视角（注意选中 mock_robot，在视窗内按 f 可以帮助切换到中心画面）</li><li>在右侧 stage 中将 <code>car_camera</code> 拖动到 <code>body</code> 下方，将相机与机器人连接在一起</li><li>调整相机属性中的位置和方向，使其看向机器人前方地面，点击 Play 观察相机是否跟随机器人运动</li></ol><p><img src="https://img.mahaofei.com/img/20241101202027.png" alt="image.png"></p><h2 id="3-Python-程序">3. Python 程序</h2><h3 id="3-1-独立-Python-程序的基本框架">3.1 独立 Python 程序的基本框架</h3><p>Isaac Sim 仿真程序大概可以分成 <code>Initialization</code> 和 <code>Simulation</code> 两步骤，即首先初始化环境，创建世界和添加各种物体，然后是仿真的 <code>Step</code> 执行，示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##################################################</span></span><br><span class="line"><span class="comment"># Initialization</span></span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> isaacsim <span class="keyword">import</span> SimulationApp  <span class="comment"># 第一行一定是导入SimulationApp，就像 Omniverse 打开 Isaac Sim 一样</span></span><br><span class="line">simulation_app = SimulationApp(&#123;<span class="string">&quot;headless&quot;</span>: <span class="literal">False</span>&#125;)  <span class="comment"># 创建一个 SimulationApp 对象，参数是一个字典，headless: False 表示显示图形界面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> omni.isaac.core <span class="keyword">import</span> World</span><br><span class="line"><span class="keyword">from</span> omni.isaac.core.objects <span class="keyword">import</span> DynamicCuboid</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建世界，下面相当于 setup_scene</span></span><br><span class="line">world = World()  <span class="comment"># 实例化一个 World 对象</span></span><br><span class="line">world.scene.add_default_ground_plane()  <span class="comment"># 添加一个默认的地面</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建物体</span></span><br><span class="line">first_cube = world.scene.add(</span><br><span class="line">    DynamicCuboid(</span><br><span class="line">        prim_path = <span class="string">&quot;/World/first_cube&quot;</span>,    <span class="comment"># 该物体的路径</span></span><br><span class="line">        name = <span class="string">&quot;first_cube&quot;</span>,                <span class="comment"># 该物体的名字</span></span><br><span class="line">        position = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>]),   <span class="comment"># 该物体的位置</span></span><br><span class="line">        scale = np.array([<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]),  <span class="comment"># 该物体的缩放</span></span><br><span class="line">        color = np.array([<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>])   <span class="comment"># 该物体的颜色</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置世界</span></span><br><span class="line">world.reset()  <span class="comment"># 重置世界，创建完成之后，一定不要忘了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line"><span class="comment"># Simulation</span></span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始仿真</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):<span class="comment"># 或者while True:</span></span><br><span class="line">    position, orientation = first_cube.get_world_pose()  <span class="comment"># 获取物体的位置和姿态</span></span><br><span class="line">    linear_velocity = first_cube.get_linear_velocity()  <span class="comment"># 获取物体的线速度</span></span><br><span class="line">    angular_velocity = first_cube.get_angular_velocity()  <span class="comment"># 获取物体的角速度</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Cube position: &quot;</span>, position)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Cube orientation: &quot;</span>, orientation)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Cube linear velocity: &quot;</span>, linear_velocity)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Cube angular velocity: &quot;</span>, angular_velocity)</span><br><span class="line"></span><br><span class="line">    world.step(render=<span class="literal">True</span>)  <span class="comment"># 仿真一步，render=True 表示显示图形界面</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭仿真</span></span><br><span class="line">simulation_app.close()  <span class="comment"># 关闭仿真</span></span><br></pre></td></tr></table></figure><h3 id="3-2-独立-Python-程序控制移动机器人">3.2 独立 Python 程序控制移动机器人</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> isaacsim <span class="keyword">import</span> SimulationApp</span><br><span class="line"></span><br><span class="line">simulation_app = SimulationApp(&#123;<span class="string">&quot;headless&quot;</span>: <span class="literal">False</span>&#125;)  <span class="comment"># start the simulation app, with GUI open</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> carb</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> isaacsim.core.api <span class="keyword">import</span> World</span><br><span class="line"><span class="keyword">from</span> isaacsim.core.prims <span class="keyword">import</span> Articulation</span><br><span class="line"><span class="keyword">from</span> isaacsim.core.utils.stage <span class="keyword">import</span> add_reference_to_stage, get_stage_units</span><br><span class="line"><span class="keyword">from</span> isaacsim.core.utils.viewports <span class="keyword">import</span> set_camera_view</span><br><span class="line"><span class="keyword">from</span> isaacsim.storage.native <span class="keyword">import</span> get_assets_root_path</span><br><span class="line"></span><br><span class="line"><span class="comment"># preparing the scene</span></span><br><span class="line">assets_root_path = get_assets_root_path()</span><br><span class="line"><span class="keyword">if</span> assets_root_path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    carb.log_error(<span class="string">&quot;Could not find Isaac Sim assets folder&quot;</span>)</span><br><span class="line">    simulation_app.close()</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">my_world = World(stage_units_in_meters=<span class="number">1.0</span>)</span><br><span class="line">my_world.scene.add_default_ground_plane()  <span class="comment"># add ground plane</span></span><br><span class="line">set_camera_view(</span><br><span class="line">    eye=[<span class="number">5.0</span>, <span class="number">0.0</span>, <span class="number">1.5</span>], target=[<span class="number">0.00</span>, <span class="number">0.00</span>, <span class="number">1.00</span>], camera_prim_path=<span class="string">&quot;/OmniverseKit_Persp&quot;</span></span><br><span class="line">)  <span class="comment"># set camera view</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add Franka</span></span><br><span class="line"><span class="comment"># asset_path = assets_root_path + &quot;/Isaac/Robots/Franka/franka.usd&quot;</span></span><br><span class="line">asset_path = <span class="string">&#x27;/home/mahaofei/Programs/01_MR+VLM+RL/Simulation/asset/isaac_sim/ur5e_hand/ur5e_hand.usd&#x27;</span></span><br><span class="line">add_reference_to_stage(usd_path=asset_path, prim_path=<span class="string">&quot;/World/Arm&quot;</span>)  <span class="comment"># add robot to stage</span></span><br><span class="line">arm = Articulation(prim_paths_expr=<span class="string">&quot;/World/Arm&quot;</span>, name=<span class="string">&quot;my_arm&quot;</span>)  <span class="comment"># create an articulation object</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set the initial poses of the arm so they don&#x27;t collide BEFORE the simulation starts</span></span><br><span class="line">arm.set_world_poses(positions=np.array([[<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>]]) / get_stage_units())</span><br><span class="line"><span class="comment"># initialize the world</span></span><br><span class="line">my_world.reset()</span><br><span class="line"></span><br><span class="line">init_joint_positions = np.array([<span class="number">0.0</span>, -np.pi/<span class="number">2</span>, np.pi/<span class="number">2</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>])</span><br><span class="line">arm.set_joint_positions([init_joint_positions])</span><br><span class="line">arm_joint_positions = init_joint_positions</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 机器人的关节位置每次变动一点，连续变动</span></span><br><span class="line">    arm_joint_positions[:<span class="number">6</span>] += <span class="number">0.001</span></span><br><span class="line">    arm.set_joint_positions([arm_joint_positions])</span><br><span class="line">    <span class="keyword">if</span> arm_joint_positions[<span class="number">0</span>] &gt;= np.pi/<span class="number">2</span>:</span><br><span class="line">        arm_joint_positions = init_joint_positions</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step the simulation, both rendering and physics</span></span><br><span class="line">    my_world.step(render=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">simulation_app.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/20250228224852322.png" alt="image.png"></p><h3 id="3-x-常用-Python-程序及解释">3.x 常用 Python 程序及解释</h3><p><strong>（1）常规代码逻辑</strong></p><p><code>simulation_app</code> 的创建必须在所有 isaac sim 引用之前完成，启动 isaacsim 的仿真窗口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 Simulation APP</span></span><br><span class="line"><span class="keyword">from</span> isaacsim <span class="keyword">import</span> SimulationApp  <span class="comment"># 第一行一定是导入SimulationApp</span></span><br><span class="line"></span><br><span class="line">simulation_app = SimulationApp(&#123;<span class="string">&quot;headless&quot;</span>: <span class="literal">False</span>&#125;)  <span class="comment"># 创建一个 SimulationApp 对象，参数是一个字典，headless: False 表示显示图形界面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> carb</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> isaacsim.core.api <span class="keyword">import</span> World</span><br><span class="line"><span class="keyword">from</span> isaacsim.storage.native <span class="keyword">import</span> get_assets_root_path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备场景，获取NVIDIA官方asset路径</span></span><br><span class="line">assets_root_path = get_assets_root_path()</span><br><span class="line"><span class="keyword">if</span> assets_root_path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    carb.log_error(<span class="string">&quot;Could not find Isaac Sim assets folder&quot;</span>)</span><br><span class="line">    simulation_app.close()</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建世界，添加地面，添加相机视角</span></span><br><span class="line">my_world = World(stage_units_in_meters=<span class="number">1.0</span>)</span><br><span class="line">my_world.scene.add_default_ground_plane()  <span class="comment"># add ground plane</span></span><br><span class="line">set_camera_view(</span><br><span class="line">    eye=[<span class="number">5.0</span>, <span class="number">0.0</span>, <span class="number">1.5</span>], target=[<span class="number">0.00</span>, <span class="number">0.00</span>, <span class="number">1.00</span>], camera_prim_path=<span class="string">&quot;/OmniverseKit_Persp&quot;</span></span><br><span class="line">)  <span class="comment"># set camera view</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化world</span></span><br><span class="line">arm.set_world_poses(positions=np.array([[<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>]]) / get_stage_units())</span><br><span class="line">my_world.reset()</span><br><span class="line"></span><br><span class="line"><span class="comment"># some code</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="comment"># some code</span></span><br><span class="line"></span><br><span class="line">my_world.step(render=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">simulation_app.close() <span class="comment"># 关闭仿真</span></span><br></pre></td></tr></table></figure><h2 id="4-Isaac-Sim-导入URDF模型">4. Isaac Sim 导入URDF模型</h2><p><strong>（1）打开 urdf 导入扩展</strong></p><p>点击【Windows -&gt; Entensions】，搜索【import wizard】，结果如下，打开此扩展，并且如果需要经常导入模型的话，可以勾选上Autoload，这样每次启动 IsaacSim 都可以自动启动该扩展。</p><p><img src="https://img.mahaofei.com/img/20250320142552590.png" alt="image.png"></p><p>然后点击【Windows】，此时可以发现已经多出了【Isaac Sim Wizard [alpha]】这个选项，这就是我们需要用到的功能，打开它。</p><p><img src="https://img.mahaofei.com/img/20250320142711132.png" alt="image.png"></p><p><strong>（2）导入 URDF 模型</strong></p><p>第一个页面，在下方勾选 【Import URDF from File】，当然这里也可以从其它模型文件导入，例如Mujoco使用的MJCF文件等。然后点击【Next】</p><p><img src="https://img.mahaofei.com/img/20250320142911978.png" alt="image.png"></p><p>下一个页面，没有需要操作的，直接Next即可。</p><p>然后会出来一个 URDF Importer 的窗口，在这里，我们需要填写或勾选下面图中标出的地方，其中包括</p><ul><li>URDF 文件位置</li><li>文件创建在Stage中，设置为Default Prim，并且导入时清空当前Stage</li><li>关节驱动类型选择为加速度驱动</li></ul><p><img src="https://img.mahaofei.com/img/20250320143313491.png" alt="image.png"></p><p><strong>（3）保存USD文件</strong></p><p>然后模型就已经被导入了，不过可能因为没有灯光，看不太出来模型，不过这个正常。</p><p>直接按 【Ctrl+S】，将模型保存到本地。</p><p>如果想查看模型，可以新建一个Stage，将USD模型拖入进来，就可以看到有颜色的模型。</p>]]></content>
    
    
    <summary type="html">NVIDIA Isaac Sim仿真环境的简介、安装、GUI和Python程序的基本使用介绍。</summary>
    
    
    
    <category term="机器人" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="仿真" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E4%BB%BF%E7%9C%9F/"/>
    
    
    <category term="实验" scheme="https://www.mahaofei.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
    <category term="IsaacSim" scheme="https://www.mahaofei.com/tags/IsaacSim/"/>
    
    <category term="NVIDIA" scheme="https://www.mahaofei.com/tags/NVIDIA/"/>
    
    <category term="仿真" scheme="https://www.mahaofei.com/tags/%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu设置定时任务</title>
    <link href="https://www.mahaofei.com/post/cron.html"/>
    <id>https://www.mahaofei.com/post/cron.html</id>
    <published>2024-11-09T08:46:15.000Z</published>
    <updated>2024-11-09T08:46:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于某些需求（例如定时重启某个任务，定时推送更新博客，定时备份文件等），需要定时执行某些任务。</p></blockquote><h2 id="cron">cron</h2><p><code>cron</code> 是 Linux 系统中用于管理和执行周期性任务的工具。</p><h2 id="任务编辑规则">任务编辑规则</h2><p><strong>（1）打开 cron 任务编辑器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>如果是第一次使用 crontab，系统可能会让你选择一个文本编辑器，通常可以选择 nano 简单一些。</p><p><strong>（2）配置 cron 服务</strong></p><p>表达式如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*  *  * *  *   command</span><br><span class="line">分 时 天 月 周   命令</span><br></pre></td></tr></table></figure><ul><li>分：0-59</li><li>时：0-23</li><li>天：1-31</li><li>月：1-12</li><li>周：1-6 周一至周六，0 周日</li></ul><p>此外：</p><ul><li><code>*</code>：表示任意值，比如在小时部分填写 <code>*</code> 代表任意小时（每小时）</li><li><code>,</code>：允许在一个部分中填写多个值，比如在分钟部分填写 <code>1,3</code> 表示一分钟或三分钟</li><li><code>\</code>：一般配合 * 使用，代表每隔多长时间，比如在小时部分填写 <code>*/2</code> 代表每隔两分钟。所以 <code>*/1</code> 和 <code>*</code> 没有区别</li></ul><p>例如：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. \* * * * *      # 每隔一分钟执行一次任务</span><br><span class="line">2. 0 * * * *       # 每小时的0点执行一次任务，比如6:00，10:00  </span><br><span class="line">3. 6,10 * 2 * *    # 每个月2号，每小时的6分和10分执行一次任务  </span><br><span class="line">4. \*/3,\*/5 * * * *   # 每隔3分钟或5分钟执行一次任务，比如10:03，10:05，10:06</span><br></pre></td></tr></table></figure><h2 id="配置一个定时任务">配置一个定时任务</h2><p><strong>（1）创建脚本</strong></p><p>例如我们需要每天在命令行执行 <code>hexo g</code>, <code>hexo d</code> 的命令。</p><p>首先创建脚本：<code>gedit hexo.sh</code>，写入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">HEXO_DIR=&quot;/path/hexo_blog_dir&quot;</span><br><span class="line"></span><br><span class="line">if [ -d &quot;$HEXO_DIR&quot; ]; then</span><br><span class="line">    cd &quot;$HEXO_DIR&quot; || exit</span><br><span class="line">    hexo g &amp;&amp; hexo d</span><br><span class="line">    echo &quot;已在 $HEXO_DIR 执行 hexo g 和 hexo d&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;未找到 $HEXO_DIR 目录&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><strong>（2）赋予权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x hexo.sh</span><br></pre></td></tr></table></figure><p>可以验证一下 <code>hexo.sh</code> 是否能够成功执行。</p><p><strong>（3）添加定时任务</strong></p><p>打开 <code>crontab -e</code>，添加一行内 W容：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 0 * * * /home/mahaofei/Software/everyweek.sh</span><br></pre></td></tr></table></figure><p><strong>（4）重启 cron 服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service cron restart</span><br></pre></td></tr></table></figure><p>这样就会每天 0 点定时执行 <a href="http://hexo.sh">hexo.sh</a>。</p>]]></content>
    
    
    <summary type="html">由于某些需求（例如定时重启某个任务，定时推送更新博客，定时备份文件等），需要定时执行某些任务。</summary>
    
    
    
    <category term="实用工具" scheme="https://www.mahaofei.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Ubuntu工具" scheme="https://www.mahaofei.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/Ubuntu%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="实用工具" scheme="https://www.mahaofei.com/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Ubuntu" scheme="https://www.mahaofei.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>审稿意见撰写流程</title>
    <link href="https://www.mahaofei.com/post/paper-review.html"/>
    <id>https://www.mahaofei.com/post/paper-review.html</id>
    <published>2024-10-03T13:52:06.000Z</published>
    <updated>2024-10-03T13:52:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本流程">基本流程</h2><ul><li>第一遍：略读，了解文章的目的，确保论文属于期刊范围，详细记录，查找是否有致命缺陷（缺失、无法阅读）</li><li>第二遍：研究细节，方法论，结论</li><li>第三遍：具体的建议</li></ul><blockquote><p>意见应具有建设性，而不是攻击性，<strong>用你希望别人审你稿的方式为他人审稿</strong></p></blockquote><h2 id="阅读过程中的记录">阅读过程中的记录</h2><p><strong>（1）引言/文献综述部分</strong></p><ul><li>是否引用足够多的工作</li><li>对当前存在的问题是否有概括性的介绍</li><li>是否说明了本文的研究目的和大致框架</li></ul><blockquote><p>Introduction should provide background/research gap/research objectives, but the author took a lot of part to explain background.（没有写出背景/问题/目标）</p></blockquote><blockquote><p>Literature review is not the inventory of the studies you reviewed. This part needs more extensive works to synthesize current research and find any research gap to contribute.（引用工作不够多）</p></blockquote><p><strong>（2）方法部分</strong></p><ul><li>方法/算法/公式是否可以看懂</li><li>技术性问题是否有明显错误</li></ul><blockquote><p>贡献不足：The significance of this paper is not expound sufficiently. The author need to highlight this paper’s innovative contributions.</p></blockquote><p><strong>（3）实验部分</strong></p><ul><li>实验的条件设置是否写清楚</li><li>实验对照是否合理</li><li>实验的结果图表是否清晰、规范</li><li>实验的结果分析是否充分、合理</li></ul><p><strong>（4）总结部分</strong></p><ul><li>文章做了什么？</li><li>效果如何？</li><li>验证了什么？</li><li>未来可以深入做哪方面的工作？</li></ul><blockquote><p>CONCLUSIONS needs more in it, as it’s more of an afterthought. The authors are suggested to highlight important findings and include afterthought of this work.</p></blockquote><p><strong>（5）其它</strong></p><ul><li>语言性错误（单词错用、语法错误，语气要委婉！）</li></ul><blockquote><p>语句错误：Some sentences contain grammatical mistakes or are not complete sentences, such as, in page 1, ABSTRACT, “错误的地方” would be “正确的写法”.<br>拼写错误：There is at least one Spelling error in the manuscript, such as, in page 7, TABLE I, “Stabalization” would be “Stabilization”. Please check the manuscript carefully.<br>Your manuscript needs careful editing and particular attention to English grammar, spelling, and sentence structure.</p></blockquote><h2 id="审稿意见">审稿意见</h2><p>Decision: Accept / Minor Revision / Major Revision / Reject &amp; Resubmit / Reject<br>Overall Manuscript Rating (1-100):</p><p><strong>第一段优点</strong>：文章针对哪个方面的问题？做了几项重要工作？取得了什么效果？</p><blockquote><p>The paper is very well written, and contributes …（某种技术方案） scheme for …（应用的对象）, which enables …（这个方案带来的好处） . And the proposed scheme outperforms the state of the arts （新方法的指标比以前的好）and can …（未来可以应用于什么，前景广阔）</p></blockquote><p><strong>第二段过渡客套</strong>：There are some problems, which must be solved before it is considered for publication. If the following problems are well-addressed, this reviewer believes that the essential contribution of this paper are important for （某某理论/领域).</p><p><strong>缺点部分</strong>：参考阅读中的记录</p><blockquote><p>如果一定要拒稿，必须有理有据，比如研究的数据存在问题，分析的方法存在巨大缺陷，论文创新点不足等等。</p></blockquote><p>Reviewer Confidential Comments to Editor</p>]]></content>
    
    
    <summary type="html">审稿流程和撰写意见模板</summary>
    
    
    
    <category term="经验分享" scheme="https://www.mahaofei.com/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    <category term="科研基础" scheme="https://www.mahaofei.com/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/%E7%A7%91%E7%A0%94%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="论文笔记" scheme="https://www.mahaofei.com/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【设备使用】法奥意威 FR5 机械臂 Python 控制</title>
    <link href="https://www.mahaofei.com/post/fr5-ag95.html"/>
    <id>https://www.mahaofei.com/post/fr5-ag95.html</id>
    <published>2024-04-10T02:40:07.000Z</published>
    <updated>2024-04-10T02:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>[!abstract]<br>FR5 是与 UR5 构型相似的 6 自由度机械臂，本文介绍其 Python SDK 的基本运动控制方法。本文内容参考自<a href="https://fr-documentation.readthedocs.io/zh-cn/latest/index.html">官方文档</a>。</p></blockquote><h1>一、FR5 机器人使用方法</h1><h2 id="1-1-机器人安装与连接">1.1 机器人安装与连接</h2><p><strong>（1）机器人安装</strong></p><p>安装好机器人，并将夹爪安装连接在机械臂末端。</p><p><strong>（2）网络配置</strong></p><p>机器人默认 IP 地址为 <code>192.168.58.2</code>，需要修改电脑 IP 同一频段例如 <code>192.168.58.10</code>，然后才可连接。</p><p>配置好网络后，在浏览器输入 <code>192.168.58.2</code>，进入机械臂网页控制页面说明连接成功，默认用户名 admin，默认密码 123。（必须使用 Chrome 浏览器）</p><p><strong>（3）Python 环境</strong></p><p>该 SDK 程序基于 Python 3.10 实现，因此需要创建 3.10 的 Python 环境才能正常使用。</p><p><strong>（4）设置工具坐标系</strong></p><p>首先进入浏览器机器人后台，打开【初始设置-机器人设置-工具坐标】，选择坐标系名称为 toolcoord1（初始默认是 toolcoord0，尽量不修改它），此时成功设置机器人工具坐标系为 toolcoord1。</p><p>如果已知参数，例如夹爪坐标系和法兰盘坐标系，方向相同，仅 Z 轴移动了一定距离。可以直接设置为：<code>[0, 0, 185, 0, 0, 0]</code></p><p>或者通过六点法标定，依次选择六个点</p><ul><li>第 1 点：在世界中指定一个点，保持工具尖端在该位置处</li><li>第 2 点：保持工具尖端在该位置处（与上一点姿态差距尽量大）</li><li>第 3 点：保持工具尖端在该位置处（与前两点姿态差距尽量大）</li><li>第 4 点：保持工具尖端在该位置处，末端 Z 轴与工具坐标 Z 轴平行</li><li>第 5 点：移动工具末端至工具 X 轴正方向上的任一点</li><li>第 6 点：移动工具末端至工具 Y 轴正方向上的任一点</li></ul><h2 id="1-2-示例程序">1.2 示例程序</h2><p><strong>（1）机器人连接与基本运动</strong></p><p>该程序的功能为，连接机器人，移动机器人至初始位置（本文中机器人安装位置绕 Z 轴有夹角，设置初始位置为夹爪向下），激活夹爪并关闭夹爪。</p><figure class="highlight python"><figcaption><span>fold</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># from libfairino.utils.sdk_error import *</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.spatial.transform <span class="keyword">import</span> Rotation <span class="keyword">as</span> R</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">###################### 机器人控制器连接测试 ######################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">error = robot.SetRobotInstallAngle(<span class="number">0.0</span>,-<span class="number">20.0</span>) <span class="comment">#！！！安装角度设置应与实际一致 (错误安装角度设置会导致拖动模式下机器人失控）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;设置机器人安装角度错误码&quot;</span>,error)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询机器人的SDK版本号</span></span><br><span class="line">ret,version  = robot.GetSDKVersion()    <span class="comment">#查询SDK版本号</span></span><br><span class="line"><span class="keyword">if</span> ret ==<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;SDK版本号为&quot;</span>, version )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查询失败，错误码为&quot;</span>,ret)</span><br><span class="line"></span><br><span class="line"><span class="comment">###################### 机器本体运动测试 ######################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取机器人的关节位置</span></span><br><span class="line">error, joint_deg = robot.GetActualJointPosDegree()</span><br><span class="line"><span class="keyword">if</span> error == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;获取当前关节位置 (角度)&quot;</span>, joint_deg)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;获取当前关节位置(角度)失败，错误码为&quot;</span>, error)</span><br><span class="line">error, joint_rad = robot.GetActualJointPosRadian()</span><br><span class="line"><span class="keyword">if</span> error == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;获取当前关节位置 (弧度)&quot;</span>, joint_rad)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;获取当前关节位置(弧度)失败，错误码为&quot;</span>, error)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 机器人关节空间运动</span></span><br><span class="line"><span class="comment"># joint_pos1 = [20., -90., 90., -90., -90., 0.]</span></span><br><span class="line"><span class="comment"># tool = 0 #工具坐标系编号</span></span><br><span class="line"><span class="comment"># user = 0 #工件坐标系编号</span></span><br><span class="line"><span class="comment"># error = robot.MoveJ(joint_pos1, tool, user, vel=10)   #关节空间运动</span></span><br><span class="line"><span class="comment"># if error != 0:</span></span><br><span class="line"><span class="comment">#     print(&quot;关节空间运动失败，错误码为&quot;, error)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取机器人的工具坐标 [-432, -265, 477, 180, 0, 110]</span></span><br><span class="line">error, tcp_pose = robot.GetActualTCPPose()</span><br><span class="line"><span class="keyword">if</span> error == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;获取当前工具坐标&quot;</span>, tcp_pose)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;获取当前工具坐标失败，错误码为&quot;</span>, error)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 机器人直线运动</span></span><br><span class="line"><span class="comment"># pose1 = [-432, -265, 477, 180, 0, 110]</span></span><br><span class="line"><span class="comment"># tool = 0 #工具坐标系编号</span></span><br><span class="line"><span class="comment"># user = 0 #工件坐标系编号</span></span><br><span class="line"><span class="comment"># error = robot.MoveL(pose1, tool, user, vel=10)   #直线运动</span></span><br><span class="line"><span class="comment"># if error != 0:</span></span><br><span class="line"><span class="comment">#     print(&quot;直线运动失败，错误码为&quot;, error)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 机器人点到点运动</span></span><br><span class="line">pose2 = [-<span class="number">432</span>, -<span class="number">265</span>, <span class="number">477</span>, <span class="number">180</span>, <span class="number">0</span>, <span class="number">110</span>]</span><br><span class="line">tool = <span class="number">0</span> <span class="comment">#工具坐标系编号</span></span><br><span class="line">user = <span class="number">0</span> <span class="comment">#工件坐标系编号</span></span><br><span class="line">error = robot.MoveCart(pose2, tool, user, vel=<span class="number">10</span>)   <span class="comment">#点到点运动</span></span><br><span class="line"><span class="keyword">if</span> error != <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;点到点运动失败，错误码为&quot;</span>, error)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询机器人运动状态</span></span><br><span class="line">error, status = robot.GetRobotMotionDone()</span><br><span class="line"><span class="keyword">if</span> error == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> status == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;机器人运动已完成&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;机器人正在运动&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查询机器人运动状态失败，错误码为&quot;</span>, error)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### 机器人夹爪测试 ######################</span></span><br><span class="line">ret = robot.SetGripperConfig(<span class="number">4</span>,<span class="number">0</span>)  <span class="comment"># 配置夹爪，大寰夹爪</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">error, config = robot.GetGripperConfig()     <span class="comment"># 获取夹爪配置</span></span><br><span class="line"></span><br><span class="line">error = robot.ActGripper(<span class="number">1</span>,<span class="number">0</span>)   <span class="comment"># 激活夹爪（复位）</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># error = robot.ActGripper(1,1)   # 激活夹爪（激活）</span></span><br><span class="line"><span class="comment"># time.sleep(2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># error = robot.MoveGripper(1,100,48,46,30000,0)  # 控制夹爪（夹爪编号，位置百分比，速度百分比，力矩百分比，最大等待时间，阻塞）</span></span><br><span class="line"><span class="comment"># time.sleep(3)</span></span><br><span class="line"></span><br><span class="line">error = robot.MoveGripper(<span class="number">1</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">30000</span>,<span class="number">0</span>)     <span class="comment"># 控制夹爪</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">error, state = robot.GetGripperMotionDone() <span class="comment">#获取夹爪运动状态</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>二、FR5 常用 Python 接口</h1><h2 id="2-1-机器人基础">2.1 机器人基础</h2><h3 id="2-1-1-实例化机器人">2.1.1 实例化机器人</h3><p><code>RPC(ip)</code>：实例化一个机器人对象</p><ul><li>参数：<ul><li><code>ip</code>：机器人的IP地址，默认出厂IP为“192.168.58.2”</li></ul></li><li>返回<ul><li>机器人对象</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-1-2-查询-SDK-版本号">2.1.2 查询 SDK 版本号</h3><p><code>GetSDKVersion()</code>：查询 SDK 版本号</p><ul><li>参数</li><li>返回<ul><li>[SDK_version, Controller_version]</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">ret,version  = robot.GetSDKVersion()    <span class="comment">#查询SDK版本号</span></span><br><span class="line"><span class="keyword">if</span> ret ==<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;SDK版本号为&quot;</span>, version )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查询失败，错误码为&quot;</span>,ret)</span><br></pre></td></tr></table></figure><h3 id="2-1-3-机器人手动-自动模式切换">2.1.3 机器人手动/自动模式切换</h3><p><code>Mode(state)</code>：控制机器人手动/自动模式切换</p><ul><li>参数<ul><li><code>state</code>：0-自动模式，1-手动模式</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line"><span class="comment">#机器人手自动模式切换</span></span><br><span class="line">ret = robot.Mode(<span class="number">0</span>)   <span class="comment">#机器人切入自动运行模式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;机器人切入自动运行模式&quot;</span>, ret)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">ret = robot.Mode(<span class="number">1</span>)   <span class="comment">#机器人切入手动模式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;机器人切入手动模式&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h3 id="2-1-4-控制机器人上使能或下使能">2.1.4 控制机器人上使能或下使能</h3><p><code>RobotEnable(state)</code>：控制机器人上使能或下使能</p><ul><li>参数<ul><li><code>state</code>：1-上使能，0-下使能</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line"><span class="comment">#机器人上使能或下使能</span></span><br><span class="line">ret = robot.RobotEnable(<span class="number">0</span>)   <span class="comment">#机器人下使能</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;机器人下使能&quot;</span>, ret)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">ret = robot.RobotEnable(<span class="number">1</span>)   <span class="comment">#机器人上使能，机器人上电后默认自动上使能</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;机器人上使能&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h2 id="2-2-机器人运动控制">2.2 机器人运动控制</h2><h3 id="2-2-1-机器人点动">2.2.1 机器人点动</h3><p><strong>（1）Jog 点动</strong></p><p><code>StartJOG(ref,nb,dir,max_dis,vel=20.0,acc=100.0)</code>：jog 点动</p><ul><li>参数<ul><li><code>ref</code>：0-关节点动,2-基坐标系点动,4-工具坐标系点动,8-工件坐标系点动；</li><li><code>nb</code>：1-1关节(x 轴),2-2关节(y 轴),3-3关节(z 轴),4-4关节(rx),5-5关节(ry),6-6关节(rz);</li><li><code>dir</code>：0-负方向，1-正方向;</li><li><code>max_dis</code>：单次点动最大角度/距离，单位 ° 或 mm;</li><li><code>vel</code>：速度百分比，[0~100] 默认20;</li><li><code>acc</code>：加速度百分比，[0~100] 默认100;</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><p><strong>（2）Jog 点动减速停止</strong></p><p><code>StopJOG(ref)</code>：jog 点动减速停止</p><ul><li>参数<ul><li><code>ref</code>：1-关节点动停止,3-基坐标系点动停止,5-工具坐标系点动停止,9-工件坐标系点动停止</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><p><strong>（3）Jog 点动立即停止</strong></p><p><code>ImmStopJOG()</code>：jog 点动立即停止</p><ul><li>参数</li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><figcaption><span>fold</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line"><span class="comment"># 机器人单轴点动</span></span><br><span class="line">robot.StartJOG(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">20.0</span>,<span class="number">20.0</span>,<span class="number">30.0</span>)    <span class="comment"># 单关节运动,StartJOG为非阻塞指令，运动状态下接收其他运动指令（包含StartJOG）会被丢弃</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#机器人单轴点动减速停止</span></span><br><span class="line">ret = robot.StopJOG(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"><span class="comment">#机器人单轴点动立即停止</span></span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">20.0</span>,vel=<span class="number">40</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">0</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">20.0</span>,acc=<span class="number">50</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">0</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">20.0</span>,<span class="number">20.0</span>,<span class="number">30.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line"><span class="comment"># 基坐标</span></span><br><span class="line">robot.StartJOG(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">20.0</span>)  <span class="comment">#基坐标系下点动</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># #机器人单轴点动立即停止</span></span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line"><span class="comment"># 工具坐标</span></span><br><span class="line">robot.StartJOG(<span class="number">4</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">20.0</span>,<span class="number">20.0</span>,<span class="number">100.0</span>)  <span class="comment">#工具坐标系下点动</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># #机器人单轴点动立即停止</span></span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">4</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">20.0</span>,<span class="number">20.0</span>,<span class="number">100.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">20.0</span>,vel=<span class="number">10.0</span>,acc=<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">20.0</span>,acc=<span class="number">40.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line"><span class="comment"># 工件坐标</span></span><br><span class="line">robot.StartJOG(<span class="number">8</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">20.0</span>,<span class="number">20.0</span>,<span class="number">100.0</span>)  <span class="comment">#工件坐标系下点动</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># #机器人单轴点动立即停止</span></span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">8</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">8</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">20.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">8</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">20.0</span>,vel=<span class="number">30.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br><span class="line">robot.StartJOG(<span class="number">8</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">20.0</span>,<span class="number">20.0</span>,acc=<span class="number">90.0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">robot.ImmStopJOG()</span><br></pre></td></tr></table></figure><h3 id="2-2-2-关节空间运动">2.2.2 关节空间运动</h3><p><code>MoveJ(joint_pos, tool, user, desc_pos = [0.0,0.0,0.0,0.0,0.0,0.0], vel = 20.0, acc = 0.0, ovl = 100.0, exaxis_pos = [0.0,0.0,0.0,0.0], blendT = -1.0, offset_flag = 0, offset_pos = [0.0,0.0,0.0,0.0,0.0,0.0])</code>：关节空间运动</p><ul><li>参数<ul><li><code>joint_pos</code>:目标关节位置，单位[°]；</li><li><code>tool</code>:工具号，[0~14]；</li><li><code>user</code>:工件号，[0~14]；</li><li><code>desc_pos</code>:目标笛卡尔位姿，单位 [mm][°] 默认初值为[0.0,0.0,0.0,0.0,0.0,0.0]，默认值调用正运动学求解返回值;</li><li><code>vel</code>:速度百分比，[0~100] 默认20.0;</li><li><code>acc</code>:加速度百分比，[0~100]，暂不开放；</li><li><code>ovl</code>:速度缩放因子，[0~100] 默认100.0;</li><li><code>exaxis_pos</code>:外部轴 1 位置 ~ 外部轴 4 位置 默认[0.0,0.0,0.0,0.0];</li><li><code>blendT</code>:[-1.0]-运动到位 (阻塞)，[0~500.0]-平滑时间 (非阻塞)，单位 [ms] 默认-1.0;</li><li><code>offset_flag</code>:[0]-不偏移，[1]-工件/基坐标系下偏移，[2]-工具坐标系下偏移 默认 0;</li><li><code>offset_pos</code>:位姿偏移量，单位 [mm][°] 默认[0.0,0.0,0.0,0.0,0.0,0.0];</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">joint_pos4 = [-<span class="number">83.24</span>, -<span class="number">96.476</span>, <span class="number">93.688</span>, -<span class="number">114.079</span>, -<span class="number">62</span>, -<span class="number">100</span>]</span><br><span class="line">joint_pos5 = [-<span class="number">43.24</span>, -<span class="number">70.476</span>, <span class="number">93.688</span>, -<span class="number">114.079</span>, -<span class="number">62</span>, -<span class="number">80</span>]</span><br><span class="line">joint_pos6 = [-<span class="number">83.24</span>, -<span class="number">96.416</span>, <span class="number">43.188</span>, -<span class="number">74.079</span>, -<span class="number">80</span>, -<span class="number">10</span>]</span><br><span class="line">tool = <span class="number">0</span> <span class="comment">#工具坐标系编号</span></span><br><span class="line">user = <span class="number">0</span> <span class="comment">#工件坐标系编号</span></span><br><span class="line">ret = robot.MoveJ(joint_pos4, tool, user, vel=<span class="number">30</span>)   <span class="comment">#关节空间运动</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;关节空间运动点4:错误码&quot;</span>, ret)</span><br><span class="line">ret = robot.MoveJ(joint_pos5, tool, user)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;关节空间运动点5:错误码&quot;</span>, ret)</span><br><span class="line">robot.MoveJ(joint_pos6, tool, user, offset_flag=<span class="number">1</span>, offset_pos=[<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;关节空间运动点6:错误码&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h3 id="2-2-3-笛卡尔空间直线运动">2.2.3 笛卡尔空间直线运动</h3><p><code>MoveL(desc_pos, tool, user, joint_pos = [0.0,0.0,0.0,0.0,0.0,0.0], vel = 20.0, acc = 0.0 , ovl = 100.0, blendR = -1.0, exaxis_pos = [0.0,0.0,0.0,0.0], search = 0, offset_flag = 0, offset_pos = [0.0,0.0,0.0,0.0,0.0,0.0] )</code>：笛卡尔空间直线运动</p><ul><li>参数<ul><li><code>desc_pos</code>:目标笛卡尔位姿，单位[mm][°]；</li><li><code>tool</code>:工具号，[0~14]；</li><li><code>user</code>:工件号，[0~14]；</li><li><code>joint_pos</code>:目标关节位置，单位 [°] 默认初值为[0.0,0.0,0.0,0.0,0.0,0.0]，默认值调用逆运动学求解返回值;</li><li><code>vel</code>:速度百分比，[0~100] 默认20.0；</li><li><code>acc</code>:加速度百分比，[0~100]，暂不开放 默认0.0；</li><li><code>ovl</code>:速度缩放因子，[0~100] 默认100.0；</li><li><code>blendR</code>:blendR:[-1.0]-运动到位 (阻塞)，[0~1000]-平滑半径 (非阻塞)，单位 [mm] 默认-1.0;</li><li><code>exaxis_pos</code>:外部轴 1 位置 ~ 外部轴 4 位置 默认[0.0,0.0,0.0,0.0];</li><li><code>search</code>:[0]-不焊丝寻位，[1]-焊丝寻位；</li><li><code>offset_flag</code>:offset_flag:[0]-不偏移，[1]-工件/基坐标系下偏移，[2]-工具坐标系下偏移 默认 0;</li><li><code>offset_pos</code>:位姿偏移量，单位 [mm][°] 默认[0.0,0.0,0.0,0.0,0.0,0.0]</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">desc_pos1 = [<span class="number">36.794</span>,-<span class="number">475.119</span>, <span class="number">65.379</span>, -<span class="number">176.938</span>, <span class="number">2.535</span>, -<span class="number">179.829</span>]</span><br><span class="line">desc_pos2 = [<span class="number">136.794</span>,-<span class="number">475.119</span>, <span class="number">65.379</span>, -<span class="number">176.938</span>, <span class="number">2.535</span>, -<span class="number">179.829</span>]</span><br><span class="line">desc_pos3 = [<span class="number">236.794</span>,-<span class="number">475.119</span>, <span class="number">65.379</span>, -<span class="number">176.938</span>, <span class="number">2.535</span>, -<span class="number">179.829</span>]</span><br><span class="line">tool = <span class="number">0</span> <span class="comment">#工具坐标系编号</span></span><br><span class="line">user = <span class="number">0</span> <span class="comment">#工件坐标系编号</span></span><br><span class="line">ret = robot.MoveL(desc_pos1, tool, user)   <span class="comment">#笛卡尔空间直线运动</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;笛卡尔空间直线运动点1:错误码&quot;</span>, ret)</span><br><span class="line">robot.MoveL(desc_pos2, tool, user, vel=<span class="number">20</span>, acc=<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;笛卡尔空间直线运动点2:错误码&quot;</span>, ret)</span><br><span class="line">robot.MoveL(desc_pos3, tool, user, offset_flag=<span class="number">1</span>, offset_pos=[<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;笛卡尔空间直线运动点3:错误码&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h3 id="2-2-4-笛卡尔空间点到点运动">2.2.4 笛卡尔空间点到点运动</h3><p><code>MoveCart(desc_pos, tool, user, vel = 20.0, acc = 0.0, ovl = 100.0, blendT = -1.0, config = -1)</code>：笛卡尔空间点到点运动</p><ul><li>参数<ul><li><code>desc_pos</code>:目标笛卡尔位置；</li><li><code>tool</code>:工具号，[0~14]；</li><li><code>user</code>:工件号，[0~14]；</li><li><code>vel</code>:速度，范围 [0~100]，默认为 20.0;</li><li><code>acc</code>:加速度，范围 [0~100]，暂不开放,默认为 0.0;</li><li><code>ovl</code>:速度缩放因子，[0~100]，默认为 100.0;</li><li><code>blendT</code>:[-1.0]-运动到位 (阻塞)，[0~500]-平滑时间 (非阻塞)，单位 [ms] 默认为 -1.0;</li><li><code>config</code>:关节配置，[-1]-参考当前关节位置求解，[0~7]-依据关节配置求解 默认为 -1</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">desc_pos7 = [<span class="number">236.794</span>,-<span class="number">475.119</span>, <span class="number">65.379</span>, -<span class="number">176.938</span>, <span class="number">2.535</span>, -<span class="number">179.829</span>]</span><br><span class="line">desc_pos8 = [<span class="number">236.794</span>,-<span class="number">575.119</span>, <span class="number">165.379</span>, -<span class="number">176.938</span>, <span class="number">2.535</span>, -<span class="number">179.829</span>]</span><br><span class="line">desc_pos9 = [<span class="number">236.794</span>,-<span class="number">475.119</span>, <span class="number">265.379</span>, -<span class="number">176.938</span>, <span class="number">2.535</span>, -<span class="number">179.829</span>]</span><br><span class="line">tool = <span class="number">0</span> <span class="comment">#工具坐标系编号</span></span><br><span class="line">user = <span class="number">0</span> <span class="comment">#工件坐标系编号</span></span><br><span class="line">robot.MoveCart(desc_pos7, tool, user)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;笛卡尔空间点到点运动点7:错误码&quot;</span>, ret)</span><br><span class="line">robot.MoveCart(desc_pos8, tool, user, vel=<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;笛卡尔空间点到点运动点8:错误码&quot;</span>, ret)</span><br><span class="line">robot.MoveCart(desc_pos9, tool, user,)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;笛卡尔空间点到点运动点9:错误码&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h3 id="2-2-5-伺服运动">2.2.5 伺服运动</h3><p><strong>（1）伺服运动开始</strong></p><p><code>ServoMoveStart()</code>：伺服运动开始，配合 ServoJ、ServoCart 指令使用</p><ul><li>参数</li><li>返回<ul><li>错误码</li></ul></li></ul><p><strong>（2）伺服运动结束</strong></p><p><code>ServoMoveEnd()</code>：伺服运动开始，配合 ServoJ、ServoCart 指令使用</p><ul><li>参数</li><li>返回<ul><li>错误码</li></ul></li></ul><p><strong>（3）关节空间伺服模式运动</strong></p><p><code>ServoJ(joint_pos, acc = 0.0, vel = 0.0, cmdT = 0.008, filterT = 0.0, gain = 0.0)</code>：关节空间伺服模式运动</p><ul><li>参数<ul><li><code>joint_pos</code>:目标关节位置，单位[°]；</li><li><code>acc</code>:加速度，范围 [0~100]，暂不开放，默认为 0.0;</li><li><code>vel</code>:速度，范围 [0~100]，暂不开放，默认为 0.0;</li><li><code>cmdT</code>:指令下发周期，单位s，建议范围[0.001~0.0016], 默认为0.008;</li><li><code>filterT</code>:滤波时间，单位 [s]，暂不开放， 默认为0.0;</li><li><code>gain</code>:目标位置的比例放大器，暂不开放， 默认为0.0;</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><p><strong>（4）笛卡尔空间伺服模式运动</strong></p><p><code>ServoCart(mode, desc_pos, pos_gain = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0] , acc = 0.0, vel = 0.0, cmdT = 0.008, filterT = 0.0, gain = 0.0)</code>：笛卡尔空间伺服模式运动</p><ul><li>参数<ul><li><code>mode</code>:[0]-绝对运动(基坐标系)，[1]-增量运动(基坐标系)，[2]-增量运动(工具坐标系)；</li><li><code>desc_pos</code>:目标笛卡尔位置/目标笛卡尔位置增量；</li><li><code>pos_gain</code>:位姿增量比例系数，仅在增量运动下生效，范围 [0~1], 默认为 [1.0, 1.0, 1.0, 1.0, 1.0, 1.0];</li><li><code>acc</code>:加速度，范围 [0~100]，暂不开放，默认为 0.0;</li><li><code>vel</code>:速度，范围 [0~100]，暂不开放，默认为 0.0;</li><li><code>cmdT</code>:指令下发周期，单位s，建议范围[0.001~0.0016], 默认为0.008;</li><li><code>filterT</code>:滤波时间，单位 [s]，暂不开放， 默认为0.0;</li><li><code>gain</code>:目标位置的比例放大器，暂不开放， 默认为0.0;</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><figcaption><span>fold</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">error,joint_pos = robot.GetActualJointPosDegree()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;机器人当前关节位置&quot;</span>,joint_pos)</span><br><span class="line">joint_pos = [joint_pos[<span class="number">0</span>],joint_pos[<span class="number">1</span>],joint_pos[<span class="number">2</span>],joint_pos[<span class="number">3</span>],joint_pos[<span class="number">4</span>],joint_pos[<span class="number">5</span>]]</span><br><span class="line">error_joint = <span class="number">0</span></span><br><span class="line">count =<span class="number">100</span></span><br><span class="line">error = robot.ServoMoveStart()  <span class="comment">#伺服运动开始</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;伺服运动开始错误码&quot;</span>,error)</span><br><span class="line"><span class="keyword">while</span>(count):</span><br><span class="line">    error = robot.ServoJ(joint_pos)   <span class="comment">#关节空间伺服模式运动</span></span><br><span class="line">    <span class="keyword">if</span> error!=<span class="number">0</span>:</span><br><span class="line">        error_joint =error</span><br><span class="line">    joint_pos[<span class="number">0</span>] = joint_pos[<span class="number">0</span>] + <span class="number">0.1</span>  <span class="comment">#每次1轴运动0.1度，运动100次</span></span><br><span class="line">    count = count - <span class="number">1</span></span><br><span class="line">    time.sleep(<span class="number">0.008</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;关节空间伺服模式运动错误码&quot;</span>,error_joint)</span><br><span class="line">error = robot.ServoMoveEnd()  <span class="comment">#伺服运动结束</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;伺服运动结束错误码&quot;</span>,error)</span><br><span class="line">mode = <span class="number">2</span>  <span class="comment">#[0]-绝对运动(基坐标系)，[1]-增量运动(基坐标系)，[2]-增量运动(工具坐标系)</span></span><br><span class="line">n_pos = [<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.5</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>]   <span class="comment">#笛卡尔空间位姿增量</span></span><br><span class="line">error,desc_pos = robot.GetActualTCPPose()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;机器人当前笛卡尔位置&quot;</span>,desc_pos)</span><br><span class="line">count = <span class="number">100</span></span><br><span class="line">error_cart =<span class="number">0</span></span><br><span class="line">error = robot.ServoMoveStart()  <span class="comment">#伺服运动开始</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;伺服运动开始错误码&quot;</span>,error)</span><br><span class="line"><span class="keyword">while</span>(count):</span><br><span class="line">    error = robot.ServoCart(mode, n_pos, vel=<span class="number">40</span>)   <span class="comment">#笛卡尔空间伺服模式运动</span></span><br><span class="line">    <span class="keyword">if</span> error!=<span class="number">0</span>:</span><br><span class="line">        error_cart =error</span><br><span class="line">    count = count - <span class="number">1</span></span><br><span class="line">    time.sleep(<span class="number">0.008</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;笛卡尔空间伺服模式运动错误码&quot;</span>, error_cart)</span><br><span class="line">error = robot.ServoMoveEnd()  <span class="comment">#伺服运动开始</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;伺服运动结束错误码&quot;</span>,error)</span><br></pre></td></tr></table></figure><h2 id="2-3-机器人参数设置">2.3 机器人参数设置</h2><h3 id="2-3-1-设置全局速度">2.3.1 设置全局速度</h3><p><code>SetSpeed(vel)</code>：设置全局速度</p><ul><li>参数<ul><li><code>vel</code>:速度百分比，范围[0~100]</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">error = robot.SetSpeed(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;设置全局速度错误码:&quot;</span>,error)</span><br></pre></td></tr></table></figure><h3 id="2-3-2-设置系统变量值">2.3.2 设置系统变量值</h3><p><code>SetSysVarValue(id,value)</code>：设置系统变量</p><ul><li>参数<ul><li><code>id</code>：变量编号，范围[1~20];</li><li><code>value</code>：变量值</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">    error = robot.SetSysVarValue(i,<span class="number">10</span>)</span><br><span class="line">robot.WaitMs(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">    sys_var = robot.GetSysVarValue(i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;系统变量编号:&quot;</span>,i,<span class="string">&quot;值&quot;</span>,sys_var)</span><br></pre></td></tr></table></figure><h3 id="2-3-3-设置工具坐标系">2.3.3 设置工具坐标系</h3><p><strong>（1）计算工具坐标系 - 六点法</strong></p><p><code>SetToolPoint(point_num)</code>：设置工具参考点-六点法</p><ul><li>参数<ul><li><code>point_num</code>：点编号,范围[1~6]</li></ul></li><li>返回错误码</li></ul><p><code>ComputeTool()</code>：计算工具坐标系-六点法（设置完六个工具参考点后再进行计算）</p><ul><li>参数</li><li>返回<ul><li>错误码</li><li><code>tcp_pose [x,y,z,rx,ry,rz]</code>：工具坐标系</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">t_coord = [<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>,<span class="number">5.0</span>,<span class="number">6.0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    robot.DragTeachSwitch(<span class="number">1</span>)<span class="comment">#切入拖动示教模式</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    error = robot.SetToolPoint(i) <span class="comment">#实际应当控制机器人按照要求移动到合适位置后再发送指令</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;六点法设置工具坐标系，记录点&quot;</span>,i,<span class="string">&quot;错误码&quot;</span>,error)</span><br><span class="line">    robot.DragTeachSwitch(<span class="number">0</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">error = robot.ComputeTool()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;六点法设置工具坐标系错误码&quot;</span>,error)</span><br></pre></td></tr></table></figure><p><strong>（2）计算工具坐标系 - 四点法</strong></p><p><code>SetTcp4RefPoint(point_num)</code>：设置工具参考点-四点法</p><ul><li>参数<ul><li><code>point_num</code>：点编号,范围[1~4]</li></ul></li><li>返回值<ul><li>错误码</li></ul></li></ul><p><code>ComputeTcp4()</code>：计算工具坐标系-四点法（设置完四个工具参考点后再进行计算）</p><ul><li>参数</li><li>返回<ul><li>错误码</li><li><code>tcp_pose [x,y,z,rx,ry,rz]</code>：工具坐标系</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">t_coord = [<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>,<span class="number">5.0</span>,<span class="number">6.0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    robot.DragTeachSwitch(<span class="number">1</span>)<span class="comment">#切入拖动示教模式</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    error = robot.SetTcp4RefPoint(i) <span class="comment">#应当控制机器人按照要求移动到合适位置后再发送指令</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;四点法设置工具坐标系，记录点&quot;</span>,i,<span class="string">&quot;错误码&quot;</span>,error)</span><br><span class="line">    robot.DragTeachSwitch(<span class="number">0</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">error,t_coord= robot.ComputeTcp4()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;四点法设置工具坐标系错误码&quot;</span>,error,<span class="string">&quot;工具TCP&quot;</span>,t_coord)</span><br></pre></td></tr></table></figure><p><strong>（3）设置工具坐标系</strong></p><p><code>SetToolCoord(id,t_coord,type,install)</code>：设置工具坐标系</p><ul><li>参数<ul><li><code>id</code>:坐标系编号，范围[0~14]；</li><li><code>t_coord</code>:[x,y,z,rx,ry,rz] 工具中心点相对末端法兰中心位姿，单位[mm][°]；</li><li><code>type</code>:0-工具坐标系，1-传感器坐标系；</li><li><code>install</code>:安装位置，0-机器人末端，1-机器人外部</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">t_coord = [<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>,<span class="number">5.0</span>,<span class="number">6.0</span>]</span><br><span class="line">error = robot.SetToolCoord(<span class="number">10</span>,t_coord,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;设置工具坐标系错误码&quot;</span>,error)</span><br></pre></td></tr></table></figure><h3 id="2-3-4-设置外部工具坐标系">2.3.4 设置外部工具坐标系</h3><p><strong>（1）设置外部工具参考点</strong></p><p><code>SetExTCPPoint(point_num)</code>：设置外部工具参考点-三点法</p><ul><li>参数<ul><li><code>point_num</code>：点编号,范围[1~3]</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><p><strong>（2）计算外部工具坐标系</strong></p><p><code>ComputeExTCF(point_num)</code>：计算外部工具坐标系-三点法（设置完三个参考点后再进行计算）</p><ul><li>参数<ul><li><code>point_num</code>：点编号,范围[1~3]</li></ul></li><li>返回<ul><li>错误码</li><li><code>etcp [x,y,z,rx,ry,rz]</code>：外部工具坐标系</li></ul></li></ul><p><strong>（3）设置外部工具坐标系</strong></p><p><code>SetExToolCoord(id,etcp ,etool)</code>：设置外部工具坐标系</p><ul><li>参数<ul><li><code>id</code>:坐标系编号，范围[0~14]；</li><li><code>etcp</code>:外部工具坐标系，单位[mm][°]；</li><li><code>etool</code>:末端工具坐标系，单位[mm][°]；</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">etcp = [<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>,<span class="number">5.0</span>,<span class="number">6.0</span>]</span><br><span class="line">etool = [<span class="number">21.0</span>,<span class="number">22.0</span>,<span class="number">23.0</span>,<span class="number">24.0</span>,<span class="number">25.0</span>,<span class="number">26.0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">    error = robot.SetExTCPPoint(i) <span class="comment">#应当控制机器人按照要求移动到合适位置后再发送指令</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;三点法设置外部工具坐标系，记录点&quot;</span>,i,<span class="string">&quot;错误码&quot;</span>,error)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">error,etcp = robot.ComputeExTCF()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;三点法设置外部工具坐标系错误码&quot;</span>,error,<span class="string">&quot;外部工具TCP&quot;</span>,etcp)</span><br><span class="line">error = robot.SetExToolCoord(<span class="number">10</span>,etcp,etool)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;设置外部工具坐标系错误码&quot;</span>,error)</span><br><span class="line">error = robot.SetExToolList(<span class="number">10</span>,etcp,etool)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;设置外部工具坐标系列表错误码&quot;</span>,error)</span><br></pre></td></tr></table></figure><h3 id="2-3-5-设置工件坐标系">2.3.5 设置工件坐标系</h3><p><strong>（1）设置工件参考点</strong></p><p><code>SetWObjCoordPoint(point_num)</code>：设置工件参考点-三点法</p><ul><li>参数<ul><li><code>point_num</code>:点编号,范围[1~3]</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><p><strong>（2）计算工件坐标系</strong></p><p><code>ComputeWObjCoord()</code>：计算工件坐标系-三点法（三个参考点设置完后再进行计算;</p><ul><li>参数<ul><li><code>method</code>：计算方式：0（原点-x轴-z轴），1（原点-x轴-xy平面）</li></ul></li><li>返回<ul><li>错误码</li><li><code>wobj_pose [x,y,z,rx,ry,rz]</code>：工件坐标系</li></ul></li></ul><p><strong>（3）设置工件坐标系</strong></p><p><code>SetWObjCoord(id,w_coord)</code>：设置工件坐标系</p><ul><li>参数<ul><li><code>id</code>:坐标系编号，范围[0~14]；</li><li><code>w_coord</code>:坐标系相对位姿，单位[mm][°]；</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">w_coord = [<span class="number">11.0</span>,<span class="number">12.0</span>,<span class="number">13.0</span>,<span class="number">14.0</span>,<span class="number">15.0</span>,<span class="number">16.0</span>]</span><br><span class="line">robot.SetToolList(<span class="number">0</span>,[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>,<span class="number">0</span>)<span class="comment">#设置参考点前应当将工具和工件号坐标系切换至0</span></span><br><span class="line">robot.SetWObjList(<span class="number">0</span>,[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">    error = robot.SetWObjCoordPoint(i) <span class="comment">#实际应当控制机器人按照要求移动到合适位置后再发送指令</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;三点法设置工件坐标系，记录点&quot;</span>,i,<span class="string">&quot;错误码&quot;</span>,error)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">error, w_coord = robot.ComputeWObjCoord(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;三点法计算工件坐标系错误码&quot;</span>,error,<span class="string">&quot;工件坐标系&quot;</span>, w_coord)</span><br></pre></td></tr></table></figure><h2 id="2-4-机器人安全设置">2.4 机器人安全设置</h2><h3 id="2-4-1-碰撞设置">2.4.1 碰撞设置</h3><p><strong>（1）设置碰撞等级</strong></p><p><code>SetAnticollision (mode,level,config)</code>：设置碰撞等级</p><ul><li>参数<ul><li><code>mode</code>:0-等级，1-百分比；</li><li><code>level=[j1,j2,j3,j4,j5,j6]</code>:碰撞阈值；</li><li><code>config</code>:0-不更新配置文件，1-更新配置文件</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><p><strong>（2）设置碰撞后策略</strong></p><p><code>SetCollisionStrategy (strategy)</code>：设置碰撞后策略</p><ul><li>参数<ul><li><code>strategy</code>：0-报错暂停，1-继续运行</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">level = [<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>,<span class="number">5.0</span>,<span class="number">6.0</span>]</span><br><span class="line">error = robot.SetAnticollision(<span class="number">0</span>,level,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;设置碰撞等级错误码:&quot;</span>,error)</span><br><span class="line">level = [<span class="number">50.0</span>,<span class="number">20.0</span>,<span class="number">30.0</span>,<span class="number">40.0</span>,<span class="number">50.0</span>,<span class="number">60.0</span>]</span><br><span class="line">error = robot.SetAnticollision(<span class="number">1</span>,level,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;设置碰撞等级错误码:&quot;</span>,error)</span><br><span class="line">error = robot.SetCollisionStrategy(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;设置碰撞后策略错误码:&quot;</span>,error)</span><br></pre></td></tr></table></figure><h3 id="2-4-2-设置关节限位">2.4.2 设置关节限位</h3><p><strong>（1）正限位</strong></p><p><code>SetLimitPositive(p_limit)</code>：设置正限位</p><ul><li>参数<ul><li><code>p_limit=[j1,j2,j3,j4,j5,j6]</code>：六个关节位置</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><p><strong>（2）负限位</strong></p><p><code>SetLimitNegative(p_limit)</code>：设置负限位</p><ul><li>参数<ul><li><code>n_limit=[j1,j2,j3,j4,j5,j6]</code>：六个关节位置</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">p_limit = [<span class="number">170.0</span>,<span class="number">80.0</span>,<span class="number">150.0</span>,<span class="number">80.0</span>,<span class="number">170.0</span>,<span class="number">160.0</span>]</span><br><span class="line">error = robot.SetLimitPositive(p_limit)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;设置正限位错误码:&quot;</span>,error)</span><br><span class="line">n_limit = [-<span class="number">170.0</span>,-<span class="number">260.0</span>,-<span class="number">150.0</span>,-<span class="number">260.0</span>,-<span class="number">170.0</span>,-<span class="number">160.0</span>]</span><br><span class="line">5error = robot.SetLimitNegative(n_limit)</span><br><span class="line">6<span class="built_in">print</span>(<span class="string">&quot;设置负限位错误码:&quot;</span>,error)</span><br></pre></td></tr></table></figure><h3 id="2-4-3-错误状态清除">2.4.3 错误状态清除</h3><p><code>ResetAllError()</code>：错误状态清除，只能清除可复位的错误</p><ul><li>参数</li><li>返回<ul><li>错误码</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">error = robot.ResetAllError()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;错误状态清除错误码:&quot;</span>,error)</span><br></pre></td></tr></table></figure><h2 id="2-5-机器人状态查询">2.5 机器人状态查询</h2><h3 id="2-5-1-获取关节位置">2.5.1 获取关节位置</h3><p><strong>（1）获取当前关节位置(角度)</strong></p><p><code>GetActualJointPosDegree(flag = 1)</code>：获取关节当前位置(角度)</p><ul><li>参数<ul><li><code>flag</code>：0-阻塞，1-非阻塞</li></ul></li><li>返回<ul><li>错误码</li><li><code>joint_pos</code>=[j1,j2,j3,j4,j5,j6]</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">error, joint_deg = robot.GetActualJointPosDegree()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取当前关节位置 (角度)&quot;</span>, joint_deg)</span><br></pre></td></tr></table></figure><p><strong>（2）获取当前关节位置(弧度)</strong></p><p><code>GetActualJointPosRadian(flag = 1)</code>：获取关节当前位置(弧度)</p><ul><li>参数<ul><li><code>flag</code>：0-阻塞，1-非阻塞 默认1</li></ul></li><li>返回<ul><li>错误码</li><li><code>joint_pos</code> =[j1,j2,j3,j4,j5,j6]</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">error, joint_rad = robot.GetActualJointPosRadian()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取当前关节位置 (角度)&quot;</span>, joint_rad)</span><br></pre></td></tr></table></figure><h3 id="2-5-2-获取关节反馈速度">2.5.2 获取关节反馈速度</h3><p><code>GetActualJointSpeedsDegree(flag = 1 )</code>：获取关节反馈速度（deg/s）（实际速度）</p><ul><li>参数<ul><li><code>flag</code>：0-阻塞，1-非阻塞 默认1</li></ul></li><li>返回<ul><li>错误码</li><li><code>speed</code>=[j1,j2,j3,j4,j5,j6]</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">ret = robot.GetActualJointSpeedsDegree()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取关节反馈速度-deg/s&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h3 id="2-5-3-获取工具坐标系速度">2.5.3 获取工具坐标系速度</h3><p><strong>（1）TCP 指令合速度</strong></p><p><code>GetTargetTCPCompositeSpeed(flag = 1)</code>：获取 TCP 指令合速度（期望速度）</p><ul><li>参数<ul><li><code>flag</code>：0-阻塞，1-非阻塞 默认1</li></ul></li><li>返回<ul><li>错误码</li><li><code>[tcp_speed,ori_speed]</code>：tcp_speed 线性合速度，ori_speed 姿态合速度</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">ret = robot.GetTargetTCPCompositeSpeed()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取TCP指令合速度&quot;</span>, ret)</span><br></pre></td></tr></table></figure><p><strong>（2）TCP 反馈合速度</strong></p><p><code>GetActualTCPCompositeSpeed(flag = 1)</code>：获取TCP反馈合速度（实际速度）</p><ul><li>参数<ul><li><code>flag</code>：0-阻塞，1-非阻塞 默认1</li></ul></li><li>返回<ul><li>错误码</li><li><code>[tcp_speed,ori_speed]</code>：tcp_speed 线性合速度，ori_speed 姿态合速度</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">ret = robot.GetActualTCPCompositeSpeed()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取TCP反馈合速度&quot;</span>, ret)</span><br></pre></td></tr></table></figure><p><strong>（3）TCP 指令速度</strong></p><p><code>GetTargetTCPSpeed(flag = 1)</code>：获取 TCP 指令速度（期望速度）</p><ul><li>参数<ul><li><code>flag</code>：0-阻塞，1-非阻塞 默认1</li></ul></li><li>返回<ul><li>错误码</li><li><code>speed</code>：[x,y,z,rx,ry,rz]</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">ret = robot.GetTargetTCPSpeed()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取TCP指令速度&quot;</span>, ret)</span><br></pre></td></tr></table></figure><p><strong>（4）TCP 反馈速度</strong></p><p><code>GetActualTCPSpeed(flag = 1)</code>：获取 TCP 反馈速度</p><ul><li>参数<ul><li><code>flag</code>：0-阻塞，1-非阻塞 默认1</li></ul></li><li>返回<ul><li>错误码</li><li><code>speed</code>：[x,y,z,rx,ry,rz]</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">ret = robot.GetActualTCPSpeed()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取TCP反馈速度&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h3 id="2-5-4-获取工具位姿">2.5.4 获取工具位姿</h3><p><code>GetActualTCPPose(flag = 1)</code>：获取当前工具位姿</p><ul><li>参数<ul><li><code>flag</code>：0-阻塞，1-非阻塞 默认1</li></ul></li><li>返回<ul><li>错误码</li><li><code>tcp_pose</code>=[x,y,z,rx,ry,rz]</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">ret = robot.GetActualTCPPose()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取当前工具位姿&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h3 id="2-5-5-获取末端法兰位姿">2.5.5 获取末端法兰位姿</h3><p><code>GetActualToolFlangePose(flag = 1)</code>：获取当前末端法兰位姿</p><ul><li>参数<ul><li><code>flag</code>：0-阻塞，1-非阻塞 默认1</li></ul></li><li>返回<ul><li>错误码</li><li><code>flange_pose</code>=[x,y,z,rx,ry,rz]</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">ret = robot.GetActualToolFlangePose()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取当前末端法兰位姿&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h3 id="2-5-6-获取关节转矩">2.5.6 获取关节转矩</h3><p><code>GetJointTorques(flag = 1)</code>：获取当前关节转矩</p><ul><li>参数<ul><li><code>flag</code>：0-阻塞，1-非阻塞 默认 1</li></ul></li><li>返回<ul><li>错误码</li><li><code>torques</code>=[j1,j2,j3,j4,j5,j6]</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">ret = robot.GetJointTorques()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取当前关节转矩&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h3 id="2-5-7-获取关节软限位">2.5.7 获取关节软限位</h3><p><code>GetJointSoftLimitDeg(flag = 1)</code>：获取关节软限位角度</p><ul><li>参数<ul><li><code>flag</code>：0-阻塞，1-非阻塞 默认 1</li></ul></li><li>返回<ul><li>错误码</li><li><code>[j1min,j1max,j2min,j2max,j3min,j3max, j4min,j4max,j5min, j5max, j6min,j6max]</code>: 轴 1~ 轴 6 关节负限位与正限位，单位 [mm]</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">ret = robot.GetJointSoftLimitDeg()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取关节软限位角度&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h3 id="2-5-8-查询机器人运动是否完成">2.5.8 查询机器人运动是否完成</h3><p><code>GetRobotMotionDone()</code>：查询机器人运动是否完成</p><ul><li>参数</li><li>返回<ul><li>错误码</li><li><code>state</code>：0-未完成，1-完成</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">ret = robot.GetRobotMotionDone()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;查询机器人运动是否完成&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h3 id="2-5-9-获取-DH-参数">2.5.9 获取 DH 参数</h3><p><code>GetDHCompensation()</code>：获取 DH 补偿参数</p><ul><li>参数</li><li>返回<ul><li>错误码</li><li><code>[cmpstD1,cmpstA2,cmpstA3,cmpstD4,cmpstD5,cmpstD6]</code>：dhCompensation 机器人 DH 参数补偿值(mm)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">error = robot.GetDHCompensation()</span><br><span class="line"><span class="built_in">print</span>(error)</span><br></pre></td></tr></table></figure><h2 id="2-6-机器人运动学">2.6 机器人运动学</h2><h3 id="2-6-1-正运动学求解">2.6.1 正运动学求解</h3><p><code>GetForwardKin(joint_pos)</code>：正运动学，关节位置求解工具位姿</p><ul><li>参数<ul><li><code>joint_pos</code>:[j1,j2,j3,j4,j5,j6]:关节位置，单位[°]</li></ul></li><li>返回<ul><li>错误码</li><li><code>desc_pos</code>=[x,y,z,rx,ry,rz]</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">J1=[<span class="number">95.442</span>,-<span class="number">101.149</span>,-<span class="number">98.699</span>,-<span class="number">68.347</span>,<span class="number">90.580</span>,-<span class="number">47.174</span>]</span><br><span class="line">ret = robot.GetForwardKin(J1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;正运动学，关节位置求解工具位姿&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h3 id="2-6-2-逆运动学">2.6.2 逆运动学</h3><p><strong>（1）逆运动学求解</strong></p><p><code>GetInverseKin(type,desc_pos,config)</code>：逆运动学，笛卡尔位姿求解关节位置</p><ul><li>参数<ul><li><code>type</code>:0-绝对位姿(基坐标系)，1-相对位姿（基坐标系），2-相对位姿（工具坐标系）</li><li><code>desc_pose</code>:[x,y,z,rx,ry,rz],工具位姿，单位[mm][°]</li></ul></li><li>返回<ul><li>错误码</li><li><code>joint_pos</code>=[j1,j2,j3,j4,j5,j6]</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">J1=[<span class="number">95.442</span>,-<span class="number">101.149</span>,-<span class="number">98.699</span>,-<span class="number">68.347</span>,<span class="number">90.580</span>,-<span class="number">47.174</span>]</span><br><span class="line">P1=[<span class="number">75.414</span>,<span class="number">568.526</span>,<span class="number">338.135</span>,-<span class="number">178.348</span>,-<span class="number">0.930</span>,<span class="number">52.611</span>]</span><br><span class="line">ret = robot.GetInverseKin(<span class="number">0</span>,P1,config=-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;逆运动学，笛卡尔位姿求解关节位置&quot;</span>, ret)</span><br></pre></td></tr></table></figure><p><strong>（2）逆运动学求解（指定参考位置）</strong></p><p><code>GetInverseKinRef(type,desc_pos,joint_pos_ref)</code>：逆运动学，工具位姿求解关节位置，参考指定关节位置求解</p><ul><li>参数<ul><li><code>type</code>:0-绝对位姿(基坐标系)，1-相对位姿（基坐标系），2-相对位姿（工具坐标系）</li><li><code>desc_pos</code>：[x,y,z,rx,ry,rz]工具位姿，单位[mm][°]</li><li><code>joint_pos_ref</code>：[j1,j2,j3,j4,j5,j6]，关节参考位置，单位[°]</li></ul></li><li>返回<ul><li>错误码</li><li><code>joint_pos</code> =[j1,j2,j3,j4,j5,j6]</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">J1=[<span class="number">95.442</span>,-<span class="number">101.149</span>,-<span class="number">98.699</span>,-<span class="number">68.347</span>,<span class="number">90.580</span>,-<span class="number">47.174</span>]</span><br><span class="line">P1=[<span class="number">75.414</span>,<span class="number">568.526</span>,<span class="number">338.135</span>,-<span class="number">178.348</span>,-<span class="number">0.930</span>,<span class="number">52.611</span>]</span><br><span class="line">ret = robot.GetInverseKinRef(<span class="number">0</span>,P1,J1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;逆运动学，工具位姿求解关节位置，参考指定关节位置求解&quot;</span>, ret)</span><br></pre></td></tr></table></figure><p><strong>（3）逆运动学求解（判断是否有解）</strong></p><p><code>GetInverseKinHasSolution(type,desc_pos,joint_pos_ref)</code>：逆运动学，工具位姿求解关节位置 是否有解</p><ul><li>参数<ul><li><code>type</code>:0-绝对位姿(基坐标系)，1-相对位姿（基坐标系），2-相对位姿（工具坐标系）</li><li><code>desc_pos</code>：[x,y,z,rx,ry,rz]工具位姿，单位[mm][°]</li><li><code>joint_pos_ref</code>：[j1,j2,j3,j4,j5,j6]，关节参考位置，单位[°]</li></ul></li><li>返回<ul><li>错误码</li><li><code>result</code>：“True”-有解，“False”-无解</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">J1=[<span class="number">95.442</span>,-<span class="number">101.149</span>,-<span class="number">98.699</span>,-<span class="number">68.347</span>,<span class="number">90.580</span>,-<span class="number">47.174</span>]</span><br><span class="line">P1=[<span class="number">75.414</span>,<span class="number">568.526</span>,<span class="number">338.135</span>,-<span class="number">178.348</span>,-<span class="number">0.930</span>,<span class="number">52.611</span>]</span><br><span class="line">ret = robot.GetInverseKinHasSolution(<span class="number">0</span>,P1,J1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;逆运动学，工具位姿求解关节位置是否有解&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h2 id="2-7-夹爪配置">2.7 夹爪配置</h2><h3 id="2-7-1-夹爪配置">2.7.1 夹爪配置</h3><p><strong>（1）获取夹爪配置</strong></p><p><code>GetGripperConfig()</code>：获取夹爪配置</p><ul><li>参数</li><li>返回<ul><li>错误码</li><li><code>[number,company,device,softversion]</code>：number（夹爪编号，范围[1]）；company（夹爪厂商，1-Robotiq，2-慧灵，3-天机，4-大寰，5-知行）；device（设备号，Robotiq(0-2F-85系列)，慧灵(0-NK系列,1-Z-EFG-100)， 天机(0-TEG-110)，大寰(0-PGI-140)，知行(0-CTPM2F20)）; softvesion（软件版本号，暂不使用，默认为0）;</li></ul></li></ul><p><strong>（2）配置夹爪</strong></p><p><code>SetGripperConfig(company,device,softversion,bus)</code>：配置夹爪</p><ul><li>参数<ul><li><code>company</code>：夹爪厂商，1-Robotiq，2-慧灵，3-天机，4-大寰，5-知行；</li><li><code>device</code>：设备号，Robotiq(0-2F-85系列)，慧灵(0-NK系列,1-Z-EFG-100)，天机(0-TEG-110)，大寰(0-PGI-140)，知行(0-CTPM2F20)</li><li><code>softversion</code>：软件版本号，暂不使用，默认为0；</li><li><code>bus</code>：设备挂载末端总线位置，暂不使用，默认为0；</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><h3 id="2-7-2-夹爪控制">2.7.2 夹爪控制</h3><blockquote><p>测试发现若夹爪连接在机械臂上，控制盒集成的夹爪控制与机械臂本体伺服控制会存在程序阻塞，无法同时使用<br>考虑夹爪直接连接电脑，通过 RS485 控制机械臂。</p></blockquote><p><strong>（1）激活夹爪</strong></p><p><code>ActGripper(index,action)</code>：激活夹爪</p><ul><li>参数<ul><li><code>index</code>:夹爪编号；</li><li><code>action</code>:0-复位，1-激活</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><p><strong>（2）控制夹爪</strong></p><p><code>MoveGripper(index,pos,speed,force,maxtime,block)</code>：控制夹爪</p><ul><li>参数<ul><li><code>index</code>:夹爪编号；</li><li><code>pos</code>:位置百分比，范围[0~100]；</li><li><code>speed</code>:速度百分比，范围[0~100];</li><li><code>force</code>:力矩百分比，范围[0~100]；</li><li><code>maxtime</code>:最大等待时间，范围[0~30000]，单位[ms]；</li><li><code>block</code>:0-阻塞，1-非阻塞。</li></ul></li><li>返回<ul><li>错误码</li></ul></li></ul><p><strong>（3）获取夹爪运动状态</strong></p><p><code>GetGripperMotionDone()</code>：获取夹爪运动状态</p><ul><li>参数</li><li>返回<ul><li>错误码</li><li><code>[fault,status]</code>：fault（0-无错误，1-有错误），status（0-运动未完成，1-运动完成）</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fairino <span class="keyword">import</span> Robot</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 与机器人控制器建立连接，连接成功返回一个机器人对象</span></span><br><span class="line">robot = Robot.RPC(<span class="string">&#x27;192.168.58.2&#x27;</span>)</span><br><span class="line">desc_pos1=[-<span class="number">333.683</span>,-<span class="number">228.968</span>,<span class="number">404.329</span>,-<span class="number">179.138</span>,-<span class="number">0.781</span>,<span class="number">91.261</span>]</span><br><span class="line">desc_pos2=[-<span class="number">333.683</span>,-<span class="number">100.8</span>,<span class="number">404.329</span>,-<span class="number">179.138</span>,-<span class="number">0.781</span>,<span class="number">91.261</span>]</span><br><span class="line">zlength1 =<span class="number">10</span></span><br><span class="line">zlength2 =<span class="number">15</span></span><br><span class="line">zangle1 =<span class="number">10</span></span><br><span class="line">zangle2 =<span class="number">15</span></span><br><span class="line"><span class="comment">#测试外设指令</span></span><br><span class="line">ret = robot.SetGripperConfig(<span class="number">4</span>,<span class="number">0</span>)  <span class="comment">#配置夹爪</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;配置夹爪错误码&quot;</span>, ret)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">config = robot.GetGripperConfig()     <span class="comment">#获取夹爪配置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取夹爪配置&quot;</span>,config)</span><br><span class="line">error = robot.ActGripper(<span class="number">1</span>,<span class="number">0</span>)  <span class="comment">#激活夹爪</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;激活夹爪错误码&quot;</span>,error)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">error = robot.ActGripper(<span class="number">1</span>,<span class="number">1</span>)<span class="comment">#激活夹爪</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;激活夹爪错误码&quot;</span>,error)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">error = robot.MoveGripper(<span class="number">1</span>,<span class="number">100</span>,<span class="number">48</span>,<span class="number">46</span>,<span class="number">30000</span>,<span class="number">0</span>) <span class="comment">#控制夹爪</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;控制夹爪错误码&quot;</span>,error)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">error = robot.MoveGripper(<span class="number">1</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">30000</span>,<span class="number">0</span>) <span class="comment">#控制夹爪</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;控制夹爪错误码&quot;</span>,error)</span><br><span class="line">error = robot.GetGripperMotionDone() <span class="comment">#获取夹爪运动状态</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取夹爪运动状态错误码&quot;</span>,error)</span><br></pre></td></tr></table></figure><h1>三、大寰 AG95 夹爪使用</h1><h2 id="3-1-RS385-控制接口">3.1 RS385 控制接口</h2><h3 id="3-1-1-RS485-默认配置">3.1.1 RS485 默认配置</h3><table><thead><tr><th>参数</th><th>默认</th></tr></thead><tbody><tr><td>夹爪ID</td><td>1</td></tr><tr><td>波特率</td><td>115200</td></tr><tr><td>数据位</td><td>8</td></tr><tr><td>停止位</td><td>1</td></tr><tr><td>校验位</td><td>无</td></tr></tbody></table><h3 id="3-1-2-命令格式">3.1.2 命令格式</h3><p>以初始化指令 <code>01 06 01 00 00 01 49 F6</code> 为例：</p><table><thead><tr><th>地址码</th><th>功能码</th><th>寄存器地址</th><th>寄存器数据</th><th>CRC 校验码</th></tr></thead><tbody><tr><td>01</td><td>06</td><td>01 00</td><td>00 01</td><td>49 F6</td></tr></tbody></table><ul><li>地址码：表示夹爪的ID 号，默认是 1；</li><li>功能码：描述读写操作，03（读取寄存器），06（写入寄存器）；</li><li>寄存器地址：夹爪功能对应地址；</li><li>寄存器数据：写入数据到具体的寄存器地址；</li><li>CRC 校验码：根据前面的数据进行转换，参考 <a href="http://www.ip33.com/crc.html">http://www.ip33.com/crc.html</a></li></ul><h3 id="3-1-3-初始化夹爪">3.1.3 初始化夹爪</h3><p><strong>初始化</strong>：</p><p><code>01 06 01 00 00 01 49 F6</code>：回零位（运行到张开极限位置）<br><code>01 06 01 00 00 A5 48 4D</code>：重新标定+回零点（先关闭夹爪，再打开夹爪，记录总行程标定）</p><p><strong>含义</strong>：</p><ul><li><code>01</code>：夹爪编号</li><li><code>06</code>：写入寄存器</li><li><code>01 00</code>：夹爪初始化寄存器</li><li><code>00 01</code> / <code>00 A5</code>：初始化指令</li><li><code>49 F6</code> / <code>48 4D</code>：校验码</li></ul><p><strong>初始化状态反馈</strong>：获取是否进行了初始化</p><p>发送：<code>01 03 02 00 00 01 85 B2</code></p><ul><li><code>01</code>：夹爪编号</li><li><code>03</code>：读取寄存器</li><li><code>02 00</code>：初始化状态反馈寄存器</li><li><code>00 01</code>：初始化状态反馈指令</li><li><code>85 B2</code>：校验码</li></ul><p>返回：<code>01 03 02 00 00 B8 44</code></p><ul><li><code>00 00</code>：未初始化，如果是 1 则初始化成功，如果是 2 则初始化中。</li></ul><h3 id="3-1-3-夹爪位置控制">3.1.3 夹爪位置控制</h3><p><strong>设置位置</strong>：设置夹爪位置，可以写入 0-1000，代表开合程度百分比，对应 16 进制为 <code>00 00 - 03 E8</code></p><p><code>01 06 01 03 01 F4 78 21</code>：设置夹爪位置 500。</p><ul><li><code>01</code>：夹爪编号</li><li><code>06</code>：写入寄存器</li><li><code>01 03</code>：夹爪位置寄存器</li><li><code>01 F4</code>：设置夹爪位置为 500</li><li><code>78 21</code>：校验码</li></ul><p><strong>读取设定位置</strong>：读取设置的位置</p><p>发送：<code>01 03 01 03 00 01 75 F6</code></p><ul><li><code>01</code>：夹爪编号</li><li><code>03</code>：读取寄存器</li><li><code>01 03</code>：夹爪位置寄存器</li><li><code>00 01</code>：读取设定位置指令</li><li><code>75 F6</code>：校验码</li></ul><p>返回：<code>01 03 02 xx xx crc1 crc2</code></p><ul><li><code>xx xx</code>：16 进制夹爪位置，对应 0-1000 夹爪开合程度百分比</li></ul><p><strong>读取实时位置</strong>：读取夹爪实时位置</p><p>发送：<code>01 03 02 02 00 01 24 72</code></p><ul><li><code>01</code>：夹爪编号</li><li><code>03</code>：读取寄存器</li><li><code>02 02</code>：夹爪实时位置寄存器</li><li><code>00 01</code>：读取实时位置指令</li><li><code>24 72</code>：校验码</li></ul><p>返回：<code>01 03 02 xx xx crc1 crc2</code></p><ul><li><code>xx xx</code>：16 进制夹爪位置，对应 0-1000 夹爪开合程度百分比</li></ul><h3 id="3-1-4-夹爪状态反馈">3.1.4 夹爪状态反馈</h3><p><strong>获取夹爪运动状态</strong>：读取目前夹爪的状态</p><p>发送：<code>01 03 02 01 00 01 D4 72</code></p><ul><li><code>01</code>：夹爪编号</li><li><code>03</code>：读取寄存器</li><li><code>02 01</code>：夹爪状态寄存器</li><li><code>00 01</code>：读取夹爪状态指令</li><li><code>24 72</code>：校验码</li></ul><p>返回：<code>01 03 02 00 02 39 85</code></p><ul><li><code>00 02</code>：代表夹住物体</li></ul><blockquote><p>00：夹爪处于正在运动状态。<br>01：夹爪停止运动，且夹爪未检测到夹到物体。<br>02：夹爪停止运动，且夹爪检测到夹到物体。<br>03：夹爪检测到夹住物体后，发现物体掉落。</p></blockquote><h2 id="3-2-Ubuntu-控制夹爪">3.2 Ubuntu 控制夹爪</h2><h3 id="3-2-1-连接夹爪">3.2.1 连接夹爪</h3><p><strong>（1）查看夹爪串口</strong></p><p>命令行输入 <code>ls -l /dev/ttyUSB*</code>，此时如果没有插入其它 usb 设备，则看不到输出</p><p>将 RS485 转 USB 连接至电脑，重新执行 <code>ls -l /dev/ttyUSB*</code> 命令，可以看到多出了一个 <code>/dev/ttyUSB0</code>，该设备即为夹爪的串口。</p><p><strong>（2）固定 ttyUSB 编号</strong></p><p>首先命令行输入 <code>lsusb</code> 查看设备 ID，可以拔插一次观察多出来的那一行就是夹爪设备，例如我的设备 ID 是  <code>0403:6001</code>，分别代表 <code>idVendor:idProduct</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bus 001 Device 005: ID 0403:6001 Future Technology Devices International, Ltd FT232 Serial (UART) IC</span><br></pre></td></tr></table></figure><p>然后创建并编辑配置文件：<code>sudo vim /etc/udev/rules.d/usb.rules</code>，输入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KERNEL==&quot;ttyUSB*&quot;, ATTRS&#123;idVendor&#125;==&quot;0403&quot;, ATTRS&#123;idProduct&#125;==&quot;6001&quot;, MODE:=&quot;0777&quot;, SYMLINK+=&quot;dh_gripper&quot;</span><br></pre></td></tr></table></figure><p>其中</p><ul><li><code>KERNEL</code>：不修改</li><li><code>ATTRS&#123;idVendor&#125;</code>：填写 ID 冒号前的部分</li><li><code>ATTRS&#123;idProduct&#125;</code>：填写 ID 冒号后的部分</li><li><code>MODE</code>：默认设置为 0777 即可，可读可写可执行</li><li><code>SYMLINK</code>：自定义，也就是想要将 ttyUSB0 改成什么一个固定的名字</li></ul><p>重启 <code>udev</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service udev reload</span><br><span class="line">service udev restart</span><br></pre></td></tr></table></figure><p>重新插拔设备，然后 <code>ls /dev/</code>，就可以看到自己设置的端口名出现。</p><h3 id="3-2-2-Python-串口控制">3.2.2 Python 串口控制</h3><p><strong>（1）安装依赖</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyserial</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">FR5 是与 UR5 构型相似的 6 自由度机械臂，本文介绍其 Python SDK  的基本运动控制方法。</summary>
    
    
    
    <category term="机器人" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="实验设备" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E5%AE%9E%E9%AA%8C%E8%AE%BE%E5%A4%87/"/>
    
    
    <category term="机器人" scheme="https://www.mahaofei.com/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="设备使用" scheme="https://www.mahaofei.com/tags/%E8%AE%BE%E5%A4%87%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python识别图片中文字和数字_easyocr</title>
    <link href="https://www.mahaofei.com/post/easyocr.html"/>
    <id>https://www.mahaofei.com/post/easyocr.html</id>
    <published>2024-04-09T08:43:19.000Z</published>
    <updated>2024-04-09T08:43:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>[!abstract]<br>项目需要实现一个识别图片中文字、数字的小功能，因此找了比较好用的开源库 easyocr，本文介绍其使用方法。</p></blockquote><h2 id="EasyOCR-介绍">EasyOCR 介绍</h2><p>EasyOCR 是一个可以直接使用的开源项目，目前在 Github 上已经有 20k+ 的 star，支持 80 多种语言的识别，精度非常高。</p><p>项目地址：<a href="https://github.com/JaidedAI/EasyOCR">https://github.com/JaidedAI/EasyOCR</a></p><h2 id="EasyOCR-安装">EasyOCR 安装</h2><p>注意：本实验默认在 Ubuntu 上进行测试，Windows 理论上可以同样操作。</p><p><strong>（1）环境搭建</strong></p><p>为了避免 python 包混乱冲突，一般先创建一个 conda 环境，参考<a href="https://www.mahaofei.com/post/8543c9d.html">此文章</a>配置 anaconda。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n easyocr python=3.9</span><br></pre></td></tr></table></figure><p><strong>（2）安装 PyTorch</strong></p><p>EasyOCR 依赖于 PyTorch，因此需要在环境中安装 PyTorch，此处以 1.12 版本为例，其他版本的安装命令可以从<a href="https://pytorch.org/get-started/previous-versions/">此处</a>查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate easyocr</span><br><span class="line">conda install pytorch==1.12.1 torchvision==0.13.1 torchaudio==0.12.1 cudatoolkit=11.6 -c pytorch -c conda-forge</span><br></pre></td></tr></table></figure><p><strong>（3）安装 EasyOCR</strong></p><p>安装 EasyOCR 非常简单，执行以下命令即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install easyocr</span><br></pre></td></tr></table></figure><h2 id="EasyOCR-基本使用">EasyOCR 基本使用</h2><p>Easy 使用示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 库</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> easyocr</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 获取图像，既可以是在线图像，也可以是本地图像</span></span><br><span class="line"><span class="comment"># IMAGE_PATH = &#x27;https://img.mahaofei.com/img/202401011439226.png&#x27;</span></span><br><span class="line">image_path = <span class="string">&#x27;./src/digital_recognition/image/digit/2000-1400-Trans.png&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 识别文字</span></span><br><span class="line"><span class="comment"># reader = easyocr.Reader([&#x27;ch_sim&#x27;,&#x27;en&#x27;]) # 要识别的语言，ch_sim是简体中文，en是英文</span></span><br><span class="line">reader = easyocr.Reader([<span class="string">&#x27;en&#x27;</span>])</span><br><span class="line">result = reader.readtext(image_path)     <span class="comment"># 也可以传入opencv的图像对象(numpy数组)，detail为0表示只返回识别的文字，为1表示返回识别的文字和位置</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 绘制文字矩形框和文字</span></span><br><span class="line">image = cv2.imread(image_path)</span><br><span class="line"><span class="keyword">for</span> detection <span class="keyword">in</span> result:</span><br><span class="line">    <span class="comment"># 提取文字框坐标和识别结果</span></span><br><span class="line">    (bbox, text, prob) = detection</span><br><span class="line">    <span class="comment"># 将浮点数坐标转换为整数</span></span><br><span class="line">    bbox = np.array(bbox).astype(<span class="built_in">int</span>)</span><br><span class="line">    <span class="comment"># 在图像上绘制矩形框</span></span><br><span class="line">    cv2.rectangle(image, (bbox[<span class="number">0</span>][<span class="number">0</span>], bbox[<span class="number">0</span>][<span class="number">1</span>]), (bbox[<span class="number">2</span>][<span class="number">0</span>], bbox[<span class="number">2</span>][<span class="number">1</span>]), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 在矩形框左上角绘制文字和置信度</span></span><br><span class="line">    text_position = (bbox[<span class="number">0</span>][<span class="number">0</span>], bbox[<span class="number">0</span>][<span class="number">1</span>] - <span class="number">20</span>)</span><br><span class="line">    confidence_position = (bbox[<span class="number">0</span>][<span class="number">0</span>], bbox[<span class="number">0</span>][<span class="number">1</span>] - <span class="number">5</span>)</span><br><span class="line">    cv2.putText(image, text, text_position, cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">    cv2.putText(image, <span class="string">f&quot;Confidence: <span class="subst">&#123;prob:<span class="number">.2</span>f&#125;</span>&quot;</span>, confidence_position, cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图像</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;OCR Result&quot;</span>, image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/202404101030620.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">项目需要实现一个识别图片中文字、数字的小功能，因此找了比较好用的开源库easyocr，本文介绍其使用方法。</summary>
    
    
    
    <category term="程序基础" scheme="https://www.mahaofei.com/categories/%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/"/>
    
    <category term="编程语言" scheme="https://www.mahaofei.com/categories/%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Python" scheme="https://www.mahaofei.com/categories/%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
    <category term="Python" scheme="https://www.mahaofei.com/tags/Python/"/>
    
    <category term="文字识别" scheme="https://www.mahaofei.com/tags/%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>【设备使用】omega.7主手配置与使用方法</title>
    <link href="https://www.mahaofei.com/post/omega7.html"/>
    <id>https://www.mahaofei.com/post/omega7.html</id>
    <published>2024-03-20T10:06:21.000Z</published>
    <updated>2024-03-20T10:06:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>实验环境：<br>Ubuntu 20.04<br>omega.7</p></blockquote><h2 id="🛠️-Linux-下主手配置">🛠️ Linux 下主手配置</h2><h3 id="1-SDK-下载">1. SDK 下载</h3><p>官网(<a href="https://forcedimension.com/software/sdk">https://forcedimension.com/software/sdk</a>)下载对应版本 sdk，并解压。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf sdk-3.17.0-linux-x86_64-gcc.tar.gz</span><br></pre></td></tr></table></figure><ul><li><code>\bin</code>：包含示例的可执行程序和运行 omega.x 所需的二进制文件</li><li><code>\examples</code>：包含了一些演示程序</li><li><code>\doc</code>：所有的说明文档和注意事项</li><li><code>\lib,\include</code>：编译使用 Force Dimension SDK 所需要的库</li></ul><h3 id="2-驱动安装">2. 驱动安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libusb-1.0</span><br></pre></td></tr></table></figure><h3 id="3-坐标系">3. 坐标系</h3><p>平移坐标系如图所示，实际的原点是整个设备的中心，是一个虚拟的点。</p><p><img src="https://img.mahaofei.com/img/202403201333916.png" alt="image.png"></p><p>手腕的旋转方向如图所示，能够实现绕三个轴的旋转。</p><p><img src="https://img.mahaofei.com/img/202403201333135.png" alt="image.png"></p><p>手指处可以返回夹爪角度，若是右手操作涉及的 omega.7 设备，如上图所示，则返回一个正角度。</p><p>下方圆盘上的三个孔位由左到右依次是</p><ul><li>力按钮</li><li>力 LED</li><li>状态 LED（灭代表系统关闭、亮代表系统准备就绪、快速闪烁代表系统需要标定、缓慢闪烁代表腕部需要手动标定）</li></ul><h3 id="4-标定">4. 标定</h3><p>设备每次开机都需要校准一次，来保证末端执行器的准确和重复定位。</p><p>位置校准：校准时需要将<strong>校准杆放在校准孔中</strong>（圆盘中心处的空位），设备检测到达校准位置后自行校准，状态 LED 会停止闪烁。</p><p>姿态校准：为了校准手腕关节，必须将手腕处的<strong>三个旋转轴</strong>和<strong>夹爪控制轴</strong>移动到各自的<strong>行程终点</strong>，设备检测到后会自行完成校准。</p><p>自动校准的过程中不要触摸设备，校准完成后 LED 停止闪烁时再移动设备。</p><h3 id="5-HapticDesk-可视化测试">5. HapticDesk 可视化测试</h3><p>打开 Omega.7 电源，并完成标定。</p><p>进入 <code>sdk-3.17.0\bin</code> 目录，使用 <code>sudo ./HapticDesk</code> 命令启动可视化窗口，操作 Omega.7 主手移动，可以看到界面上方的位置、转角、夹爪转角随之变化。</p><p><img src="https://img.mahaofei.com/img/202403201403201.png" alt="image.png"></p><h2 id="💻-相关程序">💻 相关程序</h2><h3 id="1-配置环境">1. 配置环境</h3><p><strong>创建 conda 环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n omega python=3.8</span><br><span class="line">conda activate omega</span><br><span class="line">python3 -m pip install forcedimension-core numpy</span><br></pre></td></tr></table></figure><p><strong>安装库</strong></p><p>下载最新版本的 SDK，进入 sdk 目录，并进行手动安装（注意版本号是否正确）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd sdk-3.17.0</span><br><span class="line"></span><br><span class="line">sudo cp include/* /usr/local/include</span><br><span class="line">sudo cp lib/release/*/* /usr/local/lib</span><br><span class="line">sudo chmod 755 /usr/local/lib/libdhd.so.3.17.0</span><br><span class="line">sudo chmod 755 /usr/local/lib/libdrd.so.3.17.0</span><br><span class="line">sudo chmod 755 /usr/local/lib/libdhd.a</span><br><span class="line">sudo chmod 755 /usr/local/lib/libdrd.a</span><br><span class="line">sudo ln -s /usr/local/lib/libdhd.so.3.17.0 /usr/local/lib/libdhd.so</span><br><span class="line">sudo ln -s /usr/local/lib/libdrd.so.3.17.0 /usr/local/lib/libdrd.so</span><br></pre></td></tr></table></figure><blockquote><p>如果需要卸载，使用类似的方法</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /usr/local/include/dhdc.h</span><br><span class="line">sudo rm /usr/local/include/drdc.h</span><br><span class="line">sudo rm /usr/local/lib/libdhd.a</span><br><span class="line">sudo rm /usr/local/lib/libdhd.so.3.17.0</span><br><span class="line">sudo rm /usr/local/lib/libdhd.so</span><br><span class="line">sudo rm /usr/local/lib/libdrd.a</span><br><span class="line">sudo rm /usr/local/lib/libdrd.so.3.17.0</span><br><span class="line">sudo rm /usr/local/lib/libdrd.so</span><br></pre></td></tr></table></figure><p><strong>配置权限，主要是为了让普通用户访问 usb 设备，用于 ros 和 python 控制</strong></p><p>在 <code>/etc/udev/rules.d/</code> 下为设备添加 udev 规则。创建一个名为 <code>40-haptic-device-udev.rules</code> 的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/udev/rules.d/40-haptic-device-udev.rules</span><br></pre></td></tr></table></figure><p>然后粘贴以下模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TTR&#123;idVendor&#125;==&quot;&quot;, ATTR&#123;idProduct&#125;==&quot;&quot;, MODE=&quot;0666&quot;, SYMLINK+=&quot;haptic_device_%k&quot;, GROUP=&quot;plugdev&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ACTION==&quot;add&quot;, ENV&#123;DEVTYPE&#125;==&quot;usb_device&quot;, ATTR&#123;idVendor&#125;==&quot;&quot;, ATTR&#123;idProduct&#125;==&quot;&quot;, MODE=&quot;0664&quot;, GROUP=&quot;plugdev&quot;</span><br></pre></td></tr></table></figure><p>使用 <code>lsusb</code> 可以查看供应商 ID 和产品 ID，格式为 <code>idVendor:idProduct</code></p><ul><li>使用设备名称（不带空格）替换掉 <code>SYMLINK+=&quot;haptic_device_%k&quot;</code> 中的 <code>haptic_device</code></li><li>在 <code>ATTR&#123;idVendor&#125;</code> 和 <code>ATTR&#123;idProduct&#125;</code> 的双引号中填写自己的供应商 ID 和产品 ID</li></ul><p>修改完成后的示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ATTR&#123;idVendor&#125;==&quot;1451&quot;, ATTR&#123;idProduct&#125;==&quot;0301&quot;, MODE=&quot;0666&quot;, SYMLINK+=&quot;haptic_device_%k&quot;, GROUP=&quot;plugdev&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ACTION==&quot;add&quot;, ENV&#123;DEVTYPE&#125;==&quot;usb_device&quot;, ATTR&#123;idVendor&#125;==&quot;1451&quot;, ATTR&#123;idProduct&#125;==&quot;0301&quot;, MODE=&quot;0664&quot;, GROUP=&quot;plugdev&quot;</span><br></pre></td></tr></table></figure><p>执行以下命令重新加载 udev 规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo udevadm control --reload-rules &amp;&amp; sudo udevadm trigger</span><br></pre></td></tr></table></figure><h3 id="2-基本程序">2. 基本程序</h3><p>使用下面程序打印主手的位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import forcedimension_core.containers as containers</span><br><span class="line">import forcedimension_core.dhd as dhd</span><br><span class="line"></span><br><span class="line">dhd.open()</span><br><span class="line">pos = containers.Vec3()</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Equivalent to: dhd.getPosition(out=pos)</span></span><br><span class="line">dhd.direct.getPosition(out=pos)</span><br><span class="line"></span><br><span class="line">print(pos)</span><br></pre></td></tr></table></figure><h3 id="3-主手控制-mujoco-机器人">3. 主手控制 mujoco 机器人</h3><figure class="highlight python"><figcaption><span>fold</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> gym <span class="keyword">import</span> error, spaces</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> diffusion_policy.env.gym_envs</span><br><span class="line"><span class="keyword">from</span> diffusion_policy.env.gym_envs.utils <span class="keyword">import</span> ctrl_set_action, mocap_set_action</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> mujoco_py</span><br><span class="line"><span class="keyword">from</span> diffusion_policy.env.gym_envs <span class="keyword">import</span> rotations</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy.spatial.transform <span class="keyword">import</span> Rotation <span class="keyword">as</span> R</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> forcedimension_core.containers <span class="keyword">as</span> containers</span><br><span class="line"><span class="keyword">import</span> forcedimension_core.dhd <span class="keyword">as</span> dhd</span><br><span class="line"><span class="keyword">import</span> forcedimension_core.drd <span class="keyword">as</span> drd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="comment">#################### 初始化设备 ####################</span></span><br><span class="line"><span class="comment"># 打开设备</span></span><br><span class="line">dhd.<span class="built_in">open</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局变量，位置、旋转矩阵、夹爪角度、线速度、角速度</span></span><br><span class="line">pos = np.zeros(<span class="number">3</span>)</span><br><span class="line">matrix = np.zeros((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">gripper_pointer = ctypes.pointer(ctypes.c_double(<span class="number">0.0</span>))</span><br><span class="line">linear_velocity = np.zeros(<span class="number">3</span>)</span><br><span class="line">angular_velocity = np.zeros(<span class="number">3</span>)</span><br><span class="line">euler = np.zeros(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 力控配置</span></span><br><span class="line">devicePosition = np.zeros(<span class="number">3</span>)</span><br><span class="line">deviceRotation = np.zeros((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">deviceLinearVelocity = np.zeros(<span class="number">3</span>)</span><br><span class="line">deviceAngularVelocity = np.zeros(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">flagHoldPosition = <span class="literal">True</span></span><br><span class="line">flagHoldPositionReady = <span class="literal">True</span></span><br><span class="line">holdPosition = np.zeros(<span class="number">3</span>)</span><br><span class="line">holdRotation = np.zeros((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">last_display_time = dhd.os_independent.getTime()</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 连续控制</span></span><br><span class="line"><span class="comment"># pos_continus = np.zeros(3)</span></span><br><span class="line"><span class="comment"># pos_result = np.zeros(3)</span></span><br><span class="line"><span class="comment"># flag_continus = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Drd 初始化</span></span><br><span class="line"><span class="keyword">if</span> drd.<span class="built_in">open</span>() &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无法打开设备: &quot;</span> + drd.error())</span><br><span class="line">    dhd.os_independent.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> drd.isInitialized() <span class="keyword">and</span> drd.autoInit() &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无法初始化设备: &quot;</span> + drd.error())</span><br><span class="line">    dhd.os_independent.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> drd.start() &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无法启动设备: &quot;</span> + drd.error())</span><br><span class="line">    dhd.os_independent.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> drd.moveToPos(pos, block=<span class="literal">True</span>) &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无法移动到位置: &quot;</span> + drd.error())</span><br><span class="line">    dhd.os_independent.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> drd.moveToRot(euler, block=<span class="literal">True</span>) &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无法移动到旋转矩阵: &quot;</span> + drd.error())</span><br><span class="line">    dhd.os_independent.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> drd.stop(<span class="literal">True</span>) &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无法停止设备: &quot;</span> + drd.error())</span><br><span class="line">    dhd.os_independent.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录相邻动作</span></span><br><span class="line">last_action = np.array([<span class="number">1.17</span>, <span class="number">0.75</span>, <span class="number">0.70</span>, -np.pi, <span class="number">0.</span>, -np.pi/<span class="number">2</span>, <span class="number">0.</span>])</span><br><span class="line">action_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#################### 常用函数 ####################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quaternion2euler</span>(<span class="params">quaternion</span>):</span><br><span class="line">    r = R.from_quat(quaternion)</span><br><span class="line">    euler = r.as_euler(<span class="string">&#x27;xyz&#x27;</span>, degrees=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> euler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">euler2quaternion</span>(<span class="params">euler</span>):</span><br><span class="line">    r = R.from_euler(<span class="string">&#x27;xyz&#x27;</span>, euler, degrees=<span class="literal">True</span>)</span><br><span class="line">    quaternion = r.as_quat()</span><br><span class="line">    <span class="keyword">return</span> quaternion</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_env = gym.make(<span class="string">&#x27;PutInDrawer-v0&#x27;</span>)</span><br><span class="line">test_env.reset()</span><br><span class="line"><span class="comment"># obs = test_env.reset()</span></span><br><span class="line"><span class="comment"># episode_acs = []</span></span><br><span class="line"><span class="comment"># episode_obs = []</span></span><br><span class="line"><span class="comment"># episode_info = []</span></span><br><span class="line"><span class="comment"># episode_obs.append(obs)    # 存储初始观察值</span></span><br><span class="line"><span class="comment"># idx = 0</span></span><br><span class="line"><span class="comment"># time_step = 0   # 记录总的时间步数</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="comment"># viewer2 = mujoco_py.MjRenderContextOffscreen(test_env.sim, 0)</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">######################### 读取设备状态 #########################</span></span><br><span class="line">    <span class="comment"># 获取位置、旋转矩阵</span></span><br><span class="line">    dhd.getPositionAndOrientationFrame(pos, matrix)</span><br><span class="line">    <span class="comment"># 获取夹爪角度</span></span><br><span class="line">    dhd.getGripperAngleDeg(gripper_pointer)</span><br><span class="line">    gripper = gripper_pointer.contents.value</span><br><span class="line">    <span class="comment"># 获取线速度</span></span><br><span class="line">    dhd.getLinearVelocity(linear_velocity)</span><br><span class="line">    <span class="comment"># 获取角速度</span></span><br><span class="line">    dhd.getAngularVelocityDeg(angular_velocity)</span><br><span class="line"></span><br><span class="line">    <span class="comment">######################### 控制设备位置 #########################</span></span><br><span class="line">    <span class="comment"># 设置设备状态</span></span><br><span class="line">    devicePosition = pos</span><br><span class="line">    deviceRotation = matrix</span><br><span class="line">    deviceLinearVelocity = linear_velocity</span><br><span class="line">    deviceAngularVelocity = angular_velocity</span><br><span class="line">    deviceForce = np.zeros(<span class="number">3</span>)</span><br><span class="line">    deviceTorque = np.zeros(<span class="number">3</span>)</span><br><span class="line">    deviceGripperForce = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置刚度和阻尼</span></span><br><span class="line">    Kp = <span class="number">2000.0</span></span><br><span class="line">    Kv = <span class="number">10.0</span></span><br><span class="line">    Kr = <span class="number">5.0</span></span><br><span class="line">    Kw = <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保持设备位置</span></span><br><span class="line">    <span class="keyword">if</span> flagHoldPosition:</span><br><span class="line">        <span class="keyword">if</span> flagHoldPositionReady:</span><br><span class="line">            <span class="comment"># 计算反作用力</span></span><br><span class="line">            force = -Kp * (devicePosition - holdPosition) - Kv * deviceLinearVelocity</span><br><span class="line">            <span class="comment"># 计算反作用力矩</span></span><br><span class="line">            deltaRotation = np.transpose(deviceRotation) @ holdRotation</span><br><span class="line">            axis, angle = np.zeros(<span class="number">3</span>), <span class="number">0.0</span></span><br><span class="line">            <span class="comment"># 计算旋转轴和角度</span></span><br><span class="line">            angle = np.arccos((np.trace(deltaRotation) - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> angle &gt; <span class="number">1e-6</span>:</span><br><span class="line">                axis = np.array([deltaRotation[<span class="number">2</span>, <span class="number">1</span>] - deltaRotation[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">                                 deltaRotation[<span class="number">0</span>, <span class="number">2</span>] - deltaRotation[<span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">                                 deltaRotation[<span class="number">1</span>, <span class="number">0</span>] - deltaRotation[<span class="number">0</span>, <span class="number">1</span>]]) / (<span class="number">2</span> * np.sin(angle))</span><br><span class="line">            torque = deviceRotation @ ((Kr * angle) * axis) - Kw * deviceAngularVelocity</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 加上所有力</span></span><br><span class="line">            deviceForce = deviceForce + force</span><br><span class="line">            deviceTorque = deviceTorque + torque</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            holdPosition = devicePosition</span><br><span class="line">            holdRotation = deviceRotation</span><br><span class="line">            flagHoldPositionReady = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置设备力</span></span><br><span class="line">    MaxTorque = <span class="number">0.3</span></span><br><span class="line">    <span class="keyword">if</span> np.linalg.norm(deviceTorque) &gt; MaxTorque:</span><br><span class="line">        deviceTorque = MaxTorque * deviceTorque / np.linalg.norm(deviceTorque)</span><br><span class="line">    <span class="comment"># dhd.setForceAndTorqueAndGripperForce(deviceForce, deviceTorque, deviceGripperForce)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dhd.setForceAndTorqueAndGripperForce(np.zeros(<span class="number">3</span>), np.zeros(<span class="number">3</span>), <span class="number">0.0</span>) &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无法设置力和力矩: &quot;</span> + dhd.error())</span><br><span class="line">        dhd.os_independent.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">######################### 键盘控制 #########################</span></span><br><span class="line">    <span class="keyword">if</span> dhd.os_independent.kbHit():</span><br><span class="line">        keyboard = dhd.os_independent.kbGet()</span><br><span class="line">        <span class="keyword">if</span> keyboard == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> keyboard == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 周期打印设备状态，并刷新输出</span></span><br><span class="line">    device_time = dhd.os_independent.getTime()</span><br><span class="line">    <span class="keyword">if</span> device_time - last_display_time &gt; <span class="number">0.1</span>:</span><br><span class="line">        last_display_time = device_time</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Pos (%.3f %.3f %.3f) m | Gripper %.3f deg | Rot (%.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f) | Force (%.3f %.3f %.3f) N | Freq %.2f kHz \r&quot;</span> </span><br><span class="line">              % (pos[<span class="number">0</span>], pos[<span class="number">1</span>], pos[<span class="number">2</span>], gripper, matrix[<span class="number">0</span>, <span class="number">0</span>], matrix[<span class="number">0</span>, <span class="number">1</span>], matrix[<span class="number">0</span>, <span class="number">2</span>], matrix[<span class="number">1</span>, <span class="number">0</span>], matrix[<span class="number">1</span>, <span class="number">1</span>], matrix[<span class="number">1</span>, <span class="number">2</span>], matrix[<span class="number">2</span>, <span class="number">0</span>], matrix[<span class="number">2</span>, <span class="number">1</span>], matrix[<span class="number">2</span>, <span class="number">2</span>], deviceForce[<span class="number">0</span>], deviceForce[<span class="number">1</span>], deviceForce[<span class="number">2</span>], dhd.getComFreq()), end=<span class="string">&quot;\r&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># action = np.array([0, 0., 0, 0., 0., 0., 0.])</span></span><br><span class="line">    <span class="comment"># print(action)</span></span><br><span class="line">    action_pos = pos</span><br><span class="line">    action_matrix = matrix</span><br><span class="line">    action_gripper = gripper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将主手的运动范围映射到mujoco机器人工作空间</span></span><br><span class="line">    <span class="comment"># x从[-0.05,0.05]映射到[0.8,1.5]</span></span><br><span class="line">    action_pos[<span class="number">0</span>] = pos[<span class="number">0</span>]*<span class="number">7</span>    <span class="comment"># + 1.15</span></span><br><span class="line">    <span class="comment"># y从[-0.1,0.1]映射到[0,1.2]</span></span><br><span class="line">    action_pos[<span class="number">1</span>] = pos[<span class="number">1</span>]*<span class="number">6</span>    <span class="comment"># + 0.6</span></span><br><span class="line">    <span class="comment"># z从[-0.05,0.1]映射到[0.4,1.0]</span></span><br><span class="line">    action_pos[<span class="number">2</span>] = pos[<span class="number">2</span>]*<span class="number">4</span>    <span class="comment"># + 0.6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将旋转矩阵转换为四元数</span></span><br><span class="line">    action_matrix *= <span class="number">0.05</span></span><br><span class="line">    <span class="comment"># 绕x轴旋转180度的旋转矩阵</span></span><br><span class="line">    matrix_rotation_x_180 = np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>]])</span><br><span class="line">    <span class="comment"># 绕z轴旋转-90度的旋转矩阵</span></span><br><span class="line">    matrix_rotation_z_n90 = np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">    <span class="comment"># 旋转矩阵乘法</span></span><br><span class="line">    action_matrix = np.dot(action_matrix, matrix_rotation_x_180)</span><br><span class="line">    action_matrix = np.dot(action_matrix, matrix_rotation_z_n90)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    action_quat = rotations.mat2quat(action_matrix)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将夹爪角度从[0,30](0为夹爪关闭)，归一化到[0,1](0为夹爪打开)</span></span><br><span class="line">    action_gripper = <span class="built_in">abs</span>((action_gripper - <span class="number">30.0</span>) / <span class="number">30.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># test_env.sim.step()             # 执行一步仿真，模拟环境中物体的运动和交互</span></span><br><span class="line">    action = np.concatenate([action_pos, action_quat, [action_gripper]])</span><br><span class="line">    test_env.step(action)             <span class="comment"># 执行一步仿真，模拟环境中物体的运动和交互</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># gym 渲染</span></span><br><span class="line">    test_env.render(mode=<span class="string">&quot;human&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取action</span></span><br><span class="line">    action_list.append(action)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 将动作列表转换为numpy数组并保存为文件</span></span><br><span class="line">action_list = np.array(action_list)</span><br><span class="line"><span class="comment"># np.save(&quot;data/put_in_drawer/habtic_actions.npy&quot;, action_list)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> drd.close() &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无法关闭设备: &quot;</span> + drd.error())</span><br><span class="line">    dhd.os_independent.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n设备已关闭&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Omega.7虚拟触觉力反馈操作主手的配置和基本程序使用</summary>
    
    
    
    <category term="机器人" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="实验设备" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E5%AE%9E%E9%AA%8C%E8%AE%BE%E5%A4%87/"/>
    
    
    <category term="机器人" scheme="https://www.mahaofei.com/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="设备使用" scheme="https://www.mahaofei.com/tags/%E8%AE%BE%E5%A4%87%E4%BD%BF%E7%94%A8/"/>
    
    <category term="模仿" scheme="https://www.mahaofei.com/tags/%E6%A8%A1%E4%BB%BF/"/>
    
  </entry>
  
  <entry>
    <title>【论文笔记】ACT 使用低成本硬件的双手操作模仿学习</title>
    <link href="https://www.mahaofei.com/post/act.html"/>
    <id>https://www.mahaofei.com/post/act.html</id>
    <published>2024-01-05T02:24:38.000Z</published>
    <updated>2024-01-05T02:24:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1>一、论文笔记</h1><blockquote><p><strong>标题</strong>：Learning Fine-Grained Bimanual Manipulation with Low-Cost Hardware<br><strong>中文标题</strong>：使用低成本硬件学习细粒度双手操作<br><strong>作者团队</strong>：Stanford University<br><strong>期刊会议</strong>：arXiv<br><strong>时间</strong>：2023<br><strong>代码</strong>：<a href="https://github.com/tonyzhaozh/act">https://github.com/tonyzhaozh/act</a></p></blockquote><h2 id="1-1-目标问题-8">1.1 目标问题</h2><p>对于机器人而言，学习实现一些精细操作是较为困难的，因为涉及精确的力控以及闭环视觉反馈，这有需要先进的机器人，精确的传感器和准确的标定。</p><p><strong>能否使用低成本、不精确的硬件来执行这些精细的操作任务？</strong></p><h2 id="1-2-方法-8">1.2 方法</h2><p>本文提出了一种简单的算法，ACT (Action Chunking with Transformers)。</p><p>首先使用 ALOHA 收集人类演示的引导机器人的关节位置，并将其作为动作，观测结果由机器人的当前关节位置和相机的输入图像组成。然后训练 ACT 根据当前观测预测未来的动作序列，也就是下一个时间步中双臂的目标关节位置。</p><p><img src="https://img.mahaofei.com/img/202401051026095.png" alt="image.png"></p><p><strong>（1）动作分块和时间集成</strong></p><p>为了利用像素到动作的策略，通过对抗模仿学习解决复合错误。本文使用了动作分块的思想，将多个动作分组在一起平作为一个单元执行，从而使他们更有效的存储和执行。</p><p>本文将动作块的大小固定为 k ，每 k 步，智能体接收一个观测结果，生成接下来的 k 个操作，并按顺序执行这些操作，因此任务的有效范围被减小了 k 倍。</p><p>但是这种方法得到的动作块可能不是最理想的动作，因此可能导致机器人的运动不稳定。为了提高平滑型，本文在每个时间步内执行策略，得到不同的动作块相互重叠，因此会有多个预测动作，本文对这些预测进行指数加权 $w_i=exp(-m*i)$，其中 $w_0$ 是最旧的动作的权重，$m$ 越小则合并的速度越快。</p><p><strong>（2）人类数据建模</strong></p><p>人类可以从不同个轨迹来解决同一个任务，尤其是在不要求精度的区域，人类的动作会非常随机，因此策略重点关注高精度区域也是非常重要的。</p><p>本文将策略训练为条件变分自动编码器 CVAE 来生成当前观测为条件的动作序列。</p><ul><li>CVAE 编码器：输入当前观测（机器人本体状态）和动作序列，编码后得到变量 z 分布，将其参数化为高斯分布，输出该分布的均值和方差</li><li>CVAE 解码器：以 z 和当前观测（图像+机器人本体状态）为条件，预测动作序列。</li></ul><h1>二、代码复现 (act)</h1><blockquote><p>该部分参考论文原仓库：<a href="https://github.com/tonyzhaozh/act">https://github.com/tonyzhaozh/act</a></p></blockquote><h2 id="2-1-环境准备">2.1 环境准备</h2><p>创建虚拟环境并安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">conda create -n aloha python=3.8.10</span><br><span class="line">conda activate aloha</span><br><span class="line">pip install torchvision</span><br><span class="line">pip install torch</span><br><span class="line">pip install pyquaternion</span><br><span class="line">pip install pyyaml</span><br><span class="line">pip install rospkg</span><br><span class="line">pip install pexpect</span><br><span class="line">pip install mujoco</span><br><span class="line">pip install dm_control</span><br><span class="line">pip install opencv-python</span><br><span class="line">pip install matplotlib</span><br><span class="line">pip install einops</span><br><span class="line">pip install packaging</span><br><span class="line">pip install h5py</span><br><span class="line">pip install ipython</span><br><span class="line">cd act/detr &amp;&amp; pip install -e .</span><br></pre></td></tr></table></figure><h2 id="2-2-数据收集-2">2.2 数据收集</h2><p>首先激活虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate aloha</span><br></pre></td></tr></table></figure><p>进入到代码根目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;path to act&gt;</span><br></pre></td></tr></table></figure><p>创建两个目录，分别用于保存数据集和训练好后的模型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p datasets/sim_transfer_cube_scripted</span><br><span class="line">mkdir checkpoints</span><br></pre></td></tr></table></figure><p>以 <code>sim_transfer_cube_scripted</code> 任务为例，使用下面的脚本产生 50 个 episodes 的数据（可以添加 <code>--onscreen_render</code> 来实现实时渲染）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 record_sim_episodes.py --task_name sim_transfer_cube_scripted --dataset_dir datasets/sim_transfer_cube_scripted/ --num_episodes 50</span><br></pre></td></tr></table></figure><p>产生的 50 个数据会以 50 个 hdf5 文件的格式保存在文件夹中，要想可视化这些数据集，可以使用下面的命令，以可视化第一个数据为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 visualize_episodes.py --dataset_dir datasets/sim_transfer_cube_scripted/ --episode_idx 0</span><br></pre></td></tr></table></figure><h2 id="2-3-训练-3">2.3 训练</h2><p>首先需要修改 <code>constants.py</code> 中的 DATA_DIR 参数，将其改为自己的数据集文件夹名称：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATA_DIR = <span class="string">&#x27;/home/mahaofei/Programs/Imitation/act/datasets&#x27;</span></span><br></pre></td></tr></table></figure><p>开始训练：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 imitate_episodes.py --task_name sim_transfer_cube_scripted --ckpt_dir checkpoints/ --policy_class ACT --kl_weight 10 --chunk_size 100 --hidden_dim 512 --batch_size 8 --dim_feedforward 3200 --num_epochs 2000  --lr 1e-5 --seed 0</span><br></pre></td></tr></table></figure><p>如果 ACT 策略在一个 episode 中是不稳定的或者是停止不变的，那么就训练更长时间，在平台期过后成功率和轨迹平滑性都会得到提高。</p><h2 id="2-4-评估">2.4 评估</h2><p>还是和训练使用同一个脚本，只不过需要加入 <code>--eval</code>，该程序会把评估过程中的视频保存到 <code>checkpoints</code> 文件夹中，也可以添加 <code>--onscreen_render</code> 在评估是实时渲染。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 imitate_episodes.py --task_name sim_transfer_cube_scripted --ckpt_dir checkpoints/ --policy_class ACT --kl_weight 10 --chunk_size 100 --hidden_dim 512 --batch_size 8 --dim_feedforward 3200 --num_epochs 2000  --lr 1e-5 --seed 0 --eval</span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/202401051053987.png" alt="image.png"></p><p>经测试，实际成功率并不高，在抓取时总会出现错位，且传递过程很难成功。</p><p>~~暂未知原因，等待后续检查。~~已查明原因，需使用特定版本的 mujoco，参考 <a href="https://github.com/MarkFzp/act-plus-plus/issues/12">issue #12</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mojoco==2.3.7 dm_env==1.6 dm_control==1.0.14</span><br></pre></td></tr></table></figure><h1>三、代码复现 (act-plus-plus)</h1><p>最近发现作者在一篇新的论文中 Mobile ALOHA Learning Bimanual Mobile Manipulation with Low-Cost Whole-Body Teleoperation，对 ACT 算法进行了更新，基本复现流程一致，部分进行了修改。</p><blockquote><p>该部分参考论文原仓库：<a href="https://github.com/MarkFzp/act-plus-plus">https://github.com/MarkFzp/act-plus-plus</a></p></blockquote><h2 id="2-1-环境准备-2">2.1 环境准备</h2><p>下载源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/MarkFzp/act-plus-plus</span><br></pre></td></tr></table></figure><p>创建虚拟环境并安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">conda create -n act python=3.8.10</span><br><span class="line">conda activate act</span><br><span class="line">pip install torchvision</span><br><span class="line">pip install torch</span><br><span class="line">pip install pyquaternion</span><br><span class="line">pip install pyyaml</span><br><span class="line">pip install rospkg</span><br><span class="line">pip install pexpect</span><br><span class="line">pip install mujoco==2.3.7</span><br><span class="line">pip install dm_control==1.0.14</span><br><span class="line">pip install dm_env==1.6</span><br><span class="line">pip install opencv-python</span><br><span class="line">pip install matplotlib</span><br><span class="line">pip install einops</span><br><span class="line">pip install packaging</span><br><span class="line">pip install h5py</span><br><span class="line">pip install ipython</span><br><span class="line">cd act-plus-plus/detr &amp;&amp; pip install -e .</span><br></pre></td></tr></table></figure><p>实际上没有提到但却调用的库还有</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pip install diffusers</span><br><span class="line">pip install wandb</span><br><span class="line"></span><br><span class="line">git clone git@github.com:ARISE-Initiative/robomimic.git</span><br><span class="line">cd robomimic</span><br><span class="line">git checkout diffusion-policy-mg</span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure><p>修改 <code>constants.py</code> 中的 DATA_DIR 参数，将其改为自己的数据集文件夹名称：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATA_DIR = <span class="string">&#x27;/home/mahaofei/Programs/Imitation/act/datasets&#x27;</span></span><br></pre></td></tr></table></figure><p>在 <a href="https://wandb.ai/">wandb 官网</a>创建账号，并创建一个项目，将 <code>imitate_episodes.py</code> 的第 148 行修改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wandb.init(project=<span class="string">&quot;项目名称&quot;</span>, reinit=<span class="literal">True</span>, entity=<span class="string">&quot;wandb用户名&quot;</span>, name=expr_name)</span><br></pre></td></tr></table></figure><p>截至 2023-01-05 开源的代码还存在一些问题，需要修改 <code>detr/models/detr_vae.py</code> 的第 285 行为 <code>encoder = build_encoder(args)</code>，参考 <a href="https://github.com/MarkFzp/act-plus-plus/issues/3#issuecomment-1876588075">issue</a></p><h2 id="2-2-数据收集-3">2.2 数据收集</h2><p>首先激活虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate act</span><br></pre></td></tr></table></figure><p>进入到代码根目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;path to act&gt;</span><br></pre></td></tr></table></figure><p>创建两个目录，分别用于保存数据集和训练好后的模型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p datasets/sim_transfer_cube_scripted</span><br><span class="line">mkdir checkpoints</span><br></pre></td></tr></table></figure><p><strong>收集数据</strong>：以 <code>sim_transfer_cube_scripted</code> 任务为例，使用下面的脚本产生 50 个 episodes 的数据（可以添加 <code>--onscreen_render</code> 来实现实时渲染）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 record_sim_episodes.py --task_name sim_transfer_cube_scripted --dataset_dir datasets/sim_transfer_cube_scripted/ --num_episodes 50</span><br></pre></td></tr></table></figure><p><strong>可视化收集的数据</strong>：产生的 50 个数据会以 50 个 hdf5 文件的格式保存在文件夹中，要想可视化这些数据集，可以使用下面的命令，以可视化第一个数据为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 visualize_episodes.py --dataset_dir datasets/sim_transfer_cube_scripted/ --episode_idx 0</span><br></pre></td></tr></table></figure><h2 id="2-3-训练-4">2.3 训练</h2><p><strong>开始训练</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 imitate_episodes.py --task_name sim_transfer_cube_scripted --ckpt_dir checkpoints/ --policy_class ACT --kl_weight 10 --chunk_size 100 --hidden_dim 512 --batch_size 4 --dim_feedforward 3200 --num_steps 2000  --lr 1e-5 --seed 0</span><br></pre></td></tr></table></figure><p>如果爆显存了(CUDA out of memory)，可以减小 <code>batch_size</code>。</p><p>如果 ACT 策略在一个 episode 中是不稳定的或者是停止不变的，那么就训练更长时间，在平台期过后成功率和轨迹平滑性都会得到提高。</p><h2 id="2-4-评估-2">2.4 评估</h2><p>还是和训练使用同一个脚本，只不过需要加入 <code>--eval</code>，该程序会把评估过程中的视频保存到 <code>checkpoints</code> 文件夹中，也可以添加 <code>--onscreen_render</code> 在评估是实时渲染。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 imitate_episodes.py --task_name sim_transfer_cube_scripted --ckpt_dir checkpoints/ --policy_class ACT --kl_weight 10 --chunk_size 100 --hidden_dim 512 --batch_size 8 --dim_feedforward 3200 --num_steps 10000  --lr 1e-5 --seed 0 --eval --onscreen_render</span><br></pre></td></tr></table></figure><h1>三、代码解析</h1><h2 id="3-1-训练数据格式">3.1 训练数据格式</h2><p>ACT 的训练数据生成为多个 hdf5 文件，每个文件对应一个演示数据，每个 hdf5 文件的结构如下：</p><ul><li>episode_1.hdf5<ul><li><strong>action</strong>: dateset 数据，存储机器人的动作，shape 为 (400, 14)，包括末端执行器的位置和四元数，归一化的夹爪位置（0 关闭，1 打开）<br>[left_arm_qpos (6), left_gripper_positions (1), right_arm_qpos (6), right_gripper_positions (1),]，</li><li><strong>observations</strong>: group 组，存储观测数据<ul><li><strong>images</strong>: gropu 组，存储图像数据<ul><li><strong>left_wrist</strong>：dataset 数据，存储左侧机器人末端相机图像数据，shape 为 (400, 480, 640, 3)，即长度 400，每个图像为 (480, 640, 3) 大小。</li><li><strong>right_wrist</strong>：dataset 数据，存储右侧机器人末端相机图像数据，shape 为 (400, 480, 640, 3)，即长度 400，每个图像为 (480, 640, 3) 大小。</li><li><strong>top</strong>：dataset 数据，存储顶部相机图像数据，shape 为 (400, 480, 640, 3)，即长度 400，每个图像为 (480, 640, 3) 大小。</li></ul></li><li><strong>qpos</strong>：dateset 数据，shape 为 (400, 14)，包括绝对关节位置，归一化的夹爪位置（0 关闭，1 打开）<br>[left_arm_qpos (6), left_gripper_position (1), right_arm_qpos (6), right_gripper_qpos (1)]</li><li><strong>qvel</strong>：dateset 数据，shape 为 (400, 14)，包括绝对关节速度（rad），归一化的夹爪速度（正数为正在打开，负数为正在关闭）<br>[left_arm_qvel (6), left_gripper_velocity (1), right_arm_qvel (6), right_gripper_qvel (1)]</li></ul></li></ul></li></ul><h2 id="3-2-替换-Gym-环境">3.2 替换 Gym 环境</h2><p><strong>（1）补充依赖</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install gym==0.12.1</span><br><span class="line">pip install &quot;cython&lt;3&quot;</span><br><span class="line">pip install perlin_noise</span><br></pre></td></tr></table></figure><p><strong>（2）编写脚本生成与 ACT 训练数据格式相同的 HDF5 数据</strong></p><p><strong>（3）进行训练</strong></p>]]></content>
    
    
    <summary type="html">斯坦福大学开发的双手模仿学习系统，包括一整套软硬件系统，实现低成本不精确硬件完成精细操作任务。</summary>
    
    
    
    <category term="机器人" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="机器人学习" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="模仿学习" scheme="https://www.mahaofei.com/tags/%E6%A8%A1%E4%BB%BF%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="机器人" scheme="https://www.mahaofei.com/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>HDF5数据文件格式</title>
    <link href="https://www.mahaofei.com/post/hdf5.html"/>
    <id>https://www.mahaofei.com/post/hdf5.html</id>
    <published>2024-01-01T06:02:57.000Z</published>
    <updated>2024-01-01T06:02:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>[!abstract]<br>HDF5数据文件格式的简单介绍与基本使用方法。</p></blockquote><h1>1 HDF5 格式简介</h1><h2 id="1-1-什么是-hdf5-文件">1.1 什么是 hdf5 文件</h2><p>HDF5是一种常见的跨平台数据储存文件，可以存储不同类型的图像和数据，并且可以在不同类型的机器上传输，同时还有统一处理这种文件格式的函数库。</p><p>可以把HDF5文件想象成一个容器，这个容器由多个不同类型的数据对象组成。数据对象可以是任意类型，例如：图片、表格、图像，甚至文档（PDF、Excel）。</p><h2 id="1-2-hdf5-文件结构">1.2 hdf5 文件结构</h2><p>HDF5 文件一般以 <code>.h5</code> 或 <code>.hdf5</code> 作为后缀名，其文件结构包括两部分：<code>Groups</code> 和 <code>Datasets</code>。</p><ul><li><strong>Group</strong>: 类似于文件夹，负责管理数据对象</li><li><strong>Datasets</strong>: 类似于 numpy 中的数组 array，一个数据集由元数据（metadata）和数据本身（data）组成<ul><li><strong>Metadata</strong>: 元数据<ul><li><strong>Datatype</strong>: 数据类型</li><li><strong>Dataspace</strong>: 原始数据的秩和维度</li><li><strong>Properties</strong>: 该数据集的分块存储以及压缩情况<ul><li><strong>Chunked</strong>:</li><li><strong>Chunked &amp; Compressed</strong>:</li></ul></li><li><strong>Attributes</strong>: 为该数据的其它自定义属性</li></ul></li><li><strong>Data Values</strong>:</li></ul></li></ul><p><strong>（1）Group 组</strong></p><p>组负责管理数据对象。每个HDF5文件含有一个根组，根组包含其他组或者链接到其他文件的对象。组和组的成员与文件和文件夹类似，HDF5中对象也可以使用路径来表示：</p><ul><li><code>/</code> 代表根组</li><li><code>/a</code> 代表根组下的 <code>a</code> 成员</li><li><code>/a/b</code> 代表组 <code>a</code> 下的一个成员，<code>a</code> 是根组 <code>/</code> 下的成员</li></ul><p><strong>（2）Datasets 数据集</strong></p><p>一个数据集由元数据（metadata）和数据本身（data）组成。</p><p><img src="https://img.mahaofei.com/img/202401011439226.png" alt="image.png"></p><p>其中的 <code>Metadata</code> 包括一下几个部分：数据类型（datatype）、数据空间（dataspace）、性质（property）、属性（attribute）。</p><p><strong>（3）Datatype 数据类型</strong></p><p>数据类型描述数据集中元素的数据类型，例如 <code>float</code>。</p><ul><li>内置数据类型：包括标准数据类型和原生数据类型</li><li>衍生数据类型：例如符合数据类型（16位整型、1个字符、一个2x3x2的浮点数组组合而成）</li></ul><p><img src="https://img.mahaofei.com/img/202401011453368.png" alt="image.png"></p><p><strong>（4）Dataspace数据空间</strong></p><p>描述数据集内部数据元素（data element）的分布情况：</p><ul><li>Rank：表示数据集维度的个数（例如下图中数据维度个数为2，即2维数组）</li><li>Dimensions：数据空间的维度（数据空间的维度为5x3）<ul><li>NULL：代表数据集内没有任何数据元素</li><li>标量：代表只有一个元素</li><li>向量：代表数据集是一个数组</li></ul></li></ul><p>数据空间的维度可以是固定的，也可以是不固定的。如果是不固定的，代表该数据集的大小是可变的（例如，可扩展的数据集）。</p><p><img src="https://img.mahaofei.com/img/202401011454062.png" alt="image.png"></p><p><strong>（5）Properties 性质</strong></p><p>HDF5包含很多默认的性质，可以是用<code>HDF5 Property List API</code>来修改这些性质。</p><p><strong>（6）Attribute 属性</strong></p><p>属性包含一个名称（name）和一个值（value），是对HDF5对象的一些额外描述。通常都是一些很小的、用户自定义的元数据。</p><h1>二、Python 操作HDF5文件</h1><p><strong>（1）使用 <code>h5py</code> 包</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> h5py</span><br></pre></td></tr></table></figure><p><strong>（2）创建 <code>hdf5</code> 文件：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 hdf5文件</span></span><br><span class="line">f = h5py.File(<span class="string">&quot;h5py_example.hdf5&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在根目录`/` 下创建两个组</span></span><br><span class="line">g1 = f.create_group(<span class="string">&quot;bar1&quot;</span>)</span><br><span class="line">g2 = f.create_group(<span class="string">&quot;bar2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在根目录 `/` 下创建一个数据集(4x4的数组)</span></span><br><span class="line">d = f.create_dataset(<span class="string">&quot;dset&quot;</span>, data=np.arange(<span class="number">16</span>).reshape([<span class="number">4</span>, <span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为数据集添加两个属性</span></span><br><span class="line">d.attrs[<span class="string">&quot;myAttr1&quot;</span>] = [<span class="number">100</span>, <span class="number">200</span>]</span><br><span class="line">d.attrs[<span class="string">&quot;myAttr2&quot;</span>] = <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 `bar1` 组下创建一个组和一个数据集</span></span><br><span class="line">c1 = g1.create_group(<span class="string">&quot;car1&quot;</span>)</span><br><span class="line">d1 = g1.create_dataset(<span class="string">&quot;dset1&quot;</span>, data=np.arange(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 `bar2` 组下创建一个组和一个数据集</span></span><br><span class="line">c2 = g2.create_group(<span class="string">&quot;car2&quot;</span>)</span><br><span class="line">d2 = g2.create_dataset(<span class="string">&quot;dset2&quot;</span>, data=np.arange(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>最后得到的 <code>hdf5</code> 文件结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+-- &#x27;/&#x27;</span><br><span class="line">|   +--group &quot;bar1&quot;</span><br><span class="line">|   |   +-- group &quot;car1&quot;</span><br><span class="line">|   |   |   +-- None</span><br><span class="line">|   |   |   </span><br><span class="line">|   |   +-- dataset &quot;dset1&quot;</span><br><span class="line">|   |</span><br><span class="line">|   +-- group &quot;bar2&quot;</span><br><span class="line">|   |   +-- group &quot;car2&quot;</span><br><span class="line">|   |   |   +-- None</span><br><span class="line">|   |   |</span><br><span class="line">|   |   +-- dataset &quot;dset2&quot;</span><br><span class="line">|   |   </span><br><span class="line">|   +-- dataset &quot;dset&quot;</span><br><span class="line">|   |   +-- attribute &quot;myAttr1&quot;</span><br><span class="line">|   |   +-- attribute &quot;myAttr2&quot;</span><br><span class="line">|   |   </span><br><span class="line">|   </span><br></pre></td></tr></table></figure><p><strong>（3）读取 <code>hdf5</code> 文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取 hdf5 文件</span></span><br><span class="line">f = h5py.File(<span class="string">&quot;h5py_example.hdf5&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印 `/` 下所有的组和数据集的 keys</span></span><br><span class="line"><span class="built_in">print</span>(f.filename, <span class="string">&quot;:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>([key <span class="keyword">for</span> key <span class="keyword">in</span> f.keys()], <span class="string">&quot;\n&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 `/` 下的数据集 `dset`</span></span><br><span class="line">d = f[<span class="string">&quot;dset&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(d.name, <span class="string">&quot;:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(d[:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印 `dset` 数据集的属性</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d.attrs.keys():</span><br><span class="line"><span class="built_in">print</span>(key, <span class="string">&quot;:&quot;</span>, d.attrs[key])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取组`bar1`</span></span><br><span class="line">g = f[<span class="string">&quot;bar1&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印 `bar1` 下所有的组和数据集的 keys</span></span><br><span class="line"><span class="built_in">print</span>([key <span class="keyword">for</span> key <span class="keyword">in</span> g.keys()])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三种方式打印 `dset1` 的数据</span></span><br><span class="line"><span class="built_in">print</span>(f[<span class="string">&quot;/bar1/dset1&quot;</span>][:])   <span class="comment"># 绝对路径</span></span><br><span class="line"><span class="built_in">print</span>(f[<span class="string">&quot;bar1&quot;</span>][<span class="string">&quot;dset1&quot;</span>][:]) <span class="comment"># 相对路径：file[][]</span></span><br><span class="line"><span class="built_in">print</span>(g[<span class="string">&#x27;dset1&#x27;</span>][:])         <span class="comment"># 相对路径：g[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><blockquote><p>参考：</p><ol><li><a href="https://www.hdfgroup.org/solutions/hdf5/">HDF Group</a></li><li><a href="https://zhuanlan.zhihu.com/p/656178708">仙棠生信. HDF5简介. 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/104145585">NoNo721. HDF5 数据文件简介. 知乎</a></li></ol></blockquote>]]></content>
    
    
    <summary type="html">HDF5数据文件格式的简单介绍与基本使用方法。</summary>
    
    
    
    <category term="机器学习" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="强化学习" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="模仿学习" scheme="https://www.mahaofei.com/tags/%E6%A8%A1%E4%BB%BF%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="强化学习" scheme="https://www.mahaofei.com/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数据" scheme="https://www.mahaofei.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>【仿真实验】robomimic项目复现</title>
    <link href="https://www.mahaofei.com/post/robomimic.html"/>
    <id>https://www.mahaofei.com/post/robomimic.html</id>
    <published>2023-12-27T02:31:36.000Z</published>
    <updated>2023-12-27T02:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>robomimic 是一个用于机器人从演示学习的框架，该项目提供了一系列机器人操作的演示数据和离线学习算法，可以让人们对任务和算法进行标准化测试。</p><p>本文测试的版本为 robomimic v0.3</p><h1>一、安装与环境搭建</h1><p>在安装之前确保运行 Linux 系统，并安装有 conda。</p><h2 id="1-1-安装-robomimic">1.1 安装 robomimic</h2><p><strong>（1）创建并激活虚拟环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n robomimic python=3.8.0 -y</span><br><span class="line">conda activate robomimic</span><br></pre></td></tr></table></figure><p><strong>（2）安装Pytorch</strong></p><p>其中的 pytorch 版本和 torchvision 版本官方说可以修改，暂未测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch==2.0.0 torchvision==0.15.1 -c pytorch</span><br></pre></td></tr></table></figure><p><strong>（3）安装 robomimic</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;你想保存robomimic代码的位置&gt;</span><br><span class="line">git clone https://github.com/ARISE-Initiative/robomimic.git</span><br><span class="line">cd robomimic</span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure><h2 id="1-2-安装模拟器">1.2 安装模拟器</h2><p><strong>（1）robosuite</strong></p><p>运行大多数 robomimic 示例和发布的数据集需要使用 robosuite 模拟器，安装方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;你想保存robosuite代码的位置&gt;</span><br><span class="line">git clone https://github.com/ARISE-Initiative/robosuite.git</span><br><span class="line">cd robosuite</span><br><span class="line">git checkout v1.4.1</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure><p><strong>（2）D4RL</strong></p><p>D4RL也提供了标准化的训练环境和数据集，安装方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Farama-Foundation/d4rl.git</span><br><span class="line">cd d4rl</span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure><h2 id="1-3-安装测试">1.3 安装测试</h2><p><strong>简单测试：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;robomimic代码安装位置&gt;</span><br><span class="line">python examples/train_bc_rnn.py --debug</span><br></pre></td></tr></table></figure><blockquote><p>[!question]- 问题：<code>AttributeError: module 'mujoco_py' has no attribute 'builder'</code><br>目前我的解决方法如下：</p><ol><li>安装 mujoco-210，可参考<a href="https://github.com/HaofeiMa/E05_Robotiq-2f-85#quick-start">3(3) Prepare the mujoco environment</a></li><li>安装 mujoco-py：<code>pip install mujoco-py</code></li><li>安装 Cython：<code>pip install &quot;cython&lt;3&quot;</code></li></ol></blockquote><blockquote><p>[!question]- 问题：<code>Error compiling Cython file</code><br>解决方法如下：</p><ol><li><code>pip install &quot;cython&lt;3&quot;</code></li></ol></blockquote><blockquote><p>[!question]- 问题：<code>EGL_NOT_INITIALIZED</code><br>解决方法如下：</p><ol><li>替换<code>robosuite/robosuite/renderers/context/egl_context.py</code>的155行<code>self.free()</code>为<code>pass</code></li><li>注释掉<code>robosuite/robosuite/utils/binding_utils.py</code>的199行<code>self.gl_ctx.free()</code></li></ol></blockquote><p><strong>全面测试：</strong></p><p>运行一个调试环境，以确保robomimic安装正确：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;robomimic代码安装位置&gt;/test</span><br><span class="line">bash test.sh</span><br></pre></td></tr></table></figure><p>运行过程可能持续几分钟，命令行会出现很多passed，说明没有问题，中间如果出现和EGL有关的问题，可以先不用管，EGL是用于没有显示器的server版服务器进行渲染的时候使用的。</p><h1>二、实验复现</h1><h2 id="2-1-论文结果复现">2.1 论文结果复现</h2><p><strong>（1）数据集下载</strong></p><p>这里下载了 <code>tool_hang</code> 场景进行了测试，其它可用的场景参考<a href="https://robomimic.github.io/docs/datasets/robomimic_v0.1.html">官方文档</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;robomimic代码安装位置&gt;/robomimic/scripts</span><br><span class="line">python download_datasets.py --tasks tool_hang</span><br></pre></td></tr></table></figure><p><strong>（2）生成配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python generate_paper_configs.py --output_dir &lt;想要保存试验结果的绝对路径&gt;</span><br></pre></td></tr></table></figure><p>生成的配置文件默认在<code>robomimic/exps/paper</code>路径下，可以在<code>core.sh</code>文件中复制命令进行训练测试。</p><p><strong>（3）执行训练</strong></p><p>在<code>core.sh</code>中找到想要测试的命令，执行命令例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python /home/mahaofei/Programs/Imitation/RoboMimic/robomimic/robomimic/scripts/train.py --config /home/mahaofei/Programs/Imitation/RoboMimic/robomimic/robomimic/exps/paper/core/tool_hang/ph/low_dim/bc.json</span><br></pre></td></tr></table></figure><p>训练生成的可视化视频默认在</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/tmp/experiment_results/core/bc/tool_hang/ph/low_dim/trained_models/core_bc_tool_hang_ph_low_dim/20231227161534/videos/ToolHang_epoch_100.mp4</span><br></pre></td></tr></table></figure><h2 id="2-2-数据集分析">2.2 数据集分析</h2><p><strong>（1）官方数据 hdf5 内容说明</strong></p><p>官方对每一项任务提供了两种类型的数据集：<code>image</code> 和 <code>low_dim</code>，但两种数据结构基本相同：</p><ul><li>data (group)<ul><li>total (attribute): 数据集中的 state-action 样本数量</li><li>env_args (attribute): 一个 json 字符串，包含环境的 metadata 和用于收集数据的相关参数，包含三个keys<ul><li>env_name: 要创建的环境或任务名称</li><li>env_type: robomimic 支持的环境类型之一</li><li>env_kwargs: 要传递到 env_name 的关键字参数的字典</li></ul></li><li>demo_0 (group): 第一个轨迹的组<ul><li>num_samples (attribute): 该轨迹中的 state-action 样本数</li><li>model_file (attribute): 对应 mujoco 模型的 xml 字符串，仅适用于 robosuite 数据集</li><li>states (dataset): 展开的 mujoco 状态，按时间排序，shape(N,D)，其中 N 是轨迹的长度，D 是状态向量的维度，对于非 robosuite 数据集，应该为空。</li><li>actions (dataset): 环境动作，按时间排序，shape(N,A)，其中 N 是轨迹的长度，A 是动作空间维度。</li><li>rewards (datasets): 完成信号，如果当前动作对应的状态代表 eposide 应该结束了，则为1</li><li>obs (group): 存储 observation 的键的组，每个键都是一个 dataset<ul><li>obs_key_1 (dataset): 第一个 observation key，该数据集名称和形状可能会不同</li><li>…</li></ul></li><li>next_obs (group): 下一个 observation 的组<ul><li>obs_key_1 (dataset): 第一个 observation key</li><li>…</li></ul></li></ul></li><li>demo_1 (group): 第二个轨迹的组</li><li>…</li></ul></li><li>mask (group): 存在于包含 filter keys 的数据集中<ul><li>filter_key_1: 第一个 filter key，例如列表[“demo_0”, “demo_19”, “demo_35”]</li></ul></li></ul><p><strong>（2）下载 raw、low_dim、image 三种格式的数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;你想保存数据集的位置&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载原始数据和 low_dim 数据</span></span><br><span class="line">wget http://downloads.cs.stanford.edu/downloads/rt_benchmark/tool_hang/ph/demo_v141.hdf5</span><br><span class="line">wget http://downloads.cs.stanford.edu/downloads/rt_benchmark/tool_hang/ph/low_dim_v141.hdf5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">cd robomimic/robomimic/scripts</span><br><span class="line">python download_datasets.py --tasks &lt;任务名称&gt; --dataset_types all --hdf5_types all --download_dir &lt;数据保存路径&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">转换得到 image 数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意，如果训练image数据，需要修改对应json文件中crop_height和crop_width为76</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意，转换后数据文件可能在 10GB 左右，注意磁盘空间</span></span><br><span class="line">python dataset_states_to_obs.py --dataset=&lt;原始数据的路径&gt; --output_name=image_v141.hdf5  --done_mode 2 --camera_names agentview robot0_eye_in_hand sideview --camera_height 84 --camera_width 84</span><br></pre></td></tr></table></figure><p>下载 <code>image</code> 格式数据，使用 <code>download_datasets.py</code> 下载会提示无 url，从 raw 数据转换 image 在训练时会提示图片格式错误。经查找，在 <a href="https://robomimic.github.io/docs/v0.2/datasets/robomimic_v0.1.html">v2.0 文档</a>中提供了 image 格式数据，如有需要请从此处下载。</p><p>例如 robomimic 的 tool_hang 环境的 <code>image</code> 类型数据集的  <code>demo_0</code> 中内容如下：</p><ul><li><strong>actions</strong>: shape (n, 7)，n 为轨迹长度，7为动作维度</li><li><strong>dones</strong>: shape (n, )，n 为轨迹长度</li><li><strong>obs</strong><ul><li><strong>agentview_image</strong>: shape (n, 256, 256, 3)，agent 视角图像，分别对应(n, H, W, C)，n 为轨迹长度，H 为图像高，W 为宽，C 为图像通道数，所有图像需为 np.uint8 类型</li><li><strong>object</strong>: shape (n, 44)，n 为轨迹长度，三个物体 base, frame, tool 的位置，姿态，相对机械臂末端的位置姿态(pos3, quat4, to_eef_pos3, to_eef_quat4)，共计 3x14 个值，以及 frame_is_assembled 与 tool_on_frame 两个布尔值</li><li><strong>robot0_eef_pos</strong>: shape (n, 3)，机器人末端位置</li><li><strong>robot0_eef_quat</strong>: shape (n, 4)，机器人末端姿态四元数</li><li><strong>robot0_eef_vel_ang</strong>: shape (n, 3)，机器人末端角速度</li><li><strong>robot0_eef_vel_lin</strong>: shape (n, 3)，机器人末端线速度</li><li><strong>robot0_eye_in_hand_image</strong>: shape (n, 256, 256, 3)，机器人末端相机图像</li><li><strong>robot0_gripper_qpos</strong>: shape (n, 2)，末端夹爪动作状态，左右两侧</li><li><strong>robot0_gripper_qvel</strong>: shape (n, 2)，末端夹爪动作速度，左右两侧</li><li><strong>robot0_joint_pos</strong>: shape (n, 7)，机器人各关节转角</li><li><strong>robot0_joint_pos_cos</strong>: shape (n, 7)，机器人各关节转角 cos 值</li><li><strong>robot0_joint_pos_sin</strong>: shape (n, 7)，机器人各关节转角 sin 值</li><li><strong>robot0_joint_vel</strong>: shape (n, 7)，机器人各关节速度</li><li><strong>sideview_image</strong>: shape (n, 256, 256, 3)，侧方位相机图像</li></ul></li><li><strong>next_obs</strong><ul><li>同上</li></ul></li><li><strong>rewards</strong>: shape (n, )，n 为轨迹长度</li><li><strong>states</strong>: shape (n, 58)，n 为轨迹长度，58 是状态向量的维度，对于非 robosuite 数据集，应该为空</li></ul><p>而 <code>low_dim</code> 类型的数据集的中内容与 <code>image</code> 基本相同，只是 obs 中少了所有的 image。</p><p><strong>（3）数据集可视化</strong></p><p>使用 <code>playback_dataset.py</code> 脚本查看数据集轨迹。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python playback_dataset.py --dataset &lt;path/to/.hdf5&gt; --video_path &lt;path/to/.mp4&gt; --n 5</span><br></pre></td></tr></table></figure><h1>三、自定义</h1><h2 id="3-1-生成自定义数据集">3.1 生成自定义数据集</h2><p>该项目中收集人类演示数据的脚本为 <code>robosuite/robosuite/scripts/collect_human_demonstrations.py</code>，其中可以指定环境，指定所使用的机器人，控制单臂还是双臂，用于收集演示数据的相机等等。</p><p>但是这些都是 robomimic 所提供的，如果我想要使用自己的机器人模型，在自定义环境中记录任务数据，则需要修改的较多，因此考虑在自己的 mujoco 环境中按照前文分析的 hdf5 数据格式直接生成数据。</p><blockquote><p>参考链接：</p><ol><li><a href="https://robomimic.github.io/docs/">Robotmimic 官方文档 (robomimic documentation)</a></li></ol></blockquote>]]></content>
    
    
    <summary type="html">robomimic 是一个用于机器人从演示学习的框架，该项目提供了一系列机器人操作的演示数据和离线学习算法，可以让人们对任务和算法进行标准化测试。</summary>
    
    
    
    <category term="机器人" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="机器人学习" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="模仿学习" scheme="https://www.mahaofei.com/tags/%E6%A8%A1%E4%BB%BF%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="机器人" scheme="https://www.mahaofei.com/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>【课程笔记】Stanford CS25 V2 - Robotics and Imitation Learning</title>
    <link href="https://www.mahaofei.com/post/standford-cs25.html"/>
    <id>https://www.mahaofei.com/post/standford-cs25.html</id>
    <published>2023-12-24T05:54:05.000Z</published>
    <updated>2023-12-24T05:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Video Link: <a href="https://www.youtube.com/watch?v=ct4tdyyNDY4">https://www.youtube.com/watch?v=ct4tdyyNDY4</a></p></blockquote><p>过去两年，由于大语言模型、语音技术、视觉技术的发展，机器人技术的研究思路发生了180度的转变。</p><h1>机器人基础模型</h1><p>目前在大量数据上进行大规模模型训练时，通常由两个比较重要的属性：</p><ul><li>涌现：当非常简单地事情在小范围发挥作用时，当扩大范围，它的表现会更好，例如更多的数据、更大的模型。</li><li>均质化：模型可以组合许多下游任务来实现泛化能力</li></ul><p>当然我们可能会思考一个问题，为什么目前还没有机器人领域的基础模型。不像音频、语言、图像等领域，这些领域已经出现了较为通用的基础模型，机器人技术的基础模型还没有人研究出来。</p><p>那么如果想要实现机器人的基础模型，可以如何做：</p><p><strong>（1）设计强化学习算法</strong></p><ol><li>利用高性能的架构，例如self-attention</li><li>利用比例法则，不仅要扩大模型大小，还有扩展计算，还需要扩大数据集语料库以及标记数量</li><li>数据集大小比数据质量更重要</li></ol><p><strong>（2）互联网规模的模型扩散</strong></p><ol><li>生成式模型在语言、编程、视觉、音频等领域已经展现出了涌现的能力，并且一次次超出了我们的预期，这个趋势在可见的未来中还会一直保持下去。</li><li>涌现和加速意味着这些模型可以“自己”变的更好</li></ol><p><strong>（3）从在线机器人学习转移到离线学习</strong></p><ol><li>目前的大模型都是在巨大规模的离线数据集上训练完成的</li></ol><h1>Google Brain 相关工作</h1><h2 id="过去工作">过去工作</h2><p><strong>（1）2016 - 机器人工厂</strong></p><ol><li><strong>强化学习</strong>：Google建立了一个包含7个Kuka机械臂的机器人工厂，7x24小时执行抓取动作，进行强化学习训练。</li><li><strong>Qt-Opt</strong>：Q-学习算法，接受视觉输入的同时进行连续控制。</li><li><strong>RL-CycleGan</strong>：将房展环境的图像转换为真实的图像，让机器人在显示世界中更好地完成任务。</li></ol><p><strong>（2）2020 - 厨房环境</strong></p><ol><li><strong>BC-Z</strong>：多任务模仿学习</li><li><strong>AW-Opt</strong>：将强化学习与模仿学习引导相结合</li></ol><p><strong>（3）2022</strong></p><p>遇到了一些问题，例如在一些场景任务中，成功率已经稳定到了50~70%，一些方法需要非常特定的数据分布，如果策略没有训练过当前的数据，那么任务很可能失败。为了解决这个问题，Google 进行了以下工作</p><ol><li>多任务模仿学习</li><li>使用大规模数据集</li></ol><h2 id="近期工作">近期工作</h2><p><strong>（1）RT-1</strong></p><p>主要聚焦于如何扩展模仿学习。</p><ol><li>使用一年半时间从13个机器人中收集了100k的演示数据，包括700个任务</li><li>使用BC-Z进行训练</li><li>由于基于Transformer的算法在处理图像时，现在还不足以支撑机器人学习中的高频率、实时性要求，因此希望数据集能够理解语言模型。</li></ol><p>从较高的层面来看，RT-1是一个机器人Transformer，它接受机器人摄像头的视觉输入，以及自然语言指令，仅仅使用transformer进行解码，分离目标物体类别，使用预训练的EfficientNet主干网络得到离散化动作。</p><p><strong>（2）SayCan</strong></p><p>机器人的技能能够是有限的，大语言模型也是受限制的，他不知道机器人的状态，不知道周围环境。</p><p>因此这项工作主要实现让语言模型说机器人的语言。</p><p><strong>（3）Inner-Monologue</strong></p><p>将环境的动态环境反馈加入到闭环中，也使用语言的API来传达环境中有什么。</p>]]></content>
    
    
    <summary type="html">Stanford CS25 V2中的一节课，由Google Brain工程师主讲的机器人学习主题课程。</summary>
    
    
    
    <category term="机器人" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="机器人学习" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="模仿学习" scheme="https://www.mahaofei.com/tags/%E6%A8%A1%E4%BB%BF%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="机器人" scheme="https://www.mahaofei.com/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="课程笔记" scheme="https://www.mahaofei.com/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu与Window双主机共用一套键鼠</title>
    <link href="https://www.mahaofei.com/post/doublecomputer-onekeyboard.html"/>
    <id>https://www.mahaofei.com/post/doublecomputer-onekeyboard.html</id>
    <published>2023-12-14T01:43:41.000Z</published>
    <updated>2023-12-14T01:43:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="〇、使用软件（Synergy）">〇、使用软件（Synergy）</h2><p>Synergy是一款能够让使用者仅用一套键盘鼠标，就同时操控多部计算机的免费工具软件。</p><p>我的需求是在一个局域网内的一台windows 11主机，一台Ubuntu 20.04主机之间共享键鼠、剪切板，并且键鼠接在windows作为server，linux作为client。</p><h2 id="一、软件安装">一、软件安装</h2><blockquote><p>Github: <a href="https://github.com/DEAKSoftware/Synergy-Binaries/releases">https://github.com/DEAKSoftware/Synergy-Binaries/releases</a></p></blockquote><h3 id="1-1-Windows">1.1 Windows</h3><blockquote><p>下载最新的和</p></blockquote><p>在上面的 Github 页面中下载最新的版本： <a href="https://github.com/DEAKSoftware/Synergy-Binaries/releases/download/1.14.6.19-stable/synergy-1.14.6.19-stable-windows-10-amd64.msi">synergy-1.14.6.19-stable-windows-10-amd64.msi</a> ，直接安装。</p><h3 id="1-2-Ubuntu">1.2 Ubuntu</h3><p>在上面的 Github 页面中下载最新的版本 <a href="https://github.com/DEAKSoftware/Synergy-Binaries/releases/download/1.14.6.19-stable/synergy-1.14.6.19-stable-ubuntu-22.04-jammy-jellyfish-x86_64.deb">synergy-1.14.6.19-stable-ubuntu-22.04-jammy-jellyfish-x86_64.deb</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i synergy-1.14.6.19-stable-ubuntu-22.04-jammy-jellyfish-x86_64.deb</span><br></pre></td></tr></table></figure><p>如果出现缺少依赖的问题，就根据缺少的依次安装，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libqt5core5a</span><br><span class="line">sudo apt install libqt5dbus5</span><br><span class="line">sudo apt install libqt5gui5 libqt5gui5-gles</span><br><span class="line">sudo apt install libqt5network5</span><br><span class="line">sudo apt install libqt5widgets5</span><br></pre></td></tr></table></figure><h2 id="二、软件配置">二、软件配置</h2><p><strong>确保两个电脑在同一个局域网下</strong></p><h3 id="2-1-打开软件">2.1 打开软件</h3><p>Ubuntu 在应用菜单内点击 Synergy，或者命令行输入 <code>synergy</code>，等待 5 秒左右，可能会弹出 <code>System tray is unavailable, don't close your window.</code>，不用管，直接点 ok 就行。</p><p>Ubuntu 打开软件后，<strong>勾选 Client</strong>，<strong>勾选Auto config</strong> 即可。</p><p>Windows 打开 Synergy 程序。打开软件后，<strong>勾选 Server</strong>。</p><h3 id="2-2-设置服务端">2.2 设置服务端</h3><p>在服务端电脑，点击设置服务端，然后把右上角的电脑，拖一个到你的电脑旁边。<strong>屏幕名填写 Ubuntu 中的 Client 下的屏幕名</strong>。</p><p><img src="https://img.mahaofei.com/img/202405052044212.png" alt="image.png"></p><h3 id="2-3-设置客户端">2.3 设置客户端</h3><p>本来其实没有什么设置的，直接两边点开始就可以了。但是由于 Ubuntu 的 版本较老，有一些问题。</p><p><strong>问题 1</strong>：<code>ERROR: failed to connect secure socket.</code></p><p><strong>解决 1：</strong> 参考 <a href="https://blog.csdn.net/guojingyue123/article/details/120013254">CSDN. aprilaaaaa</a></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gedit ~/.config/Synergy/Synergy.conf</span><br><span class="line"><span class="comment"># 把cryptoEnabled = ture这一行，ture改成false</span></span><br></pre></td></tr></table></figure><p><strong>问题 2</strong>：<code>ERROR: error:140AB18F:SSL routines:SSL_CTX_use_certificate:ee key too small</code></p><p><strong>解决 2</strong>：参考 [CSDN.橘圆亮](c <a href="https://blog.csdn.net/CyFio/article/details/121060881">https://blog.csdn.net/CyFio/article/details/121060881</a> )</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 退出 Synergy</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 删除 SSL文件夹</span></span><br><span class="line">cd /home/&lt;username&gt;/.synergy/</span><br><span class="line">rm -rf SSL/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 修改 /usr/share/synergy/gen_ssl_pem.sh 中 rsa:后面的参数为4096</span></span><br><span class="line">sudo gedit /usr/share/synergy/gen_ssl_pem.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 重新生成SSL文件夹</span></span><br><span class="line">bash /usr/share/synergy/gen_ssl_pem.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5. 重新启动 Synergy</span></span><br></pre></td></tr></table></figure><p>解决完以上问题后，服务端和客户端都点击开始，就可以建立通信了。实现鼠标、键盘、剪切板的互联。</p><h2 id="三、其它问题">三、其它问题</h2><h3 id="3-1-服务端鼠标移至客户端，直接卡死在右下角">3.1 服务端鼠标移至客户端，直接卡死在右下角</h3><p>这个问题的原因在于两个屏幕的分辨率不一致，或缩放比例不一致。参考 <a href="https://tieba.baidu.com/p/5016381206">Synergy 贴吧</a>。</p><h3 id="3-2-某次重启后，Client-端一直显示-synergy-failed-to-connect-to-server，无法连接">3.2 某次重启后，Client 端一直显示 synergy failed to connect to server，无法连接</h3><p>经过排查，我的问题 server 端的 IP 再某次重启后被改为了其它 IP 地址。</p><p>可以检查 server 端<strong>加粗的 IP 地址</strong>，与 client 端的服务端 IP 设置是否一致。</p><p>一劳永逸的方法是手动设置电脑 IP，点击 windows 的【设置-网络-以太网】编辑 IP 地址，根据自己的情况固定 IP，可以直接固定为之前自己电脑一直的 IP 或者 synergy 界面显示的 IP。（Ubuntu 作为服务端也可以固定 IP）</p><blockquote><p>参考：</p><ol><li><a href="https://blog.csdn.net/guojingyue123/article/details/120013254">aprilaaaaa. Ubuntu20.04 安装 synergy（Windows 和 linux 共用一套键鼠）. CSDN. </a></li><li><a href="https://blog.csdn.net/CyFio/article/details/121060881">橘圆亮. synergy 早期免费版本在 Ubuntu20 报错 SSL Key too small 问题解决方法. CSDN</a></li><li><a href="https://tieba.baidu.com/p/5016381206">Synergy 贴吧</a></li></ol></blockquote>]]></content>
    
    
    <summary type="html">Synergy是一款能够让使用者仅用一套键盘鼠标，就同时操控多部计算机的免费工具软件。</summary>
    
    
    
    <category term="实用工具" scheme="https://www.mahaofei.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Ubuntu工具" scheme="https://www.mahaofei.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/Ubuntu%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Ubuntu" scheme="https://www.mahaofei.com/tags/Ubuntu/"/>
    
    <category term="多主机" scheme="https://www.mahaofei.com/tags/%E5%A4%9A%E4%B8%BB%E6%9C%BA/"/>
    
    <category term="Windows" scheme="https://www.mahaofei.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Windows与Ubuntu双系统绑定同一个蓝牙设备（无需重新配对）</title>
    <link href="https://www.mahaofei.com/post/doublesystem-onebluetooth.html"/>
    <id>https://www.mahaofei.com/post/doublesystem-onebluetooth.html</id>
    <published>2023-12-13T13:25:52.000Z</published>
    <updated>2023-12-13T13:25:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1>1、Ubuntu 下配对蓝牙设备</h1><p>会生成一个配置文件。</p><h1>2、Windows 下再配对蓝牙设备</h1><p>读取蓝牙配对信息，Windows下的蓝牙配对信息存储在注册表中，并且此信息需要使用特殊方法才能查看。</p><p>下载 <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psexec">PsTools</a>，将PSTools.zip 中的 PsExec.exe 或 PsExec64.exe 解压出来，并以管理员权限运行 cmd，<code>cd</code> 到<code>PsExec64.exe</code> 所在目录，使用下面的命令启动regedit.exe</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec64.exe -si regedit</span><br></pre></td></tr></table></figure><p>找到下面的蓝牙配对信息</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\BTHPORT\Parameters\Keys\【本机蓝牙 MAC】</span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/202312132218479.png" alt="image.png"></p><p>可以看到其中有类型为<code>REG_BINARY</code>的值，每个值对应一个设备，将其名称和数据记下来，或者直接导出，我导出后用记事本打开如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\BTHPORT\Parameters\Keys\d4d853556b34]</span><br><span class="line">&quot;CentralIRK&quot;=hex:38,a5,32,96,6c,bf,c2,31,7b,e9,43,e0,b9,cc,9d,d6</span><br><span class="line">&quot;6468761a6934&quot;=hex:6b,bf,d8,14,d8,aa,2f,d8,f7,68,73,a7,83,64,6e,8f</span><br></pre></td></tr></table></figure><blockquote><p>此外如果是罗技设备，例如本人的罗技鼠标，则需要<strong>导出</strong> <code>【本机蓝牙 MAC】</code> 下的子项，项名称为罗技鼠标的 MAC 地址，项中的各个值则是需要填写到 Ubunut 中的内容<br><img src="https://img.mahaofei.com/img/202401261931186.png" alt="image.png"></p></blockquote><h1>3、修改Linux下的蓝牙配对信息</h1><h2 id="3-1-一般设备">3.1 一般设备</h2><p>Linux 下蓝牙设备的配对信息存储在 <code>/var/lib/bluetooth/【本机蓝牙 MAC】</code>目录下，例如 <code>/var/lib/bluetooth/D4:D8:53:55:6B:34</code>，MAC 地址中的字母全为大写，且含冒号分隔符。</p><p>进入该目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">cd /var/lib/bluetooth/D4\:D8\:53\:55\:6B\:34/</span><br></pre></td></tr></table></figure><p>可以看到系统已配对的蓝牙设备：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@Victus-Ubuntu:/var/lib/bluetooth/D4:D8:53:55:6B:34# ll</span><br><span class="line">total 44</span><br><span class="line">drwx------ 7 root root  4096 12月 13 22:19 ./</span><br><span class="line">drwxr-xr-x 3 root root  4096 5月  13  2023 ../</span><br><span class="line">drwx------ 2 root root  4096 12月 13 22:19 64:68:76:1A:69:34/</span><br><span class="line">drwx------ 2 root root  4096 12月 13 22:19 A4:C1:38:AB:43:5C/</span><br><span class="line">drwx------ 2 root root 16384 12月 13 22:20 cache/</span><br><span class="line">drwx------ 2 root root  4096 12月 13 22:19 EC:B3:D5:3C:5F:92/</span><br><span class="line">drwx------ 2 root root  4096 12月 13 22:20 F9:E7:70:AD:8C:64/</span><br><span class="line">-rw------- 1 root root    50 12月 13 22:19 settings</span><br></pre></td></tr></table></figure><p>根据我们导出的reg文件，可以知道进入我们要配置的蓝牙鼠标的目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd 64\:68\:76\:1A\:69\:34/</span><br></pre></td></tr></table></figure><p>我们需要修改的就是这个目录下的 info 文件，以我的为例，文件如下（这里已经改好了，只需要将Key换成windows下导出的注册表里面的key，具体就是win下的逗号删除小写变大写）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[General]</span><br><span class="line">Name=EDIFIER W820NB 双金标版</span><br><span class="line">Class=0x240404</span><br><span class="line">SupportedTechnologies=BR/EDR;</span><br><span class="line">Trusted=true</span><br><span class="line">Blocked=false</span><br><span class="line">Services=00001101-0000-1000-8000-00805f9b34fb;0000110b-0000-1000-8000-00805f9b34fb;0000110c-0000-1000-8000-00805f9b34fb;0000110d-0000-1000-8000-00805f9b34fb;0000110e-0000-1000-8000-00805f9b34fb;0000111e-0000-1000-8000-00805f9b34fb;66666666-6666-6666-6666-666666666666;edf00000-edfe-dfed-fedf-edfedfedfedf;</span><br><span class="line"></span><br><span class="line">[LinkKey]</span><br><span class="line">Key=6BBFD814D8AA2FD8F76873A783646E8F</span><br><span class="line">Type=4</span><br><span class="line">PINLength=0</span><br></pre></td></tr></table></figure><h2 id="3-2-罗技设备">3.2 罗技设备</h2><p>将 Windows 下的 IRK 字符<strong>倒序大写删除逗号</strong>，即为 Ubuntu 下的 IdentityResolvingKey</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;IRK&quot;=hex:d3,1f,03,20,e5,be,13,64,33,8b,63,09,d3,01,bd,33</span><br><span class="line"></span><br><span class="line">[IdentityResolvingKey]</span><br><span class="line">Key=33BD01D309638B6413BEE520031FD3</span><br></pre></td></tr></table></figure><p>Windows 下的 <strong>LTK</strong> <strong>大写删除逗号</strong>，即为 Ubuntu 下的 <strong>LontermKey</strong><br><strong>EDIV</strong> 需要<strong>转换成 10 进制</strong>，为 Ubuntu 的 <strong>EDiv</strong><br><strong>ERand</strong> 需要<strong>删除逗号并转换成 10 进制</strong>，为 Ubuntu 的 <strong>Rand</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;LTK&quot;=hex:ae,4b,59,52,fa,32,7d,2b,aa,0a,a7,de,33,ac,2b,20</span><br><span class="line">&quot;ERand&quot;=hex(b):cd,d7,f7,f8,01,f9,49,f2</span><br><span class="line">&quot;EDIV&quot;=dword:00006f5f</span><br><span class="line"></span><br><span class="line">[LongTermKey]</span><br><span class="line">Key=AE4B5952FA327D2BAA0AA7DE33AC20</span><br><span class="line">Authenticated=0</span><br><span class="line">EncSize=16</span><br><span class="line">EDiv=28511</span><br><span class="line">Rand=14832596542325082602</span><br></pre></td></tr></table></figure><p>然后重启电脑，可以直接连接蓝牙。</p>]]></content>
    
    
    <summary type="html">本人安装了Ubuntu与Windows双系统，平时使用蓝牙鼠标与耳机，但是每次切换系统都需要重新配对设备，因此想要实现双系统配对。</summary>
    
    
    
    <category term="实用工具" scheme="https://www.mahaofei.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Ubuntu工具" scheme="https://www.mahaofei.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/Ubuntu%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Ubuntu" scheme="https://www.mahaofei.com/tags/Ubuntu/"/>
    
    <category term="Windows" scheme="https://www.mahaofei.com/tags/Windows/"/>
    
    <category term="双系统" scheme="https://www.mahaofei.com/tags/%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>【论文笔记】机器人动作、轨迹、过程模仿</title>
    <link href="https://www.mahaofei.com/post/lfd-il-papers.html"/>
    <id>https://www.mahaofei.com/post/lfd-il-papers.html</id>
    <published>2023-12-12T07:36:37.000Z</published>
    <updated>2024-01-04T08:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1>1 AW-Opt: Learning Robotic Skills with Imitation and Reinforcement at Scale</h1><blockquote><p><strong>标题</strong>：AW-Opt：通过大规模模仿和强化学习机器人技能<br><strong>作者团队</strong>：Google<br><strong>期刊会议</strong>：CoRL<br><strong>时间</strong>：2022<br><strong>代码</strong>：<a href="https://awopt.github.io/">https://awopt.github.io/</a></p></blockquote><h2 id="1-1-目标问题-9">1.1 目标问题</h2><p>强化学习可以实现目标任务，但是需要大量自主数据收集。模仿学习只能学习和演示一样程度的动作。</p><p>本文探索如何最好的结合两种方法，并进行扩展。实现大规模机器人学习。</p><h2 id="1-2-方法-9">1.2 方法</h2><p><strong>（1）任务场景与基础算法</strong></p><p>本文以基于视觉的垃圾分类任务为例，机器人从不同对象类型（可回收物、不可回收对象）等垃圾箱中拾取特定类型的对象。</p><p>本文的算法为了研究IL+RL的扩展性，在QT-Opt和AWAC两种IL+RL算法的基础上进行研究。</p><p><strong>（2）正样本过滤</strong></p><p>两种基础算法性能不够好的原因可能有以下两点：</p><ul><li>探索过程中增加了大量的失败事件、掩盖了最初的成功演示</li><li>算法在学习有效的Q函数，对actor进行更新之前，会删除预训练初始化。</li></ul><p>为了解决这个问题，本文进行了以下两个修改：</p><ul><li>为critic使用优先缓冲区，其中一半来自于成功事件奖励</li><li>对actor使用正向过滤，仅对通过过滤器的样本进行更新</li></ul><p><strong>（3）混合 actor-critic 探索</strong></p><p>QT-Opt方法没有明确的actor，由于任务使用交叉熵利用critic来优化动作，因此可以视为隐式策略。</p><p>AWAC是一种actor-critic算法，通过对actor的动作采样来实现，而这种方式在训练初期，主要是critic进行学习，来确定哪些动作是好的。这种方式对于复杂的任务学习存在限制。</p><p>本文为了解决以上问题，结合两种算法，并比较了四种策略：仅actor探索、隐式critic策略、episode级随机切换策略（80%critic策略、20%actor）、step级随机切换策略、</p><h1>2 DexMV: Imitation Learning for Dexterous Manipulation from Human Videos</h1><blockquote><p><strong>标题</strong>：DexMV：模仿学习，从人类视频中进行灵巧操作<br><strong>作者团队</strong>：University of California San Diego<br><strong>期刊会议</strong>：ECCV<br><strong>时间</strong>：2022<br><strong>代码</strong>：<a href="https://github.com/yzqin/dexmv-sim">https://github.com/yzqin/dexmv-sim</a></p></blockquote><h2 id="2-1-目标问题-4">2.1 目标问题</h2><p>由于多指机器人拥有高自由度关节、非线性驱动，因此需要大量的强化学习训练数据，而机器人数据收集困难，且仅使用仿真数据训练机器人运动也很不自然，能否利用人类与真实世界的交互经验来引导机器人？</p><h2 id="2-2-方法-4">2.2 方法</h2><p>设计了一个基于模仿学习的平台</p><ul><li>多指机器人复杂灵巧操作的模拟系统</li><li>记录人手执行相同任务的大规模演示（从视频中提取手部3D位置和物体姿态）</li><li>演示翻译方法：将人体动作转换为机器人演示</li></ul><p><img src="https://img.mahaofei.com/img/202312131522496.png" alt="image.png"></p><h3 id="2-2-1-姿态估计">2.2.1 姿态估计</h3><p><strong>物体位姿估计</strong>：使用在YCB数据集上训练的PVN3D实现物体6D位姿的估计。</p><p><strong>人手姿态估计</strong>：使用MANO模型表示人手关节，进行手部检测和实例分割，利用现有的模型估计手部关节。</p><h3 id="2-2-2-演示数据转换">2.2.2 演示数据转换</h3><p>常见的模仿学习算法使用==机器人状态和动作==作为训练数据，而不是人手姿态。并且人手和灵巧手的运动学模型也不同。</p><p><strong>（1）手部运动重定向</strong></p><p>给定视频中估计的人手姿态序列，将其重定向为机器人关节角度序列。改过程可视为优化问题。</p><p>在大多数操作任务中，人类和机器人都是指尖接触物体，因此保留手掌根的指尖的空间向量。</p><p>但是这样可能会导致手指弯曲信息丢失，导致手指穿透物体，因此考虑同时优化手掌根到中指骨的向量。</p><p><strong>（2）机器人动作估计</strong></p><p>手部运动重定向提供了手部姿态到机器人关节角度的转换，但是关节扭矩是位置的，因此通过逆动力学函数，将关节角度拟合到连续的关节轨迹函数中，计算扭矩。在这个过程中，需要保证q’‘’(t)加加速度尽可能小。</p><p><strong>（3）时间对齐</strong></p><p>录制的视频帧率为30Hz，模拟运行的频率为120Hz，因此在训练之前，需要进行时间对齐，以模拟频率对机器人动作q(t)进行采样。</p><h3 id="2-2-3-模仿学习">2.2.3 模仿学习</h3><p>本文使用转换后的演示进行模仿学习，不使用行为克隆方法，而是使用模仿学习算法，并将演示合并到强化学习中。</p><p>本文考虑使用 $&lt;S, A, P, R, \gamma&gt;$ 的马尔科夫决策链，其中：</p><ul><li>$S$: 状态空间</li><li>$A$: 动作空间</li><li>$P(s_{t+1}|s_t, a_t)$: 是状态转移函数，在$t+1$步，给定动作$a_t$时，下一个状态$s_{t+1}$的概率密度</li><li>$R(S, a)$: 奖励函数</li><li>$\gamma$: 折扣因子</li></ul><p>强化学习的目的是最大化策略$\pi(a|s)$下的预期奖励。给定演示轨迹${(s_i, a_i)}^n_{i=1}$，使用该轨迹和奖励，优化策略$\pi$。</p><p>本文使用<strong>生成对抗模仿学习GAIL</strong>，这是一种使用state-action动作密度匹配来学习策列的SOTA IL方法。通过最大限度的减小演示和动作的距离函数，实现动作模仿。</p><p>本文使用<strong>演示增强策略梯度</strong>进行强化学习。</p><h2 id="2-3-总结">2.3 总结</h2><ol><li>将真实世界人手姿态转换为机器人动作，加上物体位姿估计，作为演示数据用于后续模仿学习与强化学习。</li><li>使用生成对抗模仿学习GAIL</li><li>使用演示增强策略梯度进行强化学习</li></ol><h1>3 Learning and Retrieval from Prior Data for Skill-based Imitation Learning</h1><blockquote><p><strong>标题</strong>：基于技能的模仿学习的先验数据的学习和检索<br><strong>作者团队</strong>：The University of Texas at Austin<br><strong>期刊会议</strong>：CoRL<br><strong>时间</strong>：2022<br><strong>代码</strong>：<a href="https://ut-austin-rpl.github.io/sailor">https://ut-austin-rpl.github.io/sailor</a></p></blockquote><h2 id="3-1-目标问题-3">3.1 目标问题</h2><p>模仿学习由于需要进行监督学习和较弱的泛化能力，因此可扩展性有限。</p><p>本文研究如何使用其他任务的先验数据，来稳定高效地学习新任务。</p><h2 id="3-2-方法-3">3.2 方法</h2><p>本文提出了一种基于技能的模仿学习框架，从先前的数据中提取运动技能，并随后调用这些学到的技能的目标函数策略。</p><p><strong>（1）学习可预测的技能表示</strong></p><p>通过使用变分自动编码器VAE编码小段轨迹来学习技能表示。为了提高技能的可预测性，将小段轨迹使用LSTM编码器编码为潜在技能的高斯分布，解码器也是一个LSTM网络。</p><p>对于每个时间步，将潜在特征z和给定的观察o，解码为动作a。</p><p><strong>（2）基于检索的策略学习</strong></p><p>为了提高任务策略的学习效果，从先前的数据集中检索与目标任务相关的数据。</p><p>策略学习阶段，使用LSTM策略通过观察历史的潜在技能，预测输出接下来要执行的技能z，这种方式可以利用丰富多样的先验交互知识，将其融入到策略中，从而在新环境中更有效的执行任务。</p><h2 id="3-3-总结">3.3 总结</h2><p>使用变分自动编码器VAE处理子轨迹，形成一致的潜在技能表示。</p><p>使用LSTM编码解码技能表示，根据状态预测需要输出的技能。</p><h1>4 VIOLA: Imitation Learning for Vision-Based Manipulation with Object Proposal Priors</h1><blockquote><p><strong>标题</strong>：VIOLA：使用对象提议先验进行基于视觉的操作的模仿学习<br><strong>作者团队</strong>：The University of Texas at Austin<br><strong>期刊会议</strong>：CoRL<br><strong>时间</strong>：2022<br><strong>代码</strong>：<a href="https://ut-austin-rpl.github.io/VIOLA">https://ut-austin-rpl.github.io/VIOLA</a></p></blockquote><h2 id="4-1-目标问题-2">4.1 目标问题</h2><p>一种先进的模仿学习算法。</p><h2 id="4-2-方法-3">4.2 方法</h2><p>本文实现了一种基于视觉的机器人操作任务模仿学习算法：</p><ul><li>使用预训练的视觉模型生成通用的对象表示；</li><li>采用基于Transformer的策略，来推理这些表示，根据视觉预测动作；</li></ul><p><strong>（1）构建面向对象的表示</strong></p><ol><li>对象识别：使用预训练的RPN区域建议网络在工作空间图像上生成对象建议，并选择执行度最高的前K个建议。</li><li>对象特征表示：包含区域特征和上下文特征<ol><li>区域特征：为每个建议区域设计视觉特征和位置特征，使用ROI Align从工作空间图像的ResNet18编码的特征途中提取特征；</li><li>上下文特征，包括全局特征、手眼相机图像特征和机器人状态的本体感知特征组成；</li></ol></li><li>时间组合，将过去H+1步的特征和时间编码组合，构成面向对象的表示，来获得对象状态的时间依赖性和动态变化。</li></ol><p><strong>（2）基于Transformer的策略</strong></p><p>使用多个Transformer编码器，处理一系列特征向量。</p><p>该策略网络将面向对象的区域特征和上下文特征作为输入token，并加入了一个动作token，通过动作监督学习，能够关注任务相关的区域。</p><p>最后利用两层全连接层和高斯混合模型输出动作。</p><h2 id="4-3-总结">4.3 总结</h2><ol><li>构建面向对象的特征（图像区域特征+机器人状态特征）</li><li>使用Transformer进行特征编码与预测</li><li>使用高斯混合模型输出动作。</li></ol><h1>5 SEIL: Simulation-augmented Equivariant Imitation Learning</h1><blockquote><p><strong>标题</strong>：SEIL: Simulation-augmented Equivariant Imitation Learning<br><strong>作者团队</strong>：Northeastern University<br><strong>期刊会议</strong>：ICRA<br><strong>时间</strong>：2022<br><strong>代码</strong>：<a href="https://saulbatman.github.io/project/seil/">https://saulbatman.github.io/project/seil/</a></p></blockquote><h2 id="5-1-目标问题-3">5.1 目标问题</h2><p>机器人模仿学习中，样本获取非常困难，因为需要与现实世界进行交互。为了解决这个问题，本文在图像数据增强的基础上进行模仿学习。</p><h2 id="5-2-方法-2">5.2 方法</h2><p><strong>（1）数据增强</strong></p><p>本文实现了一种专家数据增强方法Transition Simulation。通过将观察到的点云投影到模拟的机械臂姿态中，生成新的观察图像，从而模拟专家的state-action来增加数据多样性。</p><p><strong>（2）等变行为克隆</strong></p><p>利用机器人操作过程中的O(2)对称性（所有平面旋转和反射对称性），利用Steerable CNNs将策略自动泛化到不同的O(2)状态中。</p><h2 id="5-3-总结-2">5.3 总结</h2><p>专家数据增强+等变行为克隆</p><h1>6 Waypoint-Based Imitation Learning for Robotic Manipulation</h1><blockquote><p><strong>标题</strong>：基于路标点的机器人操作模仿学习<br><strong>作者团队</strong>：Stanford University<br><strong>期刊会议</strong>：arXiv<br><strong>时间</strong>：2023<br><strong>代码</strong>：<a href="https://github.com/lucys0/awe">https://github.com/lucys0/awe</a></p></blockquote><h2 id="6-1-目标问题-3">6.1 目标问题</h2><p>模仿学习容易出现错误，特别是在执行复杂操作时。</p><p>使用路标点可以减少模仿学习中的错误，但是一般路标点需要认为监督，本文则是提出了一种自动生成路标点的方法。提高了模仿学习的成功率。</p><h2 id="6-2-方法-3">6.2 方法</h2><p>本文设计了一种自动路标点提取方法，这是一个预处理模块，因此很容易添加到其它行为克隆算法中。本文举例了两种先进的模仿学习算法：扩散策略和基于Transformer的动作。</p><p><strong>（1）重建损失</strong></p><p>定义了一种损失：给定路标点后重建轨迹的质量，通过最小化原始轨迹与根据路标点重建的轨迹之间的偏差，来使得路标点能尽可能代替真实轨迹。</p><p><strong>（2）路径点选择动态规划</strong></p><p>使用一种简单而动态规划算法，用于选择最小数量的路径点，并保证重建的误差满足要求。</p><h2 id="6-3-总结">6.3 总结</h2><p>一种自动路标点提取算法，用于对行为克隆数据进行预处理。</p><h1>7 Mobile ALOHA: Learning Bimanual Mobile Manipulation with Low-Cost Whole-Body Teleoperation</h1><blockquote><p><strong>标题</strong>：Mobile ALOHA：通过低成本全身远程操作学习双手移动操作<br><strong>作者团队</strong>：Stanford University<br><strong>期刊会议</strong>：无<br><strong>时间</strong>：2024<br><strong>代码</strong>：<a href="https://mobile-aloha.github.io/">https://mobile-aloha.github.io/</a></p></blockquote><h2 id="7-1-目标问题-3">7.1 目标问题</h2><p>目前的大多数从人类演示中模仿学习的机器人技术集中在桌面操作，缺乏一般有用的任务所需的机动性和灵活性，本文主要是开发了一个移动机器人，实现移动+双手的模仿学习。</p><h2 id="7-2-论文中提到的学习方法">7.2 论文中提到的学习方法</h2><p><strong>（0）基础模仿学习算法</strong></p><ol><li>ACT: Learning fine-grained bimanual manipulation with low-cost hardware</li><li>扩散策略: Diffusion policy: Visuomotor policy learning via action diffusion</li><li>VINN: The surprising effectiveness of representation learning for visual imitation</li></ol><p><strong>（1）BC 的改进</strong></p><p>行为克隆 BC 与各种架构相结合</p><ol><li>Rt-1: Robotics transformer for real-world control at scale</li><li>Bc-z: Zero-shot task generalization with robotic imitation learning</li><li>What matters in learning from offline human demonstrations for robot manipulation</li><li>Behavior transformers: Cloning k modes with one stone</li></ol><p>使用新的训练目标</p><ol><li>Roboagent: Towards sample efficient robot manipulation with semantic augmentations and action chunking</li><li>Diffusion policy: Visuomotor policy learning via action diffusion</li><li>Implicit behavioral cloning</li><li>The surprising effectiveness of representation learning for visual imitation</li><li>Learning fine-grained bimanual manipulation with low-cost hardware</li></ol><p>正则化</p><ol><li>Vision-based multi-task manipulation for inexpensive robots using end-to-end learning from demonstration</li></ol><p>Motor Primitives</p><ol><li>Hierarchical neural dynamic policies</li><li>Dynamical movement primitives: learning attractor models for motor behaviors</li><li>Learning motor primitives for robotics</li><li>Using probabilistic movement primitives in robotics</li><li>Learning and generalization of motor skills by learning from demonstration</li><li>Learning periodic tasks from human demonstrations</li></ol><p>数据预处理</p><ol><li>Waypoint-based imitation learning for robotic manipulation</li></ol><p><strong>（2）多任务或少镜头模仿学习</strong></p><ol><li>Transformers for one-shot visual imitation</li><li>One-shot imitation learning</li><li>Learning manipulation skills from a single demonstration</li><li>One-shot visual imitation learning via meta-learning</li><li>Task-embedded control networks for few-shot imitation learning</li><li>Coarse-to-fine imitation learning: Robot manipulation from a single demonstration</li><li>Demonstrate once, imitate immediately (dome): Learning visual servoing for one-shot imitation learning</li><li>One-shot imitation from observing humans via domain-adaptive metalearning</li></ol><p><strong>（3）语言条件的模仿学习</strong></p><ol><li>Rt-1: Robotics transformer for real-world control at scale</li><li>Bc-z: Zero-shot task generalization with robotic imitation learning</li><li>Cliport: What and where pathways for robotic manipulation</li><li>Perceiver-actor: A multi-task transformer for robotic manipulation</li></ol><p><strong>（4）从演示数据模仿</strong></p><ol><li>From play to policy: Conditional behavior generation from uncurated robot data</li><li>Learning latent plans from play</li><li>Latent plans for task-agnostic offline reinforcement learning</li><li>Mimicplay: Longhorizon imitation learning by watching human play</li></ol><p><strong>（5）使用人类视频模仿</strong></p><ol><li>Learning generalizable robotic reward functions from&quot; in-the-wild&quot; human videos</li><li>Model-based inverse reinforcement learning from visual demonstrations</li><li>Perceptual values from observation</li><li>R3m: A universal visual representation for robot manipulation</li><li>Real-world robot learning with masked visual pre-training</li><li>Concept2robot: Learning manipulation concepts from instructions and human demonstrations</li><li>Avid: Learning multi-stage tasks via pixel-level translation of human videos</li><li>Learning by watching: Physical imitation of manipulation skills from human videos</li></ol><p><strong>（6）针对特定任务的模仿学习</strong></p><ol><li>Coarse-to-fine imitation learning: Robot manipulation from a single demonstration</li><li>Perceiver-actor: A multi-task transformer for robotic manipulation</li><li>Transporter networks: Rearranging the visual world for robotic manipulation</li></ol><p><strong>（7）针对模仿学习的通用化用于新的场景或对象</strong></p><ol><li>Rt-1: Robotics transformer for real-world control at scale</li><li>Rt-2: Vision-language-action models transfer web knowledge to robotic control</li><li>Bridge data: Boosting generalization of robotic skills with cross-domain datasets</li><li>Bc-z: Zero-shot task generalization with robotic imitation learning</li><li>Robot peels banana with goalconditioned dual-action deep imitation learning</li></ol><p><strong>（8）从不同但类似的机器人上收集数据模仿</strong></p><ol><li>Robocat: A self-improving foundation agent for robotic manipulation</li><li>Open X-Embodiment: Robotic learning datasets and RT-X models</li><li>In Towards Generalist Robots: Learning Paradigms for Scalable Skill Acquisition</li><li>Octo: An open-source generalist robot policy</li></ol><h2 id="7-3-总结">7.3 总结</h2>]]></content>
    
    
    <summary type="html">基于传统的强化学习方法大多实现某项任务，而无法实现动作的模仿，调研相关论文实现机器人动作轨迹的模仿。</summary>
    
    
    
    <category term="机器人" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="机器人学习" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="模仿学习" scheme="https://www.mahaofei.com/tags/%E6%A8%A1%E4%BB%BF%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="强化学习" scheme="https://www.mahaofei.com/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="机器人动作" scheme="https://www.mahaofei.com/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8A%A8%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【实验准备】MuJoCo导入自定义机器人</title>
    <link href="https://www.mahaofei.com/post/mujoco.html"/>
    <id>https://www.mahaofei.com/post/mujoco.html</id>
    <published>2023-12-04T01:59:28.000Z</published>
    <updated>2023-12-04T01:59:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本实验所配置的模型已开源至 <a href="https://github.com/HaofeiMa/E05_Robotiq-2f-85">Github: HaofeiMa/E05_Robotiq-2f-85</a></p></blockquote><h1>1 模型准备</h1><h2 id="1-1-机器人Solidworks模型转URDF-2">1.1 机器人Solidworks模型转URDF</h2><p>本仿真实验使用<a href="https://www.hansrobot.com/service/download/3dmoxing?pagenum=3">大族E05机器人</a>和<a href="https://robotiq.com/products/2f85-140-adaptive-robot-gripper">Robotiq 2f-85夹爪</a></p><p>该部分参考<a href="https://www.bilibili.com/video/BV1Tx411o7rH">以下视频</a></p><iframe src="http://player.bilibili.com/player.html?aid=56651666&bvid=BV1Tx411o7rH&cid=98972250&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="height:100%;width:100%; aspect-ratio: 16 / 9;"> </iframe><p>首先下载机器人模型，并转换为URDF。</p><p><strong>（1）安装sw_urdf_exporter插件</strong></p><p>下载sw_urdf_exporter插件：<a href="http://wiki.ros.org/sw_urdf_exporter">http://wiki.ros.org/sw_urdf_exporter</a>，注意下载最新的就行，最新的也支持以前版本的Solidworks。</p><p>关闭 Solidworks。</p><p>运行 <a href="https://github.com/ros/solidworks_urdf_exporter/releases">sw2urdfSetup.exe</a>，自行安装即可。</p><p><strong>（2）为机器人添加基准轴（旋转轴）</strong></p><p><img src="https://img.mahaofei.com/img/202312041343070.png" alt="image.png"></p><p>以此选择六个圆柱面，确定六个旋转轴方向。</p><p><img src="https://img.mahaofei.com/img/202312041401387.png" alt="image.png"></p><p><strong>（3）导出URDF</strong></p><p>查看是否有【工具-最下面File-Export as URDF】，如果有的话，直接点击打开，如果没有，则打开【工具-插件】，在最下面打开Sw2URDF插件的两个√。</p><p>按照以下过程，创建base_link和link1-6</p><p><img src="https://img.mahaofei.com/img/202312041434677.png" alt="image.png"></p><p>然后点击Preview and Export</p><p><img src="https://img.mahaofei.com/img/202312041439265.png" alt="image.png"></p><p>然后点击Next和Export URDF and Mesh，它会将我们的URDF模型以功能包的形式保存到设置的位置。</p><p><strong>注意创建完成后，一定要检查最后一个坐标系是否是在机器人末端连接法兰的中心，因为后续添加夹爪需要这个坐标系，如果不是，需要自己手动调整坐标系的位置，重新生成URDF</strong></p><h2 id="1-2-ROS-中查看模型">1.2 ROS 中查看模型</h2><blockquote><p>不需要使用 Gazebo 的可直接跳到第 2 节（2 模型导入 Mujoco）</p></blockquote><p>创建一个工作空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p catkin_robot/src</span><br><span class="line">cd catkin_robot/src</span><br><span class="line">catkin_init_workspace</span><br></pre></td></tr></table></figure><p>将功能包复制到<code>src</code>目录下</p><p>回到 <code>catkin_robot</code> 目录下，编译工作空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><p>运行测试程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source devel/setup.bash</span><br><span class="line">roslaunch e05 display.launch</span><br></pre></td></tr></table></figure><p>将 <code>Fixed Frame</code> 改为 <code>base_link</code>，点击左下角的 <code>Add</code>，添加一个 <code>Robot Model</code>，可以看到机器人正常显示在 Rviz 界面中，拖动进度条即可控制机械臂各关节运动。</p><p><img src="https://img.mahaofei.com/img/202312041606763.png" alt="image.png"></p><h2 id="1-3-添加-Robotiq-2f-85-夹爪-2">1.3 添加 Robotiq 2f-85 夹爪</h2><p><strong>（1）准备夹爪环境</strong></p><p>进入工作空间的src目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">git clone https://github.com/ros-industrial/robotiq.git</span><br></pre></td></tr></table></figure><p>在自己的机械臂的功能包的urdf文件夹中，新建一个<code>common.gazebo.xacro</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src/e05/urdf</span><br><span class="line">gedit common.gazebo.xacro</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;ros_control&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_control.so&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了方便表示，我在<code>e05.urdf</code>最后添加了一个<code>ee_link</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;ee_link&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span> <span class="comment">&lt;!-- You can use any simple geometry like a sphere for visualization --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;1 0 0 1&quot;</span> /&gt;</span> <span class="comment">&lt;!-- Choose a color for visualization --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;ee_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;link6&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;ee_link&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再新建一个<code>xacro</code>文件，（例如我的机械臂功能包名字为e05）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit e05.xacro</span><br></pre></td></tr></table></figure><p>添加如下内容，注意修改<code>Gazebo支持</code>和<code>E05机械臂</code>部分自己的机械臂功能包名称，以及<code>夹爪与机械臂连接</code>部分的第一行的parent，我这里连接在了link6也就是末端上。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span> <span class="attr">name</span>=<span class="string">&quot;e05&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:arg</span> <span class="attr">name</span>=<span class="string">&quot;transmission_hw_interface&quot;</span> <span class="attr">default</span>=<span class="string">&quot;hardware_interface/PositionJointInterface&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- E05机械臂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find e05)/urdf/e05.urdf&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Gazebo 支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find e05)/urdf/common.gazebo.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载gazebo中需要使用的模型 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- macros for transmission --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;transmission_block&quot;</span> <span class="attr">params</span>=<span class="string">&quot;joint_name&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">&quot;tran1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;joint_name&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">&quot;motor1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Transmissions for ros control --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;joint1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;joint2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;joint3&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;joint4&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;joint5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:transmission_block</span> <span class="attr">joint_name</span>=<span class="string">&quot;joint6&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;xacro:include filename=&quot;$(find e05)/urdf/e05.gazebo.xacro&quot; /&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 机器人固定在世界坐标系下 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;world&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;world_joint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;world&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span> = <span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Robotiq 2F-85夹爪 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find robotiq_2f_85_gripper_visualization)/urdf/robotiq_arg2f_85_macro.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;$(find robotiq_85_description)/urdf/robotiq_85_gripper.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;gazebo_grasp_fix&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_grasp_fix.so&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">arm</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;arm_name&gt;应该是一个单独的名字，不能和别的任何关节同名 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arm_name</span>&gt;</span>ur5_gripper<span class="tag">&lt;/<span class="name">arm_name</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;palm_link&gt;是和手指相连的关节 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">palm_link</span>&gt;</span>link6<span class="tag">&lt;/<span class="name">palm_link</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;gripper_link&gt;是会检测碰撞的关节 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gripper_link</span>&gt;</span>gripper_finger1_finger_tip_link<span class="tag">&lt;/<span class="name">gripper_link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gripper_link</span>&gt;</span>gripper_finger2_finger_tip_link<span class="tag">&lt;/<span class="name">gripper_link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gripper_link</span>&gt;</span>gripper_finger2_knuckle_link<span class="tag">&lt;/<span class="name">gripper_link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gripper_link</span>&gt;</span>gripper_finger1_knuckle_link<span class="tag">&lt;/<span class="name">gripper_link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gripper_link</span>&gt;</span>gripper_finger1_inner_knuckle_link<span class="tag">&lt;/<span class="name">gripper_link</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gripper_link</span>&gt;</span>gripper_finger2_inner_knuckle_link<span class="tag">&lt;/<span class="name">gripper_link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">arm</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">forces_angle_tolerance</span>&gt;</span>150<span class="tag">&lt;/<span class="name">forces_angle_tolerance</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 检测频率 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">update_rate</span>&gt;</span>130<span class="tag">&lt;/<span class="name">update_rate</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 检测为抓取状态的接触次数阈值 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">grip_count_threshold</span>&gt;</span>2<span class="tag">&lt;/<span class="name">grip_count_threshold</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">max_grip_count</span>&gt;</span>8<span class="tag">&lt;/<span class="name">max_grip_count</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 释放时的容忍度，超过这个就会把物体放下。数值越大，需要把夹爪打开更大才能释放物体 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">release_tolerance</span>&gt;</span>0.005<span class="tag">&lt;/<span class="name">release_tolerance</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">disable_collisions_on_attach</span>&gt;</span>true<span class="tag">&lt;/<span class="name">disable_collisions_on_attach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">contact_topic</span>&gt;</span>__default_topic__<span class="tag">&lt;/<span class="name">contact_topic</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将夹爪实例化，并设置夹爪和机械臂的关系（连接在tool0上） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:robotiq_85_gripper</span> <span class="attr">prefix</span>=<span class="string">&quot;&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;ee_link&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 $&#123;-pi/2&#125; 0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:robotiq_85_gripper</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 相机实例化，然后设置仿真位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;xacro:include filename=&quot;$(find realsense_ros_gazebo)/xacro/depthcam.xacro&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;xacro:realsense_d435 sensor_name=&quot;d435&quot; parent_link=&quot;tool0&quot; rate=&quot;10&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;origin rpy=&quot;0 $&#123;-pi/2&#125; 0 &quot; xyz=&quot;-0.1 0 0&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/xacro:realsense_d435&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改原来的launch文件，这里我为了后续方便，将原来的<code>display.launch</code>重命名了<code>display_e05_with_gripper.launch</code>，这里主要修改<code>&lt;param name=&quot;robot_description&quot; command=&quot;$(find xacro)/xacro '$(find e05)/urdf/e05.xacro'&quot; /&gt;  </code>这一行，添加刚刚创建的xacro文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;model&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;param name=&quot;robot_description&quot; textfile=&quot;$(find e05)/urdf/e05.xacro&quot; /&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro &#x27;$(find e05)/urdf/e05.xacro&#x27;&quot;</span> /&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find e05)/urdf.rviz&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>（2）Rviz中查看机器人</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd catkin_motion</span><br><span class="line">catkin_make</span><br><span class="line">source devel/setup.bash</span><br><span class="line">roslaunch e05 display_e05_with_gripper.launch</span><br></pre></td></tr></table></figure><p>左下角Add，添加机器人模型RobotModel。</p><p>左侧Fixed Frame选择base_link，即可看到机器人了。</p><p><img src="https://img.mahaofei.com/img/202312051357909.png" alt="image.png"></p><p><strong>（3）Gazebo中查看机器人</strong></p><p>创建一个<code>gazebo_e05_with_gripper.launch</code>文件，内容参考如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;gui&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span> <span class="attr">doc</span>=<span class="string">&quot;Starts gazebo gui&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;paused&quot;</span> <span class="attr">default</span>=<span class="string">&quot;false&quot;</span> <span class="attr">doc</span>=<span class="string">&quot;Starts gazebo in paused mode&quot;</span> /&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 启动仿真环境 后续有环境修改，可以替换此处的worlds/empty.world，改为例如&quot;$(find ur_gazebo)/worlds/table_custom.world&quot; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find gazebo_ros)/launch/empty_world.launch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;world_name&quot;</span> <span class="attr">default</span>=<span class="string">&quot;$(find gazebo_ros)/launch/empty_world.world&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;paused&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg paused)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;gui&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg gui)&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 加载TF --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;tf_footprint_base&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;tf&quot;</span> <span class="attr">type</span>=<span class="string">&quot;static_transform_publisher&quot;</span> <span class="attr">args</span>=<span class="string">&quot;0 0 0 0 0 0 base_link base_footprint 40&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 启动机器人 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find e05)/launch/display_e05_with_gripper.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 将 robot_description 发送到 gazebo 中生成机器人 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;node name=&quot;spawn_model&quot; pkg=&quot;gazebo_ros&quot; type=&quot;spawn_model&quot; args=&quot;-file $(find e05)/urdf/e05.urdf -urdf -model e05&quot; output=&quot;screen&quot; /&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;spawn_gazebo_model&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;gazebo_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawn_model&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-urdf -param robot_description -model robot -z 0&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;fake_joint_calibration&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;rostopic&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rostopic&quot;</span> <span class="attr">args</span>=<span class="string">&quot;pub /calibrated std_msgs/Bool true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时启动<code>launch</code>文件，可以看到gazebo环境中机器人。</p><p><img src="https://img.mahaofei.com/img/202312051949512.png" alt="image.png"></p><hr><p><strong>下面的创建moveit驱动，在mujoco中不需要，请直接跳到 2 模型导入mujoco</strong></p><h2 id="1-4-创建MoveIt驱动-2">1.4 创建MoveIt驱动</h2><p>此部分参考<a href="https://blog.csdn.net/Tepmoe/article/details/119533792">该文章</a>。</p><p>启动moveit设置助手</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun moveit_setup_assistant moveit_setup_assistant</span><br></pre></td></tr></table></figure><p>选择Create New Moveit Configuration Package，选择自己的<code>e05.xacro</code>文件，点击<code>Load Files</code></p><p><img src="https://img.mahaofei.com/img/202312051459862.png" alt="image.png"></p><p>左侧第二个的<code>Self-Collisions</code>是检查碰撞，一定将所有有可能发生碰撞的都勾选上，不然后续会出错。</p><p><img src="https://img.mahaofei.com/img/202312051948359.png" alt="image.png"></p><p>第三个<code>Virtual Joints</code>一般也不需要。</p><p>第四个<code>Planning Groups</code>是最重要的，我们需要设置，点击<code>Add Group</code>，分别配置机器人和末端夹爪。</p><p>机械臂：</p><ul><li>Group Name一般填manipulator就行</li><li>运动学求解器，选择kdl</li><li>路径规划算法，默认选择RRT Star就行</li><li>点击<code>Add Kin. Chain</code>，Baselink选择 base_link，Tiplink选择ee_link</li></ul><p><img src="https://img.mahaofei.com/img/202312051507765.png" alt="image.png"></p><p>末端夹爪的Group Name填上gripper，其它的都不用选。</p><p>第五个<code>Robot Poses</code>可以添加一些常用位置，便于我们快速使机器人运动到这些位置，例如</p><ul><li>up：机器人初始的竖直向上</li><li>pick：机器人准备夹取</li><li>open：夹爪打开</li><li>close：夹爪关闭</li></ul><p><img src="https://img.mahaofei.com/img/202312051513180.png" alt="image.png"></p><p>第六个<code>End Effectors</code>，按下图设置就行</p><p><img src="https://img.mahaofei.com/img/202312051533929.png" alt="image.png"></p><p>点击<code>Controllers</code>，点击左上角自动生成</p><p><img src="https://img.mahaofei.com/img/202312051534681.png" alt="image.png"></p><p>点击倒数第二个<code>Author Information</code>，填写名字和邮箱，不一定是真实的，但是不填无法生成功能包</p><p>最后<code>Generate Package</code>就可以了（在src目录下新建一个<code>e05_moveit</code>文件夹，选择此文件夹生成）</p><p>测试rviz是否能控制机器人</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">catkin_make</span><br><span class="line">source devel/setup.bash</span><br><span class="line">roslaunch e05_moveit demo.launch</span><br></pre></td></tr></table></figure><p>测试gazebo是否能联动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch e05_moveit demo_gazebo.launch</span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/202312052212812.png" alt="image.png"></p><p>测试时遇到了<strong>Rviz中的机械臂可以正常做规划和执行，但是Gazebo中机械臂没有反应</strong>的问题，解决方法参考<a href="https://blog.csdn.net/qq_50598558/article/details/114702163">此文章</a></p><h1>2 模型导入Mujoco</h1><h2 id="2-1-修改URDF">2.1 修改URDF</h2><p>在现有模型的xacro或urdf中的开头，添加下面的tag</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mujoco</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">compiler</span> </span></span><br><span class="line"><span class="tag"><span class="attr">meshdir</span>=<span class="string">&quot;../meshes_mujoco/&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">balanceinertia</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">discardvisual</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mujoco</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个文件夹<code>e05/meshes_mujoco</code>，将所有模型的stl文件放到这个文件夹下。</p><p>从xacro文件生成urdf文件的命令（如果有urdf文件则不需要此步）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun xacro xacro --inorder e05.xacro &gt; e05.urdf</span><br></pre></td></tr></table></figure><p>检查urdf文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">check_urdf e05.urdf</span><br></pre></td></tr></table></figure><p>在RViz中可视化：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch e05 display.launch model:=path/to/your/urdf/file</span><br></pre></td></tr></table></figure><h2 id="2-2-生成基本模型">2.2 生成基本模型</h2><p>在确认URDF模型没有问题后，进入MuJoCo的可执行文件夹内执行命令进行转换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.mujoco/mujoco210/bin</span><br></pre></td></tr></table></figure><p>官方说明可以转换成三种模型<code>.mjb/.txt/.xml</code>，我们一般用xml的格式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./compile /path/to/model.urdf /path/to/model.xml</span><br></pre></td></tr></table></figure><p>测试生成的基本模型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./simulate /path/to/model.xml</span><br></pre></td></tr></table></figure><p>可以看到我们的机器人出现在了仿真环境中，虽然会发现我们的模型直接瘫倒，但是这是因为没有添加actuator等配置。</p><p><img src="https://img.mahaofei.com/img/202312060913373.png" alt="image.png"></p><p>由于夹爪出现问题，一直无法使用，因此替换了<a href="https://github.com/vikashplus/robotiq_sim">vikashplus/robotiq_sim</a>的夹爪。</p><p>添加完成后的<code>e05_mujoco.xml</code>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mujoco</span> <span class="attr">model</span>=<span class="string">&quot;e05&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">compiler</span> <span class="attr">angle</span>=<span class="string">&quot;radian&quot;</span> <span class="attr">meshdir</span>=<span class="string">&quot;../meshes_mujoco/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">size</span> <span class="attr">njmax</span>=<span class="string">&quot;500&quot;</span> <span class="attr">nconmax</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载 E05 机械臂模型与基本配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">asset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span> <span class="attr">file</span>=<span class="string">&quot;e05/base_link.STL&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">name</span>=<span class="string">&quot;link1&quot;</span> <span class="attr">file</span>=<span class="string">&quot;e05/link1.STL&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">name</span>=<span class="string">&quot;link2&quot;</span> <span class="attr">file</span>=<span class="string">&quot;e05/link2.STL&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">name</span>=<span class="string">&quot;link3&quot;</span> <span class="attr">file</span>=<span class="string">&quot;e05/link3.STL&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">name</span>=<span class="string">&quot;link4&quot;</span> <span class="attr">file</span>=<span class="string">&quot;e05/link4.STL&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">name</span>=<span class="string">&quot;link5&quot;</span> <span class="attr">file</span>=<span class="string">&quot;e05/link5.STL&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">name</span>=<span class="string">&quot;link6&quot;</span> <span class="attr">file</span>=<span class="string">&quot;e05/link6.STL&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">texture</span> <span class="attr">type</span>=<span class="string">&quot;skybox&quot;</span> <span class="attr">builtin</span>=<span class="string">&quot;gradient&quot;</span> <span class="attr">rgb1</span>=<span class="string">&quot;0.3 0.5 0.7&quot;</span> <span class="attr">rgb2</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;512&quot;</span> <span class="attr">height</span>=<span class="string">&quot;3072&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;texture builtin=&quot;flat&quot; height=&quot;1278&quot; mark=&quot;cross&quot; markrgb=&quot;1 1 1&quot; name=&quot;texgeom&quot; random=&quot;0.01&quot; rgb1=&quot;0.8 0.6 0.4&quot; rgb2=&quot;0.8 0.6 0.4&quot; type=&quot;cube&quot; width=&quot;127&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;material name=&quot;geom&quot; texture=&quot;texgeom&quot; texuniform=&quot;true&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">texture</span> <span class="attr">type</span>=<span class="string">&quot;2d&quot;</span> <span class="attr">name</span>=<span class="string">&quot;groundplane&quot;</span> <span class="attr">builtin</span>=<span class="string">&quot;checker&quot;</span> <span class="attr">mark</span>=<span class="string">&quot;edge&quot;</span> <span class="attr">rgb1</span>=<span class="string">&quot;0.2 0.3 0.4&quot;</span> <span class="attr">rgb2</span>=<span class="string">&quot;0.1 0.2 0.3&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">markrgb</span>=<span class="string">&quot;0.8 0.8 0.8&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;groundplane&quot;</span> <span class="attr">texture</span>=<span class="string">&quot;groundplane&quot;</span> <span class="attr">texuniform</span>=<span class="string">&quot;true&quot;</span> <span class="attr">texrepeat</span>=<span class="string">&quot;5 5&quot;</span> <span class="attr">reflectance</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">asset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">default</span> <span class="attr">class</span>=<span class="string">&quot;E05&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">joint</span> <span class="attr">damping</span>=<span class="string">&#x27;200&#x27;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">default</span> <span class="attr">class</span>=<span class="string">&quot;E05e&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">joint</span> <span class="attr">damping</span>=<span class="string">&#x27;100&#x27;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 加载 Robotiq-2f-85 夹爪与基本配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;robotiq-2f-85-assets.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 机器人本体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">worldbody</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 仿真环境设置定义 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;body pos=&quot;-0.16 0.90 0.02&quot; euler=&quot;4.71238898 0 3.14159265&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;body euler=&quot;0 -0.82 0&quot;&gt;</span></span><br><span class="line"><span class="comment">                &lt;camera name=&quot;workbench_camera&quot; euler=&quot;0 0 0&quot; fovy=&quot;60&quot; pos=&quot;0 0 0.5&quot; /&gt;</span></span><br><span class="line"><span class="comment">            &lt;/body&gt;</span></span><br><span class="line"><span class="comment">        &lt;/body&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">light</span> <span class="attr">diffuse</span>=<span class="string">&quot;0.6 0.6 0.6&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 0 3&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">light</span> <span class="attr">diffuse</span>=<span class="string">&quot;0.6 0.6 0.6&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 -0.3 3&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;0 0.2 -0.8&quot;</span> <span class="attr">directional</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;light cutoff=&quot;100&quot; diffuse=&quot;0.5 0.5 0.5&quot; dir=&quot;-0 0 -1.3&quot; directional=&quot;true&quot; exponent=&quot;1&quot; pos=&quot;0 0 1.3&quot; specular=&quot;.1 .1 .1&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geom</span> <span class="attr">name</span>=<span class="string">&quot;floor&quot;</span> <span class="attr">size</span>=<span class="string">&quot;0 0 0.05&quot;</span> <span class="attr">type</span>=<span class="string">&quot;plane&quot;</span> <span class="attr">material</span>=<span class="string">&quot;groundplane&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 整个运动链 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;mesh&quot;</span> <span class="attr">contype</span>=<span class="string">&quot;0&quot;</span> <span class="attr">conaffinity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">group</span>=<span class="string">&quot;1&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0.501961 0.501961 0.501961 1&quot;</span> <span class="attr">mesh</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;mesh&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0.501961 0.501961 0.501961 1&quot;</span> <span class="attr">mesh</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span> <span class="attr">name</span>=<span class="string">&quot;link1&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 0 0.0735&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inertial</span> <span class="attr">pos</span>=<span class="string">&quot;-0.0218175 -1.34618e-05 0.0953928&quot;</span> <span class="attr">quat</span>=<span class="string">&quot;0.696024 -0.147787 -0.14991 0.686467&quot;</span> <span class="attr">mass</span>=<span class="string">&quot;2.58559&quot;</span> <span class="attr">diaginertia</span>=<span class="string">&quot;0.0143616 0.0141793 0.00506835&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">joint</span> <span class="attr">class</span>=<span class="string">&quot;E05&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint1&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">axis</span>=<span class="string">&quot;0 0 1&quot;</span> <span class="attr">limited</span>=<span class="string">&quot;true&quot;</span> <span class="attr">range</span>=<span class="string">&quot;-3.14159 3.14159&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;mesh&quot;</span> <span class="attr">contype</span>=<span class="string">&quot;0&quot;</span> <span class="attr">conaffinity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">group</span>=<span class="string">&quot;1&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0.772549 0.752941 0.733333 1&quot;</span> <span class="attr">mesh</span>=<span class="string">&quot;link1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;mesh&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0.772549 0.752941 0.733333 1&quot;</span> <span class="attr">mesh</span>=<span class="string">&quot;link1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">body</span> <span class="attr">name</span>=<span class="string">&quot;link2&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 0 0.1465&quot;</span> <span class="attr">quat</span>=<span class="string">&quot;0.5 -0.5 -0.5 0.5&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inertial</span> <span class="attr">pos</span>=<span class="string">&quot;4.42659e-06 -0.15814 0.130501&quot;</span> <span class="attr">quat</span>=<span class="string">&quot;0.491565 0.508215 -0.508335 0.491606&quot;</span> <span class="attr">mass</span>=<span class="string">&quot;1.21311&quot;</span> <span class="attr">diaginertia</span>=<span class="string">&quot;0.0159807 0.0154676 0.00149746&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">joint</span> <span class="attr">class</span>=<span class="string">&quot;E05&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint2&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">axis</span>=<span class="string">&quot;0 0 -1&quot;</span> <span class="attr">limited</span>=<span class="string">&quot;true&quot;</span> <span class="attr">range</span>=<span class="string">&quot;-3.14159 3.14159&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;mesh&quot;</span> <span class="attr">contype</span>=<span class="string">&quot;0&quot;</span> <span class="attr">conaffinity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">group</span>=<span class="string">&quot;1&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0.792157 0.819608 0.933333 1&quot;</span> <span class="attr">mesh</span>=<span class="string">&quot;link2&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;mesh&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0.792157 0.819608 0.933333 1&quot;</span> <span class="attr">mesh</span>=<span class="string">&quot;link2&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">body</span> <span class="attr">name</span>=<span class="string">&quot;link3&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 -0.38 0&quot;</span> <span class="attr">quat</span>=<span class="string">&quot;0.707107 0 0 0.707107&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inertial</span> <span class="attr">pos</span>=<span class="string">&quot;-0.0414786 1.14213e-05 0.0194164&quot;</span> <span class="attr">quat</span>=<span class="string">&quot;0.601987 0.371892 0.373044 0.600122&quot;</span> <span class="attr">mass</span>=<span class="string">&quot;1.53239&quot;</span> <span class="attr">diaginertia</span>=<span class="string">&quot;0.00608826 0.00587729 0.00215529&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">class</span>=<span class="string">&quot;E05&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint3&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">axis</span>=<span class="string">&quot;0 0 -1&quot;</span> <span class="attr">limited</span>=<span class="string">&quot;true&quot;</span> <span class="attr">range</span>=<span class="string">&quot;-3.14159 3.14159&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;mesh&quot;</span> <span class="attr">contype</span>=<span class="string">&quot;0&quot;</span> <span class="attr">conaffinity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">group</span>=<span class="string">&quot;1&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0.866667 0.866667 0.890196 1&quot;</span> <span class="attr">mesh</span>=<span class="string">&quot;link3&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;mesh&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0.866667 0.866667 0.890196 1&quot;</span> <span class="attr">mesh</span>=<span class="string">&quot;link3&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">body</span> <span class="attr">name</span>=<span class="string">&quot;link4&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">quat</span>=<span class="string">&quot;0.5 -0.5 0.5 -0.5&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inertial</span> <span class="attr">pos</span>=<span class="string">&quot;3.8238e-05 -0.0589656 -0.257081&quot;</span> <span class="attr">quat</span>=<span class="string">&quot;0.988248 -0.152858 -0.000415939 -0.000860755&quot;</span> <span class="attr">mass</span>=<span class="string">&quot;0.475189&quot;</span> <span class="attr">diaginertia</span>=<span class="string">&quot;0.00538322 0.0052745 0.000778119&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">class</span>=<span class="string">&quot;E05e&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint4&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">axis</span>=<span class="string">&quot;0 0 1&quot;</span> <span class="attr">limited</span>=<span class="string">&quot;true&quot;</span> <span class="attr">range</span>=<span class="string">&quot;-3.14159 3.14159&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;mesh&quot;</span> <span class="attr">contype</span>=<span class="string">&quot;0&quot;</span> <span class="attr">conaffinity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">group</span>=<span class="string">&quot;1&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0.772549 0.752941 0.733333 1&quot;</span> <span class="attr">mesh</span>=<span class="string">&quot;link4&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;mesh&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0.772549 0.752941 0.733333 1&quot;</span> <span class="attr">mesh</span>=<span class="string">&quot;link4&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">body</span> <span class="attr">name</span>=<span class="string">&quot;link5&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 0 -0.42&quot;</span> <span class="attr">quat</span>=<span class="string">&quot;0.707105 -0.707108 0 0&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inertial</span> <span class="attr">pos</span>=<span class="string">&quot;1.42418e-06 0.0365906 -0.0159722&quot;</span> <span class="attr">quat</span>=<span class="string">&quot;0.527641 0.849468 0.000113207 -7.90953e-05&quot;</span> <span class="attr">mass</span>=<span class="string">&quot;0.811919&quot;</span> <span class="attr">diaginertia</span>=<span class="string">&quot;0.00229898 0.00217056 0.000742684&quot;</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">joint</span> <span class="attr">class</span>=<span class="string">&quot;E05e&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint5&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">axis</span>=<span class="string">&quot;0 0 1&quot;</span> <span class="attr">limited</span>=<span class="string">&quot;true&quot;</span> <span class="attr">range</span>=<span class="string">&quot;-3.14159 3.14159&quot;</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;mesh&quot;</span> <span class="attr">contype</span>=<span class="string">&quot;0&quot;</span> <span class="attr">conaffinity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">group</span>=<span class="string">&quot;1&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0.792157 0.819608 0.933333 1&quot;</span> <span class="attr">mesh</span>=<span class="string">&quot;link5&quot;</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;mesh&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0.792157 0.819608 0.933333 1&quot;</span> <span class="attr">mesh</span>=<span class="string">&quot;link5&quot;</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">body</span> <span class="attr">name</span>=<span class="string">&quot;link6&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 0.155 0&quot;</span> <span class="attr">quat</span>=<span class="string">&quot;0.707105 -0.707108 0 0&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">inertial</span> <span class="attr">pos</span>=<span class="string">&quot;-4.84703e-06 0.00109667 -0.0032406&quot;</span> <span class="attr">quat</span>=<span class="string">&quot;0.999926 0.0120786 2.3554e-05 -0.00120144&quot;</span> <span class="attr">mass</span>=<span class="string">&quot;0.75038&quot;</span> <span class="attr">diaginertia</span>=<span class="string">&quot;0.00129697 0.00122959 0.00051245&quot;</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">joint</span> <span class="attr">class</span>=<span class="string">&quot;E05e&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint6&quot;</span> <span class="attr">pos</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">axis</span>=<span class="string">&quot;0 0 -1&quot;</span> <span class="attr">limited</span>=<span class="string">&quot;true&quot;</span> <span class="attr">range</span>=<span class="string">&quot;-3.14159 3.14159&quot;</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;mesh&quot;</span> <span class="attr">contype</span>=<span class="string">&quot;0&quot;</span> <span class="attr">conaffinity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">group</span>=<span class="string">&quot;1&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0.776471 0.756863 0.737255 1&quot;</span> <span class="attr">mesh</span>=<span class="string">&quot;link6&quot;</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">geom</span> <span class="attr">type</span>=<span class="string">&quot;mesh&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;0.776471 0.756863 0.737255 1&quot;</span> <span class="attr">mesh</span>=<span class="string">&quot;link6&quot;</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">geom</span> <span class="attr">size</span>=<span class="string">&quot;0.01&quot;</span> <span class="attr">contype</span>=<span class="string">&quot;0&quot;</span> <span class="attr">conaffinity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">group</span>=<span class="string">&quot;1&quot;</span> <span class="attr">rgba</span>=<span class="string">&quot;1 0 0 1&quot;</span> /&gt;</span></span><br><span class="line">                                </span><br><span class="line">                                <span class="comment">&lt;!-- 导入 Robotiq 2f-85 运动链 --&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;robotiq-2f-85-chain.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">worldbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">actuator</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- E05 机械臂驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">position</span> <span class="attr">name</span>=<span class="string">&quot;joint1&quot;</span> <span class="attr">ctrllimited</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ctrlrange</span>=<span class="string">&quot;-3.14159 3.14159&quot;</span> <span class="attr">joint</span>=<span class="string">&quot;joint1&quot;</span> <span class="attr">kp</span>=<span class="string">&quot;4000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">position</span> <span class="attr">name</span>=<span class="string">&quot;joint2&quot;</span> <span class="attr">ctrllimited</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ctrlrange</span>=<span class="string">&quot;-1.57 1.57&quot;</span> <span class="attr">joint</span>=<span class="string">&quot;joint2&quot;</span> <span class="attr">kp</span>=<span class="string">&quot;3000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">position</span> <span class="attr">name</span>=<span class="string">&quot;joint3&quot;</span> <span class="attr">ctrllimited</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ctrlrange</span>=<span class="string">&quot;-3.14159 3.14159&quot;</span> <span class="attr">joint</span>=<span class="string">&quot;joint3&quot;</span> <span class="attr">kp</span>=<span class="string">&quot;3000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">position</span> <span class="attr">name</span>=<span class="string">&quot;joint4&quot;</span> <span class="attr">ctrllimited</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ctrlrange</span>=<span class="string">&quot;-3.14159 3.14159&quot;</span> <span class="attr">joint</span>=<span class="string">&quot;joint4&quot;</span> <span class="attr">kp</span>=<span class="string">&quot;2000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">position</span> <span class="attr">name</span>=<span class="string">&quot;joint5&quot;</span> <span class="attr">ctrllimited</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ctrlrange</span>=<span class="string">&quot;-3.14159 3.14159&quot;</span> <span class="attr">joint</span>=<span class="string">&quot;joint5&quot;</span> <span class="attr">kp</span>=<span class="string">&quot;2000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">position</span> <span class="attr">name</span>=<span class="string">&quot;joint6&quot;</span> <span class="attr">ctrllimited</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ctrlrange</span>=<span class="string">&quot;-3.14159 3.14159&quot;</span> <span class="attr">joint</span>=<span class="string">&quot;joint6&quot;</span> <span class="attr">kp</span>=<span class="string">&quot;2000&quot;</span>/&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mujoco</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加完成后效果如下：</p><blockquote><p>注意，需要在每个 joint 标签中加入 damping 属性，例如 <code>damping='200'</code> ，否则会出现模型持续抖动闪烁，无法控制的问题。</p></blockquote><p><img src="https://img.mahaofei.com/img/202312061457266.png" alt="image.png"></p><p>整理文件结构，添加桌子、小方块，移动机器人位置和相机视角，最后得到下面的仿真环境。具体代码已开源至<a href="https://github.com/HaofeiMa/E05_Robotiq-2f-85">Github</a>:</p><p><img src="https://img.mahaofei.com/img/202312062141059.png" alt="image.png"></p><h1>3 Mujoco 常用命令</h1><h2 id="3-1-模型加载与初始化配置">3.1 模型加载与初始化配置</h2><p>模型加载：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = mujoco_py.load_model_from_path(<span class="string">&quot;path/to/.xml&quot;</span>)</span><br></pre></td></tr></table></figure><p>创建mujoco仿真实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sim = mujoco_py.MjSim(model)</span><br></pre></td></tr></table></figure><p>渲染设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建渲染器</span></span><br><span class="line">viewer = mujoco_py.MjViewer(sim)</span><br><span class="line"><span class="comment"># 设置模拟环境视角</span></span><br><span class="line">lookat = [<span class="number">1.27998563</span>, <span class="number">0.68635066</span>, <span class="number">0.55350562</span>]</span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">viewer.cam.lookat[idx] = lookat[idx]</span><br><span class="line">viewer.cam.distance = <span class="number">1.4547035766991275</span></span><br><span class="line">viewer.cam.azimuth = <span class="number">134.95215311004816</span></span><br><span class="line">viewer.cam.elevation = -<span class="number">32.488038277512022</span></span><br></pre></td></tr></table></figure><p>初始姿态设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">initial_qpos = &#123;</span><br><span class="line"><span class="string">&#x27;joint1&#x27;</span>: np.pi/<span class="number">2</span>,</span><br><span class="line"><span class="string">&#x27;joint2&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;joint3&#x27;</span>: np.pi/<span class="number">2</span>,</span><br><span class="line"><span class="string">&#x27;joint4&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;joint5&#x27;</span>: np.pi/<span class="number">2</span>,</span><br><span class="line"><span class="string">&#x27;joint6&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;robotiq_2f_85_right_driver_joint&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;object0:joint&#x27;</span>: [<span class="number">1</span>, <span class="number">0.45</span>, <span class="number">0.425</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, value <span class="keyword">in</span> initial_qpos.items():</span><br><span class="line">sim.data.set_joint_qpos(name, value)</span><br><span class="line">sim.forward()</span><br></pre></td></tr></table></figure><p>主函数调用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">sim.step()</span><br><span class="line">viewer.render()</span><br></pre></td></tr></table></figure><h2 id="3-2-基本信息查询与设置">3.2 基本信息查询与设置</h2><p><strong>（1）body</strong></p><p>打印<code>body</code>位置与姿态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body_idx = sim.model.body_name2id(<span class="string">&quot;link6&quot;</span>)</span><br><span class="line"><span class="comment"># 打印 body 坐标</span></span><br><span class="line"><span class="built_in">print</span>(sim.data.body_xpos[body_idx])</span><br><span class="line"><span class="comment"># 打印 body 四元数</span></span><br><span class="line"><span class="built_in">print</span>(sim.data.body_xquat[body_idx])</span><br></pre></td></tr></table></figure><p><strong>（2）site</strong></p><p>打印<code>site</code>位置与姿态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(sim.data.get_site_xpos(<span class="string">&#x27;site_name&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(sim.data.get_site_xquat(<span class="string">&#x27;site_name&#x27;</span>))</span><br></pre></td></tr></table></figure><p><strong>（3）joint</strong></p><p>打印<code>joint</code>值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">joint_idx = model.joint_name2id(<span class="string">&quot;joint_name&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(sim.data.qpos[model.jnt_qposadr[joint_idx]])</span><br></pre></td></tr></table></figure><p>设置<code>joint</code>值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sim.data.set_joint_qpos(<span class="string">&quot;joint_name&quot;</span>, value)</span><br></pre></td></tr></table></figure><p><strong>（4）actuator</strong></p><p>打印<code>actuator</code>状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(sim.data.ctrl)</span><br></pre></td></tr></table></figure><p>设置<code>actuator</code>值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sim.data.ctrl[actuator_index] = value</span><br></pre></td></tr></table></figure><p><strong>（5）mocap</strong></p><p>打印<code>mocap</code>位置和姿态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(sim.data.mocap_pos)</span><br><span class="line"><span class="built_in">print</span>(sim.data.mocap_quat)</span><br></pre></td></tr></table></figure><p>设置<code>mocap</code>位置和姿态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">sim.data.mocap_pos[:] = np.array([x, y, z])</span><br><span class="line">sim.data.mocap_quat[:] = np.array([quat_1, quat_2, quat_3, quat_4])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">sim.data.set_mocap_pos(<span class="string">&#x27;mocap_name&#x27;</span>, np.array([x, y, z]))</span><br><span class="line">sim.data.set_mocap_quat(<span class="string">&#x27;mocap_name&#x27;</span>, np.array([quat_1, quat_2, quat_3, quat_4]))</span><br></pre></td></tr></table></figure><blockquote><p>参考链接：</p><ol><li><a href="https://www.bilibili.com/video/BV1Tx411o7rH">SUES木鸢机甲工作室. SolidWorks模型导出urdf （古月居老师）. Bilibili</a></li><li><a href="https://zhuanlan.zhihu.com/p/99991106">Robot Learning. MuJoCo的机器人建模. 知乎</a></li><li><a href="https://roboti.us/forum/index.php?resources/">MuJoCo官方论坛</a></li><li><a href="http://www.mujoco.org/book/index.html">MoJoCo官方文档</a></li><li><a href="https://github.com/vikashplus/robotiq_sim">vikashplus/robotiq_sim.git</a></li></ol></blockquote>]]></content>
    
    
    <summary type="html">将自定义机器人模型导入进Mujoco中，为后续强化学习搭建仿真环境基础。</summary>
    
    
    
    <category term="机器人" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    <category term="实验设备" scheme="https://www.mahaofei.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/%E5%AE%9E%E9%AA%8C%E8%AE%BE%E5%A4%87/"/>
    
    
    <category term="强化学习" scheme="https://www.mahaofei.com/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="实验" scheme="https://www.mahaofei.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
    <category term="MuJoCo" scheme="https://www.mahaofei.com/tags/MuJoCo/"/>
    
  </entry>
  
  <entry>
    <title>【笔记工具】Markdown语法与Obsidian编辑器</title>
    <link href="https://www.mahaofei.com/post/obsidian.html"/>
    <id>https://www.mahaofei.com/post/obsidian.html</id>
    <published>2023-11-29T12:34:55.000Z</published>
    <updated>2023-11-29T12:34:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1>1 Markdown</h1><h2 id="1-1-什么是-Markdown">1.1 什么是 Markdown</h2><p>Markdown 是一种是目前互联网上最流行的写作语言，它使用一些简单的符号来标记文本格式，其简洁的语法、优美的格式以及强大的软件支持深受广大网友的喜爱。</p><p>Markdown 使用易读易写的纯文本格式编写文档，然后转换成有效的 HTML 文档。它的学习门槛很低，你可能只需花几分钟就可以入门了。</p><p>目前基本上所有的博客网站、在线文档等都支持 markdown 格式，尤其广泛应用于程序员领域，例如 Github 中的所有说明文档一般都是 <code>.md</code> 格式。</p><h2 id="1-2-为什么使用-Markdown">1.2 为什么使用 Markdown</h2><p>Markdown 的出现主要是为了解决以下通点：</p><ul><li><strong>软件不兼容</strong>：例如不同版本的word、或者不同软件如office与wps，打开同一文档，可能有的正常，有的格式错误，有的乱码。</li><li><strong>排版浪费时间</strong>：功能越多，我们就容易想得越多，遇到的问题也会越多。对于专注于写作的场景，有时可能并不需要那么多选项格式，例如行高行距字体颜色等等。而是要关注内容。同时word中每次写完一段文字，都要再手动为它选择格式，多的这一步操作可能就会打断思路。而markdown可以让你仅通过键盘，在写文档的同时完成格式的设置。</li><li><strong>格式不兼容</strong>：复制同一段文字到另一个文档中，很有可能格式全乱了，同理复制到网页或从其他地方复制过来，格式也都是很麻烦的问题。</li></ul><p>为了解决这些问题，Markdown 实现了以下功能：</p><ul><li><strong>语法简单</strong>：只需要一些简单地标记符号，例如<code># * &gt; - [] () =</code></li><li><strong>兼容性强</strong>：所有的编辑器都可以打开 <code>.md</code> 文件，甚至记事本和vim都可以编辑</li><li><strong>导出方便</strong>：可以导出PDF、也可以嵌入HTML、Latex等格式</li><li><strong>专注内容</strong>：写作时双手无需脱离键盘，再也不用纠结排版问题</li></ul><h2 id="1-3-Markdown-怎么用">1.3 Markdown 怎么用</h2><p>虽然所有的编辑器都可以编辑 Markdown 文件，但是为了更加直观，并且让我们有更好地写作体验，这里推荐两款所见即所得的 Markdown 编辑神器：<a href="https://obsidian.md/">Obsidian</a>和<a href="https://typora.io/">Typora</a>。前者是我现在一直在用的笔记软件，作为我的知识库管理工具，后者在我写作初期使用过，编辑体验也非常不错。</p><p>下图为 Obsidian：</p><p><img src="https://img.mahaofei.com/img/202311292058718.png" alt="image.png"></p><p>下图为 Typora：</p><p><img src="https://img.mahaofei.com/img/202311292059046.png" alt="image.png"></p><p>打开自己的 Markdown 编辑器，新建一个文件，就可以开始自己的创作了。</p><h2 id="1-4-Markdown-基本语法">1.4 Markdown 基本语法</h2><p>以下是一些比较常用的 Markdown 语法，按照我的常用顺序排列：</p><h3 id="1-标题">1. 标题</h3><p>使用方式为：<code>#</code> + <code>空格</code> + <code>标题文字</code>，注意<code>#</code>号与<code>标题文字</code>之间的<code>空格</code>：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h1>一级标题</h1><h2 id="二级标题">二级标题</h2><h3 id="三级标题">三级标题</h3><h4 id="四级标题">四级标题</h4><h5 id="五级标题">五级标题</h5><h6 id="六级标题">六级标题</h6><h3 id="2-倾斜">2. 倾斜</h3><p>使用方式：<code>*被倾斜的文字*</code> 或者 <code>_被倾斜的文字_</code>，快捷键 <code>Ctrl+I</code>， 例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这里是正常文字，<span class="emphasis">*这里是被倾斜的文字*</span>，这里又是正常文字</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_下划线在Obsidian中好像只能倾斜整行_</span></span><br></pre></td></tr></table></figure><p>这里是正常文字，<em>这里是被倾斜的文字</em>，这里又是正常文字</p><p><em>下划线在 Obsidian 中好像只能倾斜整行</em></p><h3 id="3-加粗">3. 加粗</h3><p>使用方式：<code>**被加粗的文字**</code> 或 <code>__被加粗的文字__</code>，快捷键 <code>Ctrl+B</code>， 例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这里是正常文字，<span class="strong">**这里是被加粗的文字**</span>，这里又是正常文字</span><br><span class="line"></span><br><span class="line"><span class="strong">__下划线在Obsidian中好像只能加粗整行__</span></span><br></pre></td></tr></table></figure><p>这里是正常文字，<strong>这里是被加粗的文字</strong>，这里又是正常文字</p><p><strong>下划线在 Obsidian 中好像只能加粗整行</strong></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*当然倾斜和加粗可以一起使用，那样就是三个星号*</span>**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">__<span class="emphasis">_也可以是三个下划线_</span>__</span></span><br></pre></td></tr></table></figure><p><em><strong>当然倾斜和加粗可以一起使用，那样就是三个星号</strong></em></p><p><em><strong>也可以是三个下划线</strong></em></p><h3 id="4-高亮">4. 高亮</h3><p>使用方式如下</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里是正常文字，==这里是被高亮的文字，但是不能换行，如果要对多段高亮，需要每一段使用高亮标记==，这里又是正常文字</span><br></pre></td></tr></table></figure><p>这里是正常文字，==这里是被加粗的文字，但是不能换行，如果要对多段加粗，需要每一段使用加粗标记==，这里又是正常文字</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*==当然倾斜和加粗可以一起使用，就像这样==*</span>**</span></span><br><span class="line"></span><br><span class="line">==<span class="strong">**<span class="emphasis">*也可以是这样*</span>**</span>==</span><br><span class="line"></span><br><span class="line">==<span class="strong">__<span class="emphasis">_也可以是下划线_</span>__</span>==</span><br></pre></td></tr></table></figure><p>==<em><strong>当然倾斜和加粗可以一起使用，那样就是三个星号</strong></em>==</p><p>==<em><strong>也可以是这样</strong></em>==</p><p>==<em><strong>也可以是下划线</strong></em>==</p><h3 id="5-列表">5. 列表</h3><p><strong>无序列表</strong></p><p>使用<code>+ -</code>标记无序列表，使用方式为<code>+/-</code>+<code>空格</code>+<code>文字</code>，注意<code>+/-</code>号与<code>文字</code>之间的<code>空格</code>。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 这是无序列表的第一项</span><br><span class="line"><span class="bullet">-</span> 这是第二项</span><br><span class="line"><span class="bullet">-</span> 这是第三项</span><br></pre></td></tr></table></figure><ul><li>这是无序列表的第一项</li><li>这是第二项</li><li>这是第三项</li></ul><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+</span> 这是无序列表的第一项</span><br><span class="line"><span class="bullet">+</span> 这是第二项</span><br><span class="line"><span class="bullet">+</span> 这是第三项</span><br></pre></td></tr></table></figure><ul><li>这是无序列表的第一项</li><li>这是第二项</li><li>这是第三项</li></ul><p><strong>有序列表</strong></p><p>使用方式为<code>数字</code>+<code>.</code>+<code>空格</code>+<code>文字</code>。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h3 id="6-引用">6. 引用</h3><p>使用<code>&gt;</code>标记引用的内容，使用方式为<code>&gt;</code> + <code>空格</code> + <code>引用文字</code>，注意<code>&gt;</code>号与<code>文字</code>之间的<code>空格</code>。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是被引用的内容</span></span><br></pre></td></tr></table></figure><blockquote><p>这是被引用的内容</p></blockquote><h3 id="7-代码">7. 代码</h3><p>代码分为行内代码和代码块。</p><p><strong>行内代码</strong>，使用方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里是正常文字`code`文字继续</span><br></pre></td></tr></table></figure><p>这里是正常文字<code>code</code>文字继续</p><p><strong>代码块</strong>，使用方式如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```代码格式（c, c++, python, html, java, css, yaml, shell ...)</span></span><br><span class="line"><span class="code">代码内容</span></span><br><span class="line"><span class="code">```</span>ㅤㅤ</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```python</span></span><br><span class="line"><span class="code">import numpy as np</span></span><br><span class="line"><span class="code">np.array([1, 2, 3])</span></span><br><span class="line"><span class="code">```</span>ㅤㅤ</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h3 id="8-链接">8. 链接</h3><p>链接的使用格式如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接显示文字</span>](<span class="link">链接地址</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">马浩飞丨博客</span>](<span class="link">https://www.mahaofei.com</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.mahaofei.com">马浩飞丨博客</a></p><h3 id="9-图片">9. 图片</h3><p>图片的使用格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![](图片地址)</span><br><span class="line">![](https://img.mahaofei.com/img/202311292058718.png)</span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/202311292058718.png" alt=""></p><h3 id="10-分割线">10. 分割线</h3><p>分割线使用三个以上的<code>*</code>或<code>-</code>或<code>_</code>组成，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">分割线之上</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">或者使用</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">再或者</span><br><span class="line"></span><br><span class="line">___</span><br><span class="line"></span><br><span class="line">就这些</span><br></pre></td></tr></table></figure><p>分割线之上</p><hr><p>或者使用</p><hr><p>再或者</p><hr><p>就这些</p><h3 id="11-表格">11. 表格</h3><p>表格的使用可能稍微有些繁琐，如果是在Obsidian中，可以有些插件简化表格的创建方式。</p><p>常规使用方式如下，注意中间的<code>|-|-|-|</code>是不能删的，表格有几列就写几个<code>|-|</code>：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|表头1|表头2|表头3|</span><br><span class="line">|-|-|-|</span><br><span class="line">|表格内容1|表格内容2|表格内容3|</span><br><span class="line">|表格内容4|表格内容5|表格内容6|</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头1</th><th>表头2</th><th>表头3</th></tr></thead><tbody><tr><td>表格内容1</td><td>表格内容2</td><td>表格内容3</td></tr><tr><td>表格内容4</td><td>表格内容5</td><td>表格内容6</td></tr></tbody></table><blockquote><p>哦对，补充一下，为了表示直观，markdown使用空行分割两个段落</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一段</span><br><span class="line"></span><br><span class="line">第二段</span><br></pre></td></tr></table></figure></blockquote><h3 id="12-callout">12.callout</h3><p>使用<code>&gt; [!note] </code>就可以创建一个callout模块，例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; [!INFO]</span></span><br><span class="line"><span class="quote">&gt; 这里是callout模块</span></span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/202401031849885.png" alt="image.png"></p><p>默认有12种风格。每一种有不同的颜色和图标（标题中的单词可以替换 <code>&gt; ![替换]</code> 实现下面效果）。</p><p><img src="https://img.mahaofei.com/img/202401031850041.png" alt="image.png"></p><p>可以使用 <code>+</code> 默认展开或者 <code>-</code> 默认折叠正文部分。例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; [!FAQ]- 点击就可以展开了</span></span><br><span class="line"><span class="quote">&gt; 这里是callout的内容</span></span><br></pre></td></tr></table></figure><blockquote><p>[!FAQ]- 点击就可以展开了<br>这里是callout的内容</p></blockquote><h1>2 Obsidian</h1><h2 id="2-1-为什么使用-Obsidian">2.1 为什么使用 Obsidian</h2><p><strong>Obsidian 很适合用来管理多层级多文件，因此很适合用来构建知识库</strong></p><p>最初我使用 Obsidian 是因为我写的文章越来越多，当时使用 Typora 管理起来感觉不是很方便，而且那时正逢 Typora 更新至1.0后开始收费，而 Obsidian 开始展露头角，因此我尝试使用了 Obsidian，从此在我的所有设备的dock栏上，一定会有一个 Obsidian，只要我在使用电脑，Obsidian一定是处于打开状态的。</p><p>下图是我现在的 Obsidian 图</p><ul><li>左边是文件列表、历史打开文件</li><li>右边是任务列表和日历（也可以切换为文档目录）</li></ul><p><img src="https://img.mahaofei.com/img/202311292140615.png" alt="image.png"></p><p>我自己的博客内容全部使用Obsidian存储，同时记录我的一些笔记和平时遇到的各种Bug，这样遇到相似问题时，直接使用全局搜索，就可以快速找到解决办法，亲测已经帮我解决了好多次问题，节约了大把时间。</p><p><strong>个人不放心云笔记，Obsidian 是纯本地化文件编辑与管理</strong></p><p>由于各种原因，我不想将我自己记录的一些内容全部放到云笔记上，一旦宕机或跑路，会是一件非常麻烦的问题，例如有道云笔记、印象笔记等等，OneNote等我也用过，但是迁移性太差，如果想换别的笔记软件，之前记录的东西根本不能导出。</p><p>而Obsidian则是使用的本地化文件管理，左侧的文件列表就是本地中真实存在的一个个文件夹和<code>.md</code>文件。在多设备同步方面，推荐坚果云或者OneDrive实现多设备的实时同步。</p><p><strong>Obsidian 的功能非常丰富，是一个笔记软件，又不止是一个笔记软件</strong></p><p>对于我来说，我使用 Obsidian 完成了很多功能，当然最主要的还是记笔记，包括学习笔记、Bug 笔记、组会记录等等。</p><p>同时使用<code>custom frames</code>插件能够将网页嵌入到 Obsidian 中，我将滴答清单加入了进来，这样就实现了上图右侧的任务管理功能。</p><p>此外我还写了一个自动化脚本，根据我的笔记库的内容修改，每天定时更新博客内容。</p><p><strong>Obsidian 颜值非常高，有各种各样主题，而且几乎所有的样式格式都可以自定义修改</strong></p><p>在外观这方面，我也折腾了一段时间，最终还是使用 <code>Blue Topaz</code>主题，辅以<code>Style Settings</code> 插件中的一些个性化设置。总的来说没有修改太多。</p><p>网上也有一些开源的高度修改的库模板，下载下来就可以直接用，但是我找了一圈，发现自己还是更喜欢简约直接的，各位可以根据自己的审美找找看。</p><h2 id="2-2-Obsidian-的特色功能">2.2 Obsidian 的特色功能</h2><p>这里只介绍大致功能，具体使用方法，请参考 <a href="https://publish.obsidian.md/help-zh/%E7%94%B1%E6%AD%A4%E5%BC%80%E5%A7%8B">Obsidian 官方教程</a>，或者下载Obsidian软件后，第一次打开会有示例库，我当时就是阅读那个学习的。</p><p><strong>双向链接</strong></p><p>不确定 Obsidian 是不是第一个双链笔记软件，但它也是最早的一批了。</p><p>双向链接，顾名思义就是双向引用的链接，例如我在A文章中使用<code>[[B文章的标题或者小标题]]</code>，就可以实现文章和文章之间的链接，有点类似于网页链接，但是它是在笔记软件内跳转的。</p><p>在被引用的笔记中，你也可以看到这篇笔记被哪些其它笔记引用了。例如可能某篇<code>[[Ubuntu系统Buglist]]</code>中的内容就可能被我在写其它实验笔记的时候引用很多次。</p><p>这样所有的笔记相互链接，就会形成一个庞大的关系图谱，Obsidian中也可以查看这个关系图谱。</p><p>此外，双向链接还可以使用<code>![[文件名]]</code>或<code>![[文件名#小节标题]]</code>这样的格式，在引用的同时，将那篇笔记的全部或某一节插入到当前文章中，例如：</p><p><img src="https://img.mahaofei.com/img/202311292210694.png" alt="image.png"></p><p><strong>模板</strong></p><p>Obsidian 提供了模板的功能。</p><p>我创建了一个文件夹保存所有的模板。当我新建笔记后，可以直接插入现有的模板，例如我经常使用的论文笔记模板</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># X 论文名称</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; <span class="strong">**标题**</span>：</span></span><br><span class="line"><span class="quote">&gt; <span class="strong">**作者团队**</span>：</span></span><br><span class="line"><span class="quote">&gt; <span class="strong">**期刊会议**</span>：</span></span><br><span class="line"><span class="quote">&gt; <span class="strong">**时间**</span>：</span></span><br><span class="line"><span class="quote">&gt; <span class="strong">**代码**</span>：</span></span><br><span class="line"></span><br><span class="line"><span class="section">## X.1 目标问题</span></span><br><span class="line"></span><br><span class="line"><span class="section">## X.2 方法</span></span><br><span class="line"></span><br><span class="line"><span class="section">## X.3 思考</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img.mahaofei.com/img/202311292215167.png" alt="image.png"></p><p><strong>工作区保存与快速恢复</strong></p><p>有的时候我可能会同时打开好几个笔记，比如实验笔记、论文笔记、Buglist等等，我会把他们分屏分开放在不同的位置，例如这样：</p><p><img src="https://img.mahaofei.com/img/202311292218056.png" alt="image.png"></p><p>但是此时如果我需要去做另一件事，比如开会，我就需要把当前的这些笔记都关掉，打开会议记录，但是下次想要在恢复这个布局又比较麻烦。</p><p>这时候就可以点击左侧的<code>管理工作空间布局按钮</code>，保存工作空间布局，然后就可以放心关闭了，下次使用点击加载工作空间布局就可以一键恢复之前的布局。</p><p><strong>丰富的插件系统</strong></p><p>Obsidian 提供了丰富的插件系统，有些可以增加 Obsidian 的功能，有些则是美化外观，有些可以提高编辑体验。</p><p>具体哪些插件我用过比较好用的，后续会持续在本文下面更新。</p><p><strong>录音</strong></p><p>写这篇文章，在查资料的时候突然发现Obsidian出了录音功能，在【设置-核心插件】里打开即可使用，打开后会在主页面最左侧添加一个图标，按下即可开始录音。</p><p>录音完成后，会保存在当前笔记文件中。</p><p><img src="https://img.mahaofei.com/img/202311292224701.png" alt="image.png"></p><h2 id="2-3-Obsidian-插件推荐">2.3 Obsidian 插件推荐</h2><p><strong>所有的插件都可以在插件市场中直接搜索下载</strong>，【设置-第三方插件-社区插件市场】</p><p>后续有时间再更新各个插件的介绍和使用详情</p><h3 id="1-提升编辑体验">1. 提升编辑体验</h3><p><a href="https://obsidian.md/plugins?id=media-extended"><strong>Media Extended</strong></a></p><p>Media Extended增强了媒体播放功能，包括链接到在线视频，速度控制，循环播放，字幕支持。</p><p>以及创建时间戳链接笔记，从在线视频、本地视频、录音中获取时间戳等等。</p><p>（目前测试似乎只能添加 Youtube 在线视频）</p><p><img src="https://www.youtube.com/watch?v=yBCD-Hfpd8U" alt=""></p><p><a href="https://obsidian.md/plugins?id=obsidian-outliner"><strong>Outliner</strong></a></p><p>增强列表样式</p><ul><li>可以上移下移缩进列表</li><li>增加列表垂直缩进线</li><li>增加折叠展开功能</li></ul><p><a href="https://obsidian.md/plugins?id=table-editor-obsidian"><strong>Advanced Tables</strong></a></p><p>优化创建表格的语法：输入一个<code>|</code>，然后输入第一个标题，接着按下<code>tab</code>，继续输入标题直到创建所有标题，然后按下<code>Enter</code>转到第一行输入内容，以此类推。</p><p>当光标位于表格中时：</p><table><thead><tr><th>快捷键</th><th>动作</th></tr></thead><tbody><tr><td><code>Tab</code></td><td>下一个单元格</td></tr><tr><td><code>Shift</code> + <code>Tab</code></td><td>上一个单元格</td></tr><tr><td><code>Enter</code></td><td>下一行</td></tr><tr><td><code>Ctrl</code> + <code>Shift</code> + <code>D</code></td><td>打开表格控件侧边栏</td></tr></tbody></table><p><img src="https://img.mahaofei.com/img/202311301613362.gif" alt=""></p><h3 id="2-增加功能">2. 增加功能</h3><p><a href="https://obsidian.md/plugins?id=calendar"><strong>Calendar</strong></a></p><p>日历插件，打开后会在右边侧栏出现日历。</p><p>点击日历上的日期，可以跳转到当天的每日笔记中（每日笔记也可以设置模板）</p><p><img src="https://img.mahaofei.com/img/202311301615320.png" alt="image.png"></p><p><a href="https://obsidian.md/plugins?id=obsidian-custom-frames"><strong>Custom Frames</strong></a></p><p>可以将任意的网页转换为obsidian窗格，非常不错。</p><p>例如我这里右侧的滴答清单：</p><p><img src="https://img.mahaofei.com/img/202311292140615.png" alt="image.png"></p><p><a href="https://obsidian.md/plugins?id=obsidian-image-auto-upload-plugin"><strong>Image auto upload Plugin</strong></a></p><p>image auto upload插件搭配PicGo使用，能自动将ob中插入的图片上传到图床中，优化图片插件体验。</p><p>在这里我使用的是阿里云OSS存储我的图片，具体可以参考：<a href="https://www.mahaofei.com/post/d05a7f72.html">阿里云图床搭建方法</a>或者[[01_阿里云图床搭建方法]]</p><p><a href="https://obsidian.md/plugins?id=recent-files-obsidian"><strong>Recent Files</strong></a></p><p>非常直观的功能，就是在左侧文件列表增加最近打开的文件列表。</p><p><img src="https://img.mahaofei.com/img/202311301701536.png" alt="image.png"></p><p><a href="https://obsidian.md/plugins?id=dataview"><strong>Dataview</strong></a></p><p>一个高效信息动态查询插件，当你拥有足够多的笔记后，可以用它来生成目录表格，并且支持各种查询限制条件。</p><p><a href="https://obsidian.md/plugins?id=templater-obsidian"><strong>Templater</strong></a></p><p>相比较与 obsidian 自带的模板工具，他能实现更复杂的模板，设置更多的变量和函数，生成一些功能强大的模板。</p><p><a href="https://obsidian.md/plugins?id=obsidian-admonition"><strong>Admonition</strong></a></p><p>能够在 Obsidian 中添加样式框的插件，能让笔记显得好看又有层次，可以配合着 Task、QuickAdd、Button 和 Dataview 等插件使用。</p><p><img src="https://img.mahaofei.com/img/202401071717704.png" alt="image.png"></p><p><a href="https://obsidian.md/plugins?id=quickadd"><strong>Quickadd</strong></a></p><p>可快速添加信息，捕捉想法，采用模板新建笔记和添加宏命令，快速执行多项操作的好用又强大的插件。</p><p><a href="https://obsidian.md/plugins?id=buttons"><strong>Buttons</strong></a></p><p>可以添加一些自定义按钮，用来执行一些特定人物，例如一些命令或者打开链接或者结合 quickadd 实现一些自动化流程。</p><p><a href="https://obsidian.md/plugins?id=obsidian-banners"><strong>Banners</strong></a></p><p>在笔记的开头添加和管理横幅图片，一般用于制作笔记主页时使用。</p><p><a href="https://obsidian.md/plugins?id=workspaces-plus"><strong>Workspaces plus</strong></a></p><p>快速切换管理工作区的布局。你可以按照你不同的习惯，规划工作区。</p><p><a href="https://obsidian.md/plugins?id=obsidian-hover-editor"><strong>Hover Editor</strong></a></p><p>通过将悬停弹窗变成一个功能齐全的编辑器，来增强核心的“页面预览”原有的功能。</p><h3 id="3-个性化设置">3. 个性化设置</h3><p><a href="https://obsidian.md/plugins?id=mysnippets-plugin"><strong>MySnippets</strong></a></p><p>css片段管理插件，在右下角生成css管理菜单，点击后可方便的开关css片段。</p><p><img src="https://img.mahaofei.com/img/202312010757678.gif" alt=""></p><p><a href="https://obsidian.md/plugins?id=obsidian42-brat"><strong>Obsidian42 - BRAT</strong></a></p><p>obsidian的插件下载大致可分为两种，第一种是从ob软件内的官方渠道下载，第二种则是通过Github等渠道下载后再手动安装。</p><p>Obsidian42 - BRAT 可以帮助你直接安装社区插件市场无法安装的插件。</p><p><a href="https://obsidian.md/plugins?id=obsidian-style-settings"><strong>Style Settings</strong></a></p><p>主题自定义设置插件，可以在现有主题的基础上，根据自己的需要进行魔改。</p><p><img src="https://img.mahaofei.com/img/202312010804210.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">介绍一种我自己一直在用的非常强大的笔记语法Markdown，以及基于markdown语法的编辑器Obsidian.</summary>
    
    
    
    <category term="实用工具" scheme="https://www.mahaofei.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="效率工具" scheme="https://www.mahaofei.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="笔记" scheme="https://www.mahaofei.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
